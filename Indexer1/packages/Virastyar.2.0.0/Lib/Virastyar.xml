<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Virastyar</name>
  </assembly>
  <members>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.DocFactory">
      <summary>
            this class is responsible for opening documents based upon their extensions, 
            and reclaiming their resources in the end.
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.DocFactory.DocTypeHandlers">
      <summary>
            A dictionary of extension-to-document-class-type, which specifies which file extension 
            should be opened by which document class (derived form IDocument).
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.DocFactory.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Microsoft.Office.Word.ContentReader.DocFactory" /> class.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.DocFactory.LoadDocTypeHandlers">
      <summary>
            Loads all classes attributed by SupportedDocTypesAtrribute through reflection.
            Then creates a dictionary of extensions to document class type, which is responsible to load 
            documents of that extension.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.DocFactory.LoadDocument(System.String)">
      <summary>
            Finds the proper document class according to the file extension, then opens the file by
            the found document class, and returns an (IDocument) reference to the document object.
            </summary>
      <param name="filePath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.DocFactory.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:SCICT.Microsoft.Office.Word.ContentReader.DocFactory" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.DocFactory.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.DocFactory.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.DocFactory.SupportedFileTypes">
      <summary>
            Gets a list of all extensions supported by all document classes 
            (derived from IDocument) in this assembly.
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.DocumentUtils">
      <summary>
            This class provides document-wide utility functions
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.DocumentUtils.ReadParagraphs(Microsoft.Office.Interop.Word.Document)">
      <summary>
            Reads the paragraphs of the document starting from the beginning.
            </summary>
      <param name="document">The document to read from.</param>
      <returns>Sequence of ranges containing paragraphs</returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.DocumentUtils.ReadParagraphsStartingFrom(Microsoft.Office.Interop.Word.Document,Microsoft.Office.Interop.Word.Range)">
      <summary>
            Reads the paragraphs of the document starting from the specified paragraph.
            </summary>
      <param name="document">The document to read from.</param>
      <param name="firstPar">The first paragraph to start reading from.</param>
      <returns>Sequence of ranges containing paragraphs</returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.DocumentUtils.ReadParagraphsStartingFromCursor(Microsoft.Office.Interop.Word.Document)">
      <summary>
            Reads the paragraphs of the document starting from cursor.
            </summary>
      <param name="document">The document to read from.</param>
      <returns>Sequence of ranges containing paragraphs</returns>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.StoryType">
      <summary>
            Enumerates different locations where a block (i.e. IBlock) can exist.
            The values are based upon Range.StoryType. 
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.Illegal">
      <summary>
            Illegal story type
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.Other">
      <summary>
            unknown story type
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.CommentsStory">
      <summary>
            comments
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.EndnotesStory">
      <summary>
            end-notes
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.EvenPagesFooterStory">
      <summary>
            even pages footer
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.EvenPagesHeaderStory">
      <summary>
            even pages header
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.FirstPageFooterStory">
      <summary>
            first page footer
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.FirstPageHeaderStory">
      <summary>
            first page header
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.FootnotesStory">
      <summary>
            footnotes
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.MainTextStory">
      <summary>
            main text
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.PrimaryFooterStory">
      <summary>
            primary footer
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.PrimaryHeaderStory">
      <summary>
            primary header
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.StoryType.TextFrameStory">
      <summary>
            text frame
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.BlockType">
      <summary>
            Enumerates different kind of blocks (i.e. IBlock).
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.BlockType.Illegal">
      <summary>
            illegal block type
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.BlockType.Word">
      <summary>
            word
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.BlockType.Sentence">
      <summary>
            sentence
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.BlockType.Paragraph">
      <summary>
            paragraph
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.BlockType.Everything">
      <summary>
            the whole document content
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.DocumentType">
      <summary>
            Enumerates different kind of documents.
            At the time of this documentation this Enum is not used.
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.DocumentType.Illegal">
      <summary>
            illegal document type
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.DocumentType.Doc">
      <summary>
            an MS-Word .doc or .docx file
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.DocumentType.HTML">
      <summary>
            HTML file
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.DocumentType.PlainText">
      <summary>
            Plain text file
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.DocumentType.RTF">
      <summary>
            a .rtf file
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.WordType">
      <summary>
            Enumerates a word type according to its characters.
            This enum is not used in the library, but has usage in the client projects.
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.WordType.Illegal">
      <summary>
            illegal word type
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.WordType.Space">
      <summary>
            all spaces
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.WordType.ArabicWord">
      <summary>
            arabic word
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.WordType.ArabicPunc">
      <summary>
            arabic pucntuation
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.WordType.ArabicNum">
      <summary>
            arabic number
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.WordType.EnglishWord">
      <summary>
            english word
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.WordType.EnglishPunc">
      <summary>
            english punctuation
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.WordType.EnglishNum">
      <summary>
            english number
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.TrimRangeResult">
      <summary>
            Enumerates different outcomes of a range trim operation.
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.TrimRangeResult.InvalidRange">
      <summary>
            Range is null, or empty or full of control characters
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.TrimRangeResult.Success">
      <summary>
            The range is trimmed and fit successfully
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.TrimRangeResult.Failure">
      <summary>
            The range is valid, and has valid contents; but it cannot be trimmed
            e.g., because of hyperlinks.
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.TrimRangeResult.TrimmedButLengthMismatch">
      <summary>
            The range-text equals the desired trimmed text. But the length of the
            range is larger than the length of the text.
            i.e., the range contains the text, together with some meta-data
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.Shared.FileUtils">
      <summary>
            FileUtils Class provides some static utilities for accessing files, in a directory structure.
            This class has no usage in the whole ContentReader Library, but since the clients
            (i.e. PersianContentReader.Console, and PersianContentReader.UI projects) use this 
            class it is placed in the PeresianContentReader.Lib project, so that 
            it is shared with the clients also.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.Shared.FileUtils.GetAllProcessableFiles(System.String,System.Boolean)">
      <summary>
            returns a list of file names in a directory structure 
            with extensions provided by DocFactory.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.Shared.FileUtils.GetAllProcessableFiles(System.String,System.Boolean,System.String)">
      <summary>
            returns a list of file names in a directory structure 
            with a given naming pattern.
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.IBlock">
      <summary>
            The parent interface for the objects carrying MS-Word document content.
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.IBlock.m_parentDocument">
      <summary>
            Reference to the document owning this block
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.IBlock.#ctor(SCICT.Microsoft.Office.Word.ContentReader.IDocument)">
      <summary>
            Protected Constructor, sets the reference to the parent document object.
            </summary>
      <param name="parentDocument">
      </param>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.IBlock.ParentDocument">
      <summary>
            Gets a reference to the document owning this block
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.IBlock.Content">
      <summary>
            The main content of the Block.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.IBlock.BlockType">
      <summary>
            The type of the block, whether it is Paragraph, Sentence, Word, and so on.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.IBlock.StoryType">
      <summary>
            Where this block is located. It is based upon Range.StoryType
            StoryTypes could be FootNote, EndNote, MainText, and so on
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.IBlock.Paragraphs">
      <summary>
            Sequence of paragraphs within this block
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.IBlock.Sentences">
      <summary>
            Sequence of sentences within this block
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.IBlock.Words">
      <summary>
            Sequence of words within this block
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.IDocument">
      <summary>
            Parent for objects manipulating MS-Word Document.
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.IDocument.listCharFilters">
      <summary>
            List of Character Filters already added to the document
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.IDocument.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Microsoft.Office.Word.ContentReader.IDocument" /> class.
            It simply initializes the Persian character filters.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.IDocument.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Microsoft.Office.Word.ContentReader.IDocument" /> class.
            </summary>
      <param name="documentPath">The document path.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.IDocument.AddCharFilter(SCICT.NLP.Persian.ICharFilter)">
      <summary>
            Adds a character filter. Added Character filters are used by FilterChar method.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.IDocument.FilterChar(System.Char)">
      <summary>
            Filters the character using all the CharFilters added.
            Since it may use several char filters this method is different form
            StringUtils.Filter* methods of PersianUtils, since they only use PersianCharFilter.
            This method is public, because IBlock and the children use it.
            </summary>
      <param name="chin">character to filter</param>
      <returns>
            The filtered version of the input character. If there are several applicable 
            CharFilters applicable to the input character, the one added first is only applied.
            If there are no CharFilters applicable, the original character is returned.
            </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.IDocument.Load(System.String)">
      <summary>
            Abstract method which should open some document from file with the given path.
            This method is visible to the class children only. 
            Clients should call LoadDocument method instead.
            </summary>
      <returns>true if load has succeeded.</returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.IDocument.GetContent">
      <summary>
            returns an IBlock to the content of the document. 
            This reference will refer to the whole document content.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.IDocument.LoadDocument(System.String)">
      <summary>
            public method to load a document from file with the given path.
            This method first checks whether the document is already loaded.
            It not calls the Load method, which is going to be 
            implemented by the class children. It the document is already open
            it throws an exception.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.IDocument.CharFilters">
      <summary>
            Sequence of character filters added to the document.
            Added Character filters are used by FilterChar method.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.IDocument.DocumentPath">
      <summary>
            The path to the document, if it is opened directly.
            If the document is not opened directly (e.g. it refers to a document provieded by MS Word Addin)
            then this property will not have proper value.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.IDocument.IsLoaded">
      <summary>
            Whether the document is loaded from a file, or via an MS-Word-Addin.
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.IntervalOverlap">
      <summary>
            Provides tools to detect the kind of the overlap between two intervals
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.IntervalOverlap.Detect(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Detects kind of the overlap that the specified two ranges have.
            </summary>
      <param name="start1">The inclusive start of the first interval.</param>
      <param name="end1">The exclusive end of the first interval.</param>
      <param name="start2">The inclusive start of the second interval.</param>
      <param name="end2">The exclusive end of the second interval.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.IntervalOverlap.GetSign(SCICT.Microsoft.Office.Word.ContentReader.IntervalOverlapKinds)">
      <summary>
            Gets the sign corresponding to the given overlap kind.
            -- means the first interval, and
            () means the second interval.
            </summary>
      <param name="overlapKind">Kind of the overlap.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.IntervalOverlapKinds">
      <summary>
            Enumerates all possible ways two intervals may overlap
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.IntervalOverlapKinds.FirstInsideSecond">
      <summary>
            (--)
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.IntervalOverlapKinds.FirstIncludesSecond">
      <summary>
            -()-
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.IntervalOverlapKinds.FirstBeforeAndInsideSecond">
      <summary>
            -(-)
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.IntervalOverlapKinds.FirstInsideAndAfterSecond">
      <summary>
            (-)-
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.IntervalOverlapKinds.FirstBeforeSecond">
      <summary>
            --()
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.IntervalOverlapKinds.FirstAfterSecond">
      <summary>
            ()--
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock">
      <summary>
            Any kind of contents of a MS-Word Document.
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerable">
      <summary>
            An enumerable class, used for enumerating blocks within another block.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerable.#ctor(SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator)">
      <summary>
            recieves an enumerator instance and returns it upon GetEnumerator method call.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerable.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator">
      <summary>
            An enumerator class to help walk through the blocks within another block.
            The enumerable class that uses this enumerator is BlockEnumerable.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.MoveNext">
      <summary>
            Reads the next block if any, or returns false if there are no next blocks.
            The read block will be stored in curBlock, which consequently 
            will be returned by the Current method.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.Reset">
      <summary>
            Resets the enumerator. Referring to MSDN this method is useful for COM-Interoperability.
            Regular applications do not need to implement this. 
            But anyway the preferred implementation would be to reset the state of the enumerator.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.#ctor(SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock,SCICT.Microsoft.Office.Word.ContentReader.BlockType)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator" /> class.
            </summary>
      <param name="block">The block.</param>
      <param name="readType">Type of the read operation.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.MoveNext(SCICT.Microsoft.Office.Word.ContentReader.BlockType)">
      <summary>
            Reads the next block of type blockType if any, 
            or returns false if there are no blocks remaining.
            The read block will be stored in curBlock, which consequently 
            will be returned by the Current method.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.FindFirstNonNullEtorIndex">
      <summary>
            Moves the value of curListIndex to the 
            next member of listEtors which is not null.
            That's necessary because the list may contain null members.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.GetContentEnumerable(Microsoft.Office.Interop.Word.Range)">
      <summary>
            We only read document contents Word-by-Word. Also Paragraphs and Sentences are 
            recognized from words.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.ReadWordContents(Microsoft.Office.Interop.Word.Range,System.Collections.Generic.List{System.Collections.IEnumerator})">
      <summary>
            Reads the whole word contents from the whole word's object model.
            The type of content to be read (i.e. word-by-word, sentence-by-sentence, ...)
            is determined by the GetContentEnumerable method.
            This is the base content reading method to be called. Since all the other methods
            work recursively one should call this method to start the operation.
            </summary>
      <param name="range">The range object whose content is to be read.</param>
      <param name="list">List of enumerators to be filled.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.ReadMainStory(Microsoft.Office.Interop.Word.Range,System.Collections.Generic.List{System.Collections.IEnumerator})">
      <summary>
            Receives a range and reads its content as well as content of all 
            the shapes inside that range. Also this function checks if the 
            range has been already read, so prevnets reading something twice.
            Every content-reading method makes its subject range, and must call 
            this method to read the contents of the mentioned range.
            </summary>
      <param name="range">The range to be read.</param>
      <param name="list">List of enumerators to be filled.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.ReadInlineShapes(Microsoft.Office.Interop.Word.Range,System.Collections.Generic.List{System.Collections.IEnumerator})">
      <summary>
            Reads the inline-shapes within the given range.
            By reading we mean adding the enumerator to the list of enumerators.
            This list will be read later.
            </summary>
      <param name="range">The range to be read.</param>
      <param name="list">List of enumerators to be filled.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.ReadFrames(Microsoft.Office.Interop.Word.Range,System.Collections.Generic.List{System.Collections.IEnumerator})">
      <summary>
            Reads the frames within the given range.
            By reading we mean adding the enumerator to the list of enumerators.
            This list will be read later.
            </summary>
      <param name="range">The range to be read.</param>
      <param name="list">List of enumerators to be filled.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.ReadFormFields(Microsoft.Office.Interop.Word.Range,System.Collections.Generic.List{System.Collections.IEnumerator})">
      <summary>
            Reads the form-fields within the given range.
            By reading we mean adding the enumerator to the list of enumerators.
            This list will be read later.
            </summary>
      <param name="range">The range to be read.</param>
      <param name="list">List of enumerators to be filled.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.ReadFootNotes(Microsoft.Office.Interop.Word.Range,System.Collections.Generic.List{System.Collections.IEnumerator})">
      <summary>
            Reads the footnotes within the given range.
            By reading we mean adding the enumerator to the list of enumerators.
            This list will be read later.
            </summary>
      <param name="range">The range to be read.</param>
      <param name="list">List of enumerators to be filled.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.ReadBookmarks(Microsoft.Office.Interop.Word.Range,System.Collections.Generic.List{System.Collections.IEnumerator})">
      <summary>
            Reads the bookmarks within the given range.
            By reading we mean adding the enumerator to the list of enumerators.
            This list will be read later.
            </summary>
      <param name="range">The range to be read.</param>
      <param name="list">List of enumerators to be filled.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.ReadEndNotes(Microsoft.Office.Interop.Word.Range,System.Collections.Generic.List{System.Collections.IEnumerator})">
      <summary>
            Reads the endnotes within the given range.
            By reading we mean adding the enumerator to the list of enumerators.
            This list will be read later.
            </summary>
      <param name="range">The range to be read.</param>
      <param name="list">List of enumerators to be filled.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.ReadComments(Microsoft.Office.Interop.Word.Range,System.Collections.Generic.List{System.Collections.IEnumerator})">
      <summary>
            Reads the comments within the given range.
            By reading we mean adding the enumerator to the list of enumerators.
            This list will be read later.
            </summary>
      <param name="range">The range to be read.</param>
      <param name="list">List of enumerators to be filled.</param>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockEnumerator.Current">
      <summary>
            Gets the current block to be read
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.range">
      <summary>
            Reference to the Range object from Microsoft Word Object Model, corresponding
            to this MSWordBlock instance
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.blockType">
      <summary>
            The type of the Block (e.g. Word, Sentence, Paragraph, ...)
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.#ctor(SCICT.Microsoft.Office.Word.ContentReader.IDocument,Microsoft.Office.Interop.Word.Range,SCICT.Microsoft.Office.Word.ContentReader.BlockType)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock" /> class.
            </summary>
      <param name="parent">The parent.</param>
      <param name="range">The range.</param>
      <param name="blockType">Type of the block.</param>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.Range">
      <summary>
            Gets a reference to the Range object from the MS-Word Object model,
            corresponding to this instance of MSWordBlock
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.Content">
      <summary>
            Gets a filtered content of the block.
            For a non-filtered content of the block use the RawContent property.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.RawContent">
      <summary>
            Gets the content of the block intact.
            For a filtered version of the content use the Content property.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.BlockType">
      <summary>
            Gets the type of the block (e.g. word, sentence, paragraph, ...)
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.StoryType">
      <summary>
            Gets the location where the block is located (e.g. footnote, end-note, main-story, ...)
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.Paragraphs">
      <summary>
            Gets the sequence of non empty paragraphs within this block.
            The content is trimmed before being returned.
            For a sequence of intact paragraphs within this block use 
            the RawParagraphs property.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.Sentences">
      <summary>
            Gets the sequence of non empty sentences within this block.
            The content is trimmed before being returned.
            For a sequence of intact sentences within this block use 
            the RawSentences property.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.Words">
      <summary>
            Gets the sequence of non empty words within this block.
            The content is trimmed before being returned.
            For a sequence of intact words within this block use 
            the RawWords property.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.RawParagraphs">
      <summary>
            Gets the sequence of paragraphs within this block as returned by
            Microsoft Mord Object Word Model.
            For a sequence of non-empty trimmed paragraphs within this block use 
            the Paragraphs property.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.RawSentences">
      <summary>
            Gets the sequence of sentences within this block as returned by
            Microsoft Mord Object Word Model.
            For a sequence of non-empty trimmed sentences within this block use 
            the Sentences property.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordBlock.RawWords">
      <summary>
            Gets the sequence of words within this block as returned by
            Microsoft Mord Object Word Model.
            For a sequence of non-empty trimmed words within this block use 
            the Words property.
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument">
      <summary>
            This class manipulates an MS-Word Document.
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.app">
      <summary>
            a reference to the Word Application owning this document
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.hasInternalApp">
      <summary>
            Determines whether the MS-Word Application object is created internally by this object,
            or provided externally (e.g. via an MS-Word Addin).
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.currentDoc">
      <summary>
            a reference to the Word Document of the Microsoft Object Model,
            corresponding to this object of the MSWordDocument class.
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.hasInternalDoc">
      <summary>
            Determines whether the MS-Word Document object is created internally by this object,
            or provided externally (e.g. via an MS-Word Addin).
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.#ctor(System.String)">
      <summary>
            creates an instance of this class by loading a document from file specified by the given path.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.#ctor(Microsoft.Office.Interop.Word.Document)">
      <summary>
            Creates an instance of this class by providing a reference to the 
            Word Document of the Microsoft Object Model, corresponding to this object 
            of the MSWordDocument class.
            This approach is used when working with Microsoft Word Addins.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.Load(System.String)">
      <summary>
            Loads the file. This method is protected, thus clients should call 
            LoadDocument method of the IDocument abstract class.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.Finalize">
      <summary>
            Destructor of the class :)
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.GetContent">
      <summary>
            returns an IBlock reference to the whole content of the document.
            thus the BlockType will be Everything.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.Cleanup">
      <summary>
            This method is called by DocFactory's Dispose mthod.
            </summary>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.MSWordDocument.CurrentMSDocument">
      <summary>
            Gets a reference to the Word Document of the Microsoft Object Model,
            corresponding to this object of the MSWordDocument class.
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions">
      <summary>
      </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions.SetRange(Microsoft.Office.Interop.Word.Range,Microsoft.Office.Interop.Word.Range)">
      <summary>
            Makes a range to become the same as anothr range. The other range's 
            storytype must be the same as the source range. otherwise the behavior of this
            function is unknown.
            </summary>
      <param name="range">
      </param>
      <param name="otherRange">
      </param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions.SetRangeAndTrim(Microsoft.Office.Interop.Word.Range,Microsoft.Office.Interop.Word.Range)">
      <summary>
            Sets the range and trims it.
            </summary>
      <param name="range">The range.</param>
      <param name="otherRange">The other range.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions.NextWord(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Gets the next word after the range. Preferably call this method if the 
            StoryType of the range is also Word.
            </summary>
      <param name="range">The range.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions.PreviousWord(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Gets the previous word before the range. Preferably call this method if the 
            StoryType of the range is also Word.
            </summary>
      <param name="range">The range.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions.GetFirstWord(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Gets the first word of the range.
            </summary>
      <param name="range">The range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions.GetValidCharAt(Microsoft.Office.Interop.Word.Range,System.Int32)">
      <summary>
            Gets the range of the valid char at the given index. 
            The index specified here corresponds to the string-index, except that, this index is 1-based, 
            but a typical string index is 0-based.
            </summary>
      <param name="range">The range.</param>
      <param name="index">The 1-based index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions.GetSubRange(Microsoft.Office.Interop.Word.Range,System.Int32,System.Int32)">
      <summary>
            Gets the sub range - the safe way.
            This method character ranges instead of substrings, and that's why it's safer than
            GetSubRange.
            </summary>
      <param name="range">The range</param>
      <param name="startIndex">The 0-based start index (not the range-index).</param>
      <param name="endIndex">The 0-based end index (not the range-index).</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions.GetSubRange(Microsoft.Office.Interop.Word.Range,System.Int32)">
      <summary>
            Gets the sub range - the safe way.
            This method character ranges instead of substrings, and that's why it's safer than
            GetSubRange.
            </summary>
      <param name="range">The range</param>
      <param name="startIndex">The 0-based start index (not the range-index).</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions.GetCopy(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Gets a copy of the range, so that modifying parameters of either of them will not alter the other.
            </summary>
      <param name="range">The range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions.FixLimits(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Fixes the limits of the specified range, so that it fits its content.
            </summary>
      <param name="range">The range.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions.Trim(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Trims the specified range.
            </summary>
      <param name="range">The range.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeExtensions.SelectIfPossible(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Selects Range if possible.
            </summary>
      <param name="range">The range.</param>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils">
      <summary>
            This class provides various helper methods to work with the Range class.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.FindTrimmedRangeStart(Microsoft.Office.Interop.Word.Range,System.String)">
      <summary>
            Finds the trimmed range start. returns -1 if it cannot trim the start of range.
            </summary>
      <param name="range">The range to find its trimmed content start.</param>
      <param name="trimmedText">The trimmed text of the range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.FindTrimmedRangeEnd(Microsoft.Office.Interop.Word.Range,System.String)">
      <summary>
            Finds the trimmed range end. returns -1 if it cannot trim the end of range.
            </summary>
      <param name="range">The range to find its trimmed content start.</param>
      <param name="trimmedText">The trimmed text of the range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.MatchStringWithRange(Microsoft.Office.Interop.Word.Range,System.String,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>
            Matches the string with range.
            </summary>
      <param name="r">The range</param>
      <param name="str">The String.</param>
      <param name="subStrIndex">Index of the sub String.</param>
      <param name="subStrLength">Length of the sub String.</param>
      <param name="rangeStartIndex">Start index of the range.</param>
      <param name="rangeEndIndx">The range end indx.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.GetStrIndexInRange(Microsoft.Office.Interop.Word.Range,System.String,System.Int32)">
      <summary>
            Gets the range-index equivalant to strStartIndex in str In case that it is going to be 
            normalized with respect to its spaces and half-spaces.
            </summary>
      <param name="r">
      </param>
      <param name="str">
      </param>
      <param name="strStartIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.GetTrimmedContentEndIndexInRange(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Returns the range-index for the real end of the range, 
            skipping whitespace, control characters, and hidden text at the end of the range.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.GetContentStartIndexInRange(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Returns the range-index for the real beginning of the range, 
            skipping whitespace, control characters, and hidden text at the beginning of the range.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.TrimRange(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Trims the range so that it fits its trimmed content.
            If the specified range is null or its Text property is null,
            it does not modify the range.
            Note: It modifies the range in parameter and does NOT create a copy
            This method is obsolete, use <c>TryTrimRange</c> instead!
            </summary>
      <param name="r">The range to trim.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.FixRangeLimits(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Fixes the range limits, so that it fits its content.
            </summary>
      <param name="r">The range.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.TrimRangeOld(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Trims the range so that it fits its trimmed content.
            If the specified range is null or its Text property is null, 
            it does not modify the range.
            Note: It modifies the range in parameter and does NOT create a copy
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.IsRangeInsideHyperlink(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Checks whether the specified range is in a hyperlink or not.
            </summary>
      <returns>True, if the range is in a hyperlink. Otherwise returns false.</returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.IsRangeInsideHyperlink(Microsoft.Office.Interop.Word.Range,Microsoft.Office.Interop.Word.Hyperlink@)">
      <summary>
            Checks whether the specified range is in a hyperlink or not. 
            If true, gives the hyperlink as an out parameter.
            </summary>
      <returns>True, if the range is in a hyperlink. Otherwise returns false.</returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.IsRangeInsideHyperlink(Microsoft.Office.Interop.Word.Range,Microsoft.Office.Interop.Word.Hyperlink)">
      <summary>
            Seemingly it checks if the link inside the range is the same as the provided hyperlink!
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.RefineAccordingToHL(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Checks whether the given range is inside a hyperlink and refine the range according to its hyperlink.
            Note: Use this method whenever you want to modify a range that is the first or last word of a hyperlink.
            Note: This method assumes that the given range is already trimmed.
            [Seemingly this method is not used anywhere]
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.ShrinkRangeToFirstWord(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Modifies the given range to fit only the first word inside the range.
            [Caution] This function modifies the original range object.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.ShrinkRangeToLastWord(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Modifies the given range to fit only the last word inside the range.
            [Caution] This function modifies the original range object.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.ShrinkRangeToSubRange(Microsoft.Office.Interop.Word.Range,System.Int32)">
      <summary>
            Modifies the given range boundaries to the specified boundaries.
            [Caution] This function modifies the original range object.
            </summary>
      <param name="r">The range to shrink.</param>
      <param name="startIndex">0-based index (not the range-index)</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.ShrinkRangeToSubRange(Microsoft.Office.Interop.Word.Range,System.Int32,System.Int32)">
      <summary>
            Modifies the given range boundaries to the specified boundaries.
            [Caution] This function modifies the original range object.
            </summary>
      <param name="r">The range to shrink.</param>
      <param name="startIndex">0-based index (not the range-index)</param>
      <param name="endIndex">0-based index (not the range-index)</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.GetCopy(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Gets a copy of the range, so that modifying parameters of either of them will not alter the other.
            </summary>
      <param name="range">The range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.GetSubRange(Microsoft.Office.Interop.Word.Range,System.Int32,System.Int32)">
      <summary>
            Returns a range from index indicated by startIndex (which is a 0-based index not a range-index), to
            endIndex inclusively.
            It returns a new Range as return value (i.e. does not modify the original range).
            Always check the return value for null.
            </summary>
      <param name="r">The range to return its sub-range.</param>
      <param name="startIndex">0-based index (not the range-index)</param>
      <param name="endIndex">0-based index (not the range-index)</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.GetSubRange(Microsoft.Office.Interop.Word.Range,System.Int32)">
      <summary>
            Returns a range from index indicated by startIndex (which is a 0-based index not a range-index).
            It returns a new Range as return value (i.e. does not modify the original range).
            Always check the return value for null.
            </summary>
      <param name="r">The range to return its subrange.</param>
      <param name="startIndex">0-based index (not the range-index)</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.IsCharInTextButNotInRange(System.Char)">
      <summary>
            Determines whether the specified character is visible in range's text but not in range character ranges
            </summary>
      <param name="ch">The character.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.GetSubRange2(Microsoft.Office.Interop.Word.Range,System.Int32,System.Int32)">
      <summary>
            Gets the sub range - the safe way.
            This method character ranges instead of substrings, and that's why it's safer than
            GetSubRange.
            </summary>
      <param name="r">The range</param>
      <param name="startIndex">The 0-based start index (not the range-index).</param>
      <param name="endIndex">The 0-based end index (not the range-index).</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.GetSubRange2(Microsoft.Office.Interop.Word.Range,System.Int32)">
      <summary>
            Gets the sub range - the safe way.
            This method character ranges instead of substrings, and that's why it's safer than
            GetSubRange.
            </summary>
      <param name="r">The range</param>
      <param name="startIndex">The 0-based start index (not the range-index).</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.GetIndexInRange(Microsoft.Office.Interop.Word.Range,System.Int32)">
      <summary>
            Gets the index in range which corresponds to the 
            index in the string (Range.Text) of the same range.
            Actually it returns the start index of the word in which the
            given index has occurred.
            [Seemingly this method is not used]
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.IsRangeEmpty(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Checks whether a given range cannot have any content. This will hapen when
            1. the range itself is null,
            2. the range.Text is null,
            3. the range's start limit exceeds its end limit
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.AreRangesEqual(Microsoft.Office.Interop.Word.Range,Microsoft.Office.Interop.Word.Range)">
      <summary>
            Checks if two ranges are exactly equal, i.e. if they're boundaries are the same,
            and they both belog to a same story type.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.GetWordOfSelection(Microsoft.Office.Interop.Word.Selection)">
      <summary>
            Gets the word containing the selection area. If the selection area contains more
            than one word, it returns the first word.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.GetWordBeforeCursor(Microsoft.Office.Interop.Word.Selection)">
      <summary>
            Returns the range object for the word right before the cursor (if any).
            e.g. Assume that pipe (|) indicates the cursor, the return value for:
            "Unive|rsity" is "Unive", and for "|University" is empty.
            </summary>
      <param name="selection">The selection.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.SetOrInitializeRange(Microsoft.Office.Interop.Word.Range@,Microsoft.Office.Interop.Word.Range)">
      <summary>
            Sets the source range to become equal to the destination range.
            If the source range is null, then it is assinged a non-null range.
            </summary>
      <param name="src">The source range.</param>
      <param name="dst">The destination range.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.NormalizeLimits(System.Int32@,System.Int32@,System.Int32,System.Int32)">
      <summary>
            If required, changes the values of startLimit and endLimit so that
            startLimit is smaller than endLimit and their values do not exceed
            the Range's limits which are provided by the rangeStartLimit and
            rangeEndLimit.
            </summary>
      <param name="startLimit">the start limit to be changed</param>
      <param name="endLimit">the end limit to be changed</param>
      <param name="rangeStartLimit">the start of the range to be checked upon</param>
      <param name="rangeEndLimit">the end of the range to be checked upon</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.TrySelect(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Tries to select the specified range.
            This method is provided, because there are some kind of ranges that
            are not selectable. e.g. ranges happening in comments.
            </summary>
      <param name="r">The range to select.</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.TrimStartRange(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Trims the beginning of the range.
            </summary>
      <param name="r">The range to trim</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeUtils.TrimEndRange(Microsoft.Office.Interop.Word.Range)">
      <summary>
            Trims the end of the range.
            </summary>
      <param name="r">The range to trim.</param>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.RangeEqualityComparer">
      <summary>
            An IEqualityComparer of Range to provide means to check whether two 
            ranges are equal if one is placed inside another. It does not check
            exact equality.
            This class is used by the content-reading methods of MSWordBlock.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeEqualityComparer.Equals(Microsoft.Office.Interop.Word.Range,Microsoft.Office.Interop.Word.Range)">
      <summary>
            Returns true if one range is inside another range, 
            and they both belong to a same story type.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.ReadParagraphsStartingFromCursor(Microsoft.Office.Interop.Word.Document)">
      <summary>
            Reads the paragraphs of the document starting from cursor.
            </summary>
      <param name="document">The document to read.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.ReadParagraphs(Microsoft.Office.Interop.Word.Document)">
      <summary>
            Reads the paragraphs of the document starting from the beginning.
            </summary>
      <param name="document">The document.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.ReplaceAll(System.String,System.String)">
      <summary>
            Replaces all instances of the given string to search with the
            new value provided, ignoring the character case. The original 
            string values are used, and they are not standardized. The search and 
            replacement does not respect word boundaries.
            </summary>
      <param name="oldValue">the string to search</param>
      <param name="newValue">the string to replace</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.ReplaceAllCaseInsensitive(System.String,System.String)">
      <summary>
            Replaces all instances of the given string to search with the
            new value provided, ignoring the character case. The original 
            string values are used, and they are not standardized. The search and 
            replacement does not respect word boundaries.
            </summary>
      <param name="oldValue">the string to search</param>
      <param name="newValue">the string to replace</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.ReplaceAllWordsCaseInsensitive(System.String,System.String)">
      <summary>
            Replaces all instances of the given string to search with the
            new value provided, ignoring the character case. The original 
            string values are used, and they are not standardized. The search and 
            replacement respect word boundaries.
            </summary>
      <param name="oldValue">the string to search</param>
      <param name="newValue">the string to replace</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.ReplaceAllStandardized(System.String,System.String)">
      <summary>
            Replaces all instances of the given string to search with the
            new value provided. The original string values are used, and they
            are not standardized. The search and replacement does not respect
            word boundaries.
            </summary>
      <param name="oldValue">the string to search</param>
      <param name="newValue">the string to replace</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.ReplaceAllWordsStandardized(System.String,System.String)">
      <summary>
            Replaces all instances of the given string to search with the
            new value provided. The original string values are used, and they
            are not standardized. The search and replacement respect
            word boundaries.
            </summary>
      <param name="oldValue">the string to search</param>
      <param name="newValue">the string to replace</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.ReplaceAllRegexpStandardized(System.String,System.String)">
      <summary>
            Replaces the pattern specified by the given regular expression 
            with the new value provided. The standardized version of string 
            contents are used for search and replacement and the values are 
            not standardized.
            </summary>
      <param name="regexp">the pattern to search</param>
      <param name="newValue">the value to be replaced (NOT a regexp replace pattern such as $1 or $2)</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.ReplaceAllRegexp(System.String,System.String)">
      <summary>
            Replaces the pattern specified by the given regular expression 
            with the new value provided. The original string contents are used for
            search and replacement and the values are not standardized.
            </summary>
      <param name="regexp">The pattern to search</param>
      <param name="newValue">the value to be replaced (NOT a regexp replace pattern such as $1 or $2)</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.ReplaceAllTwoWordsCombination(System.String,System.String,System.String)">
      <summary>
            Replaces the content of two consequtive words with thw new value provided.
            The values are first standardized.
            The search respects word boundaries.
            </summary>
      <param name="word1">the first word</param>
      <param name="word2">the second word</param>
      <param name="newValue">the new value to be replaced</param>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.TrimRange">
      <summary>
            Tries to make the range to fit its visible content. This method does NOT change 
            the underlying range; instead it returns a new instance of <c>RangeWrapper</c>,
            or <c>null</c> if the range could not be trimmed.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.GetFirst(System.Int32)">
      <summary>
            levels: 
            0: para
            1: sent
            2: wrod
            3: char
            4+: return
            </summary>
      <param name="level">The level.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.GetNext(System.Int32,System.Int32)">
      <summary>
            levels: 
            0: para
            1: sent
            2: wrod
            3: char
            4+: return
            </summary>
      <param name="level">
      </param>
      <param name="count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.GetRangeWithCharIndex(System.Int32)">
      <summary>
            Gets the index of the range with 0-based char index.
            The indexes are inclusive
            </summary>
      <param name="startChar">0-based character index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.RangeWrapper.GetRangeWithCharIndex(System.Int32,System.Int32)">
      <summary>
            Gets the index of the range with 0-based char index.
            The indexes are inclusive
            </summary>
      <param name="startChar">0-based start char index.</param>
      <param name="endChar">0-based end char index.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.SupportedDocTypesAtrribute">
      <summary>
            Atrribute class that specifies which IDocument derivatives support which file extensions.
            For a usage example see: MSWordDocument class.
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.SupportedDocTypesAtrribute.m_supportedDocTypes">
      <summary>
            list of supported file types
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.SupportedDocTypesAtrribute.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Microsoft.Office.Word.ContentReader.SupportedDocTypesAtrribute" /> class.
            </summary>
      <param name="args">The args.</param>
    </member>
    <member name="P:SCICT.Microsoft.Office.Word.ContentReader.SupportedDocTypesAtrribute.SupportedTypes">
      <summary>
            Gets the list of supported file types for the IDocument-derived instance.
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Office.Word.ContentReader.Shared.WordInfo">
      <summary>
            WordInfo Class that encapsualtes some information about words, to be used for statiscal purposes.
            This class has no usage in the whole ContentReader Library, but since the clients
            (i.e. PersianContentReader.Console, and PersianContentReader.UI projects) use this 
            class extensively it is placed in the PeresianContentReader.Lib project, so that 
            it is shared with the clients also.
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.Shared.WordInfo.WordNoSpace">
      <summary>
            The word without spaces
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.Shared.WordInfo.WordNoErab">
      <summary>
            The word without erabs
            </summary>
    </member>
    <member name="F:SCICT.Microsoft.Office.Word.ContentReader.Shared.WordInfo.Count">
      <summary>
            The Count of the words
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.Shared.WordInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Microsoft.Office.Word.ContentReader.Shared.WordInfo" /> class.
            </summary>
    </member>
    <member name="M:SCICT.Microsoft.Office.Word.ContentReader.Shared.WordInfo.#ctor(System.String,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Microsoft.Office.Word.ContentReader.Shared.WordInfo" /> class.
            </summary>
      <param name="noSpace">word without space.</param>
      <param name="noErab">The word without erab.</param>
      <param name="count">The Count of the word.</param>
    </member>
    <member name="T:SCICT.NLP.Morphology.Inflection.Conjugation.Properties.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:SCICT.NLP.Morphology.Inflection.Conjugation.Properties.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:SCICT.NLP.Morphology.Inflection.Conjugation.Properties.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Morphology.Inflection.InflectionAnalyser">
      <summary>
             Analysis Persian inflection rules 
            </summary>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.InflectionAnalyser.IsValidPhoneticComposition(System.String,System.String,SCICT.NLP.Persian.Constants.PersianPOSTag)">
      <summary>
             Check whether that given composition is a valid composition as phonetic rules
            </summary>
      <param name="stem">Stem word</param>
      <param name="suffix">Suffix word</param>
      <param name="pos">POS Tag of the stem</param>
      <param name="suffixCategory">Suffix category that matchs the rule</param>
      <returns>True if given composition is correct</returns>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.InflectionAnalyser.IsValidDeclension(SCICT.NLP.Persian.Constants.PersianPOSTag,SCICT.NLP.Persian.Constants.PersianSuffixesCategory)">
      <summary>
             Check whether that given composition is a valid suffix declension referring stem's POS
            </summary>
      <param name="pos">Stem's POS tag</param>
      <param name="suffixCategory">Suffix Category</param>
      <returns>True if given composition is correct</returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.InflectionAnalyser.EqualSuffixWithCorrectPhonetic(System.String,System.String,SCICT.NLP.Persian.Constants.PersianSuffixesCategory)">
      <summary>
             Get equal suffix which is correct as phonetic rules 
            </summary>
      <param name="stem">Stem word</param>
      <param name="suffix">Suffix</param>
      <param name="suffixCategory">Suffix Category</param>
      <returns>Equal correct suffix</returns>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.InflectionAnalyser.EqualSuffixWithCorrectPhonetic(System.String,System.String,SCICT.NLP.Persian.Constants.PersianSuffixesCategory,SCICT.NLP.Persian.Constants.PersianPOSTag)">
      <summary>
             Get equal suffix which is correct as phonetic rules 
            </summary>
      <param name="stem">Stem word</param>
      <param name="suffix">Suffix</param>
      <param name="suffixCategory">Suffix Category</param>
      <param name="pos">Persian POS tag</param>
      <returns>Equal correct suffix</returns>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.InflectionAnalyser.CalculateSpacingState(System.String,System.String,SCICT.NLP.Persian.Constants.PersianPOSTag)">
      <summary>
             Calculate spacing state of combining given stem and suffix
            </summary>
      <param name="stem">Stem word</param>
      <param name="suffix">suffix</param>
      <param name="pos">Pos Tag</param>
      <returns>Spacing state</returns>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.InflectionAnalyser.AcceptingPOS(SCICT.NLP.Persian.Constants.PersianSuffixesCategory)">
      <summary>
             Return POS category of possible words that an accept suffixes in given category
            </summary>
      <param name="suffixCategory">Suffix categoy</param>
      <returns>POS tag(s)</returns>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.InflectionAnalyser.ConsonantVowelState(System.String,System.String,System.String,SCICT.NLP.Persian.Constants.PersianSuffixesCategory)">
      <summary>
            Determine the state of ending with consonant or vowel letter
            </summary>
      <param name="word">Inflected Word</param>
      <param name="suffix">Suffix</param>
      <param name="stem">Stem</param>
      <param name="suffixCategory">Suffix Category</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.InflectionAnalyser.SuffixCategory(System.String)">
      <summary>
             Return the suffix category
            </summary>
      <param name="suffix">Suffix</param>
      <returns>Suffix category</returns>
      <exception cref="T:System.NotImplementedException">
      </exception>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.InflectionAnalyser.EqualSuffixWithSpacingSymbols(System.String)">
      <summary>
             Return equal suffix with spacing symbols
            </summary>
      <param name="suffix">Suffix</param>
      <returns>Suffix with spacing symbols</returns>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.InflectionAnalyser.MultiplyStrings(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Returns a sequence of strings gained from concatenating string <paramref name="first" />
            with all the strings in <paramref name="second" />.
            </summary>
      <param name="first">The string to form the left-hand-side of the concatenations.</param>
      <param name="second">The sequence of strings to form the right-hand-side of the concatenations.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.InflectionAnalyser.MultiplyStrings(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Returns a sequence of strings gained from concatenating all the strings 
            in <paramref name="first" /> with all the strings in <paramref name="second" />.
            </summary>
      <param name="first">The sequence of strings to form the left-hand-side of the concatenations.</param>
      <param name="second">The sequence of strings to form the right-hand-side of the concatenations.</param>
    </member>
    <member name="T:SCICT.NLP.Morphology.Inflection.PersianSuffixLemmatizer">
      <summary>
            Helps recognize suffixes in Persian words.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Morphology.Inflection.PersianSuffixLemmatizer.m_revPatternMatcher">
      <summary>
            An instance of reverse pattern matcher to help find Suffixes patterns in the end of 
            each word.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Morphology.Inflection.PersianSuffixLemmatizer.m_lstPatterns">
      <summary>
            List of Suffixes pattern
            </summary>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.PersianSuffixLemmatizer.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Morphology.Inflection.PersianSuffixLemmatizer" /> class.
            </summary>
      <param name="useColloquals">if set to <c>true</c> it will recognize colloqual affixes as well.</param>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.PersianSuffixLemmatizer.#ctor(System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Morphology.Inflection.PersianSuffixLemmatizer" /> class.
            </summary>
      <param name="useColloquals">if set to <c>true</c> it will recognize colloqual affixes as well.</param>
      <param name="uniqueResults">if set to <c>true</c> unique results will be returned.</param>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.PersianSuffixLemmatizer.WordConstructionRules(System.String,System.String,System.String[]@,System.String[]@)">
      <summary>
            Performs Persian word construction rules to the given base-word and suffix strings.
            </summary>
      <param name="baseWord">The base word to modify.</param>
      <param name="suffix">The suffix to modify.</param>
      <param name="newBaseWords">The new base words to be added.</param>
      <param name="newSuffixes">The new suffixes to be added.</param>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.PersianSuffixLemmatizer.InitPatternsList(SCICT.NLP.Persian.Constants.PersianSuffixesCategory,System.Boolean)">
      <summary>
            Creates the list of Persian Suffixes patterns.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Morphology.Inflection.PersianSuffixLemmatizer.MatchForSuffix(System.String)">
      <summary>
            Matches the input string for finding Persian Suffixes.
            </summary>
      <param name="input">The input string to find Suffixes.</param>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.Morphology.Inflection.PersianSuffixLemmatizer.UseColloquals">
      <summary>
            Gets a value indicating whether the colloqual Suffixes should be recognized.
            </summary>
      <value>
        <c>true</c> if the colloqual Suffixes should be recognized; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SCICT.NLP.Morphology.Inflection.PersianSuffixLemmatizer.ReturnUniqueResults">
      <summary>
            Gets a value indicating whether the returned results should be unique.
            </summary>
      <value>
        <c>true</c> if the returned results should be unique; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:SCICT.NLP.PartOfSpeechTagger.IPosTagger.GetPossibleTags(System.String,SCICT.NLP.Persian.Constants.PersianPartOfSpeech[]@,System.Double[]@)">
      <summary>
            Computes possible part of speech tags and corresponding weights for each given <paramref name="lexeme" />.
            </summary>
      <param name="lexeme">The word, token or in all lexemes whose part of speech must be computed.</param>
      <param name="tags">Resulting part of speech tags</param>
      <param name="weights">Weights corresponding each tag</param>
      <remarks>It's guaranteed that tags would be in descending order of weights and length of <paramref name="tags" /> and <paramref name="weights" /> are equal.</remarks>
      <seealso cref="M:SCICT.NLP.PartOfSpeechTagger.IPosTagger.GetPossibleTags(System.String,SCICT.NLP.PartOfSpeechTagger.Context,SCICT.NLP.Persian.Constants.PersianPartOfSpeech[]@,System.Double[]@)" />
    </member>
    <member name="M:SCICT.NLP.PartOfSpeechTagger.IPosTagger.GetPossibleTags(System.String,System.String[]@,SCICT.NLP.Persian.Constants.PersianPartOfSpeech[]@,System.Double[]@)">
      <summary>
            Computes possible part of speech tags and corresponding weights for each given <paramref name="lexeme" />.
            </summary>
      <param name="lexeme">The word, token or in all lexemes whose part of speech must be computed.</param>
      <param name="lemmas">Possible lemmas for the given lexeme</param>
      <param name="tags">Resulting part of speech tags</param>
      <param name="weights">Weights corresponding each tag</param>
      <remarks>It's guaranteed that tags would be in descending order of weights and length of <paramref name="tags" /> and <paramref name="weights" /> are equal.</remarks>
      <seealso cref="M:SCICT.NLP.PartOfSpeechTagger.IPosTagger.GetPossibleTags(System.String,SCICT.NLP.PartOfSpeechTagger.Context,SCICT.NLP.Persian.Constants.PersianPartOfSpeech[]@,System.Double[]@)" />
    </member>
    <member name="M:SCICT.NLP.PartOfSpeechTagger.IPosTagger.GetPossibleTags(System.String,SCICT.NLP.PartOfSpeechTagger.Context,SCICT.NLP.Persian.Constants.PersianPartOfSpeech[]@,System.Double[]@)">
      <summary>
            Computes possible tag for given <paramref name="lexeme" /> regarding both word and <paramref name="context" />.
            </summary>
      <param name="lexeme">The word, token or in all lexemes whose part of speech must be computed.</param>
      <param name="context">Context of the focused word (e.g. It's previous and next lexemes or tags)</param>
      <param name="tags">Resulting part of speech tags</param>
      <param name="weights">Weights corresponding each tag</param>
      <remarks>It's guaranteed that tags would be in descending order of weights and length of <paramref name="tags" /> and <paramref name="weights" /> are equal.</remarks>
      <seealso cref="M:SCICT.NLP.PartOfSpeechTagger.IPosTagger.GetPossibleTags(System.String,SCICT.NLP.Persian.Constants.PersianPartOfSpeech[]@,System.Double[]@)" />
    </member>
    <member name="M:SCICT.NLP.PartOfSpeechTagger.IPosTagger.Tag(System.String[])">
      <summary>
            Tags an array of <code>System.String</code>, i.e. <paramref name="lexems" />, and returns an array of <code>PersianPartOfSpeech</code>.
            </summary>
      <param name="lexems">Array of lexemes to be tagged</param>
      <returns>Corresponding part of speech tags</returns>
    </member>
    <member name="M:SCICT.NLP.PartOfSpeechTagger.IPosTagger.TagAndLemmatize(System.String[],SCICT.NLP.Persian.Constants.PersianPartOfSpeech[]@,System.String[]@)">
      <summary>
            Tags an array of <code>System.String</code>, i.e. <paramref name="lexems" />, and returns an array of <code>PersianPartOfSpeech</code>.
            </summary>
      <param name="lexems">Array of lexemes to be tagged</param>
      <param name="tags">Resulting part of speech tags</param>
      <param name="lemmas">Possible lemmas for the given lexeme</param>
    </member>
    <member name="T:SCICT.NLP.PartOfSpeechTagger.MaximumLikelihood.MaximumLikelihoodTagger.POSDictionaryEntry">
      <summary>
            Every line in dictionary file will form a <code>POSDictionaryEntry</code> instance.
            </summary>
      <remarks>This class is just to be used internally.</remarks>
    </member>
    <member name="M:SCICT.NLP.PartOfSpeechTagger.MaximumLikelihood.MaximumLikelihoodTagger.GetPossibleTags(System.String,SCICT.NLP.PartOfSpeechTagger.Context,SCICT.NLP.Persian.Constants.PersianPartOfSpeech[]@,System.Double[]@)">
      <summary>
            Computes possible part fo speech tags based on word and context. Be notified that maximum liklihood taggers ignore context information.
            </summary>
      <param name="lexeme">Focused token which its possible part of speeches should be calculated.</param>
      <param name="context">The context regarding the focused word.</param>
      <param name="tags">List of possible part of speech tags</param>
      <param name="weights">List of possibility weights</param>
      <remarks>List of tags is sorted in descending order of weights.</remarks>
      <seealso cref="M:SCICT.NLP.PartOfSpeechTagger.MaximumLikelihood.MaximumLikelihoodTagger.GetPossibleTags(System.String,SCICT.NLP.Persian.Constants.PersianPartOfSpeech[]@,System.Double[]@)" />
    </member>
    <member name="T:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine">
      <summary>
            Main Punctuation Corrector class.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.#ctor">
      <summary>
            Constractor for PuncEngine class.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.#ctor(System.String)">
      <summary>
            Constractor for PuncEngine class.
            </summary>
      <param name="patternsFilePath">Pattern File Name (full path or relative name).</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.InitInputString(System.String)">
      <summary>
            Everytime you build a PuncEngine class you MUST initialize it with an input string. This is the string you want to find its punctuational error; e.g. a paraphaph. 
            You just need to pass a string as an input parameter to InitInputString() function.
            </summary>
      <param name="inStr">Input String; e.g. paragraph or sentence. there is no limit on its length but we suggest to keep it less than 2000 character</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetCorrectedString">
      <summary>
            When you have done with input text get back corrected text (whole tetx) by calling GetCorrectedString().
            </summary>
      <returns>Corrected string</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.SetSkipIndex(System.Int32)">
      <summary>
            Set an index in the text as a skip point. Correction process will continue after this point and preceding text will be ignored.
            </summary>
      <param name="indx">Skip index; must be less than length of input string </param>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetSkipIndex" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetSkipIndex">
      <summary>
            Get skip point set by SetSkipIndex.
            </summary>
      <returns>An integer value denotes skip point</returns>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.SetSkipIndex(System.Int32)" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.FindMistake">
      <summary>
            After class initiation you can find mistakes.
            This function works in two mode. (1) Normal (2) When Golden Rule is set.
            In the first case, this function makes the class to focus on the first mistake in the text.
            After focus you can do additional tasks such as CorrectMistake().
            In the second case, this will find and correct all mistakes according to Golden Rule.
            </summary>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.InitInputString(System.String)" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.SetGoldenRule" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.UnsetGoldenRule" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.CorrectMistake(System.Int32)">
      <summary>
            Correct focused mistake. You must focus on a mistake beforehand by calling FindMistake().
            </summary>
      <param name="rep">Every mistake pattern may have several correction patterns which indicated by an input integer.</param>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.FindMistake" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.SkipMistake">
      <summary>
            Skip focused mistake. It will set the skip point to the point which the mistake was found.
            </summary>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.SetSkipIndex(System.Int32)" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.IsErrorFound">
      <summary>
            Verify result of last call for FindMistake() to see whether mistake found or not.
            </summary>
      <returns>Returns True when mistake found otherwise returns False</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetMistakeIndex">
      <summary>
            Get index of focused mistake. You must focus on a mistake beforehand by calling FindMistake().
            This function accompanies wiht its couple GetMistakeLength() to determine mistake position.
            </summary>
      <returns>An integer value denotes index of mistake</returns>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetMistakeLength" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.FindMistake" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetMistakeLength">
      <summary>
            Get length of focused mistake. You must focus on a mistake beforehand by calling FindMistake().
            This function accompanies wiht its couple GetMistakeIndex() to determine mistake position.
            </summary>
      <returns>An integer value denotes length of mistake</returns>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetMistakeIndex" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.FindMistake" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.BookMarkSkipIndex">
      <summary>
            Sometime we need to bookmark Skip Index to recall it in the future. E.g. when correcting all mistake by a rule we must save current skip index. In this case we call BookMarkSkipIndex().
            This function go together wiht its couple BookMarkSkipIndex().
            </summary>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.RecallSkipIndex" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.SetGoldenRule" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.UnsetGoldenRule" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.RecallSkipIndex">
      <summary>
            Used to recll last saved Skip Index.
            </summary>
      <see cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.BookMarkSkipIndex" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetMistakeDescription">
      <summary>
            Returns a string which describes focused mistake.
            </summary>
      <returns>String description of mistake</returns>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetMistakeSuggestion" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetMistakeSuggestion">
      <summary>
            Returns a string which suggest an action to correct focused mistake.
            </summary>
      <returns>String, suggesting an action.</returns>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetMistakeDescription" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetSubstitutionString">
      <summary>
            Returns a string that should substitutes "Mistake String" which determined by GetMistakeIndex() and GetMistakeLength().
            </summary>
      <returns>Substitution string</returns>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetSubstitutionString" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetMistakeIndex" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetMistakeLength" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetMultiSubstitutionString">
      <summary>
            Similar to GetSubstitutionString() but returns multiple suggestions. You can use one of those suggestion to correct text.
            you can correct text inside class by calling CorrectMistake(int rep) with an input integer which selects one of suggestions.
            </summary>
      <returns>Array of suggestion string.</returns>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.CorrectMistake(System.Int32)" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.GetSubstitutionString" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.DisableLastRule">
      <summary>
            Disables last focused rule.
            </summary>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.EnableAllRules" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.EnableAllRules">
      <summary>
            Enables all rules.
            </summary>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.DisableLastRule" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.SetGoldenRule">
      <summary>
            Set current rule which focused mistake was found by, as Golden Rule. A Golden Rule is defined to correct all mistakes at ones.
            </summary>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.SetGoldenRule" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.FindMistake" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.UnsetGoldenRule">
      <summary>
            Unset current Golden Rule. 
            </summary>
      <see cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.SetGoldenRule" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.FindMistake" />
    </member>
    <member name="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.IsAllChangeable">
      <summary>
            Determine whether Golden Rule could be applied or not.
            </summary>
      <returns>True, when a Golden rule is applicable; False, when a Golden rule is not applicable.</returns>
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.SetGoldenRule" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.UnsetGoldenRule" />
      <seealso cref="M:SCICT.NLP.TextProofing.Punctuation.PunctuationCheckerEngine.FindMistake" />
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.ExampleInfo.IsCorrect">
      <summary>
            Gets or sets a value indicating whether this is an example of a correct-example or an incorrect-example.
            </summary>
      <value>
        <c>true</c> if this example is correct; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element">
      <summary>
            A part of a pattern.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.m_stringToken">
      <summary>
            The value of the token, i.e., its literal value
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.m_testWhitespaceBefore">
      <summary>
            indicates whether isWhiteSpaceBefore is to be tested
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.m_whitespaceBefore">
      <summary>
            Stores the value of isWhitespaceBefore attribute of 
            this element (whether true or false)
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.m_exceptionList">
      <summary>
            List of exceptions that are valid for the current token and / or some
            next tokens.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.m_exceptionValidNext">
      <summary>
            True if scope=="next".
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.m_exceptionSet">
      <summary>
            True if any exception with a scope=="current" or scope=="next" is set for
            the element.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.m_exceptionValidPrevious">
      <summary>
            True if attribute scope=="previous".
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.m_previousExceptionList">
      <summary>
            List of exceptions that are valid for a previous token.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.m_tokenReference">
      <summary>
            The reference to another element in the pattern which is usually
            specified with a Match element or \# pattern. 
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.m_containsMatches">
      <summary>
            True when the element stores a formatted reference to another element of
            the pattern.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.m_referenceString">
      <summary>
            The string containing the match which is referenced in the token.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.m_testString">
      <summary>
            This var is used to determine if calling {@link #matchStringToken()}
            makes sense. This method takes most time so it's best reduce the number
            of its calls.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
            Creates Element that is used to match tokens in the text.
            </summary>
      <param name="token">string to be matched.</param>
      <param name="caseSensitive">True if the check is case-sensitive.</param>
      <param name="regExp">
        <c>true</c> if the check uses regular expressions.</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsExceptionMatched(SCICT.NLP.Utility.SentenceToken)">
      <summary>
            Checks whether an exception matches.
            </summary>
      <param name="token">The token to check matching against.</param>
      <returns>
        <c>true</c> if any of the exceptions matches (logical disjunction); otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsAndExceptionGroupMatched(SCICT.NLP.Utility.SentenceToken)">
      <summary>
            Enables testing multiple conditions specified by multiple element
            exceptions. Works as logical AND operator.
            </summary>
      <param name="token">the token checked for exceptions.</param>
      <returns>
        <c>true</c> if all conditions are met, false otherwise; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsExceptionMatchedCompletely(SCICT.NLP.Utility.SentenceToken)">
      <summary>
            This method checks exceptions both in AND-group and the token. 
            Introduced for clarity.
            </summary>
      <param name="token">The token to match.</param>
      <returns>
        <c>true</c> if matched; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsMatchedByScopeNextException(SCICT.NLP.Utility.SentenceToken)">
      <summary>
            Checks whether a previously set exception matches (in case the exception
            had scope == "next").
            Checks whether that an exception set on a previous pattern element which 
            is attributed as scope == "next", matches the current token.
            </summary>
      <param name="curToken">The current token, against which the exception of 
            the previous pattern element is going to be matched.</param>
      <returns>
        <c>true</c> if any of the exceptions matches; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsMatchedByPreviousException(SCICT.NLP.Utility.SentenceToken)">
      <summary>
            Checks whether an exception for a previous token matches (in case the
            exception had scope == "previous").
            </summary>
      <param name="token">The token to check matching against.</param>
      <returns>
        <c>true</c> if any of the exceptions matches; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.HasPreviousException">
      <summary>
            Checks if the element has an exception for a previous token.
            </summary>
      <returns>
        <c>true</c> if the element has a previous token matching exception; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.GetExceptionList">
      <summary>
            Gets the list of exceptions.
            </summary>
      <returns>
            A List of Exceptions. Used for testing.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsMatched(SCICT.NLP.Utility.SentenceToken)">
      <summary>
            Checks whether the rule element matches the token given as a parameter.
            This method also takes the custom tags into account.
            </summary>
      <param name="token">The token.</param>
      <returns>
        <c>true</c> if token matches; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.AddMemberAndGroup(SCICT.NLP.Utility.SentenceToken)">
      <summary>
            Enables testing multiple conditions specified by different elements.
            Doesn't test exceptions.
            Works as logical AND operator only if preceded with
            <c>setupAndGroup</c>, and followed by <c>checkAndGroup</c>.
            </summary>
      <param name="token">the token checked.</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.HasAndGroup">
      <summary>
            Checks if this element has an AND group associated with it.
            </summary>
      <returns>
        <c>true</c>if the element has a group of elements that all should
            match; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.GetAndGroup">
      <summary>
            Returns the group of elements linked with AND operator.
            </summary>
      <returns>List of Elements</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsSentStart">
      <summary>
            Checks if the token is a SENT_START.
            </summary>
      <returns>
        <c>true</c> if the element starts the sentence and the element hasn't
            been set to have negated POS token; otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.HasReferenceElements">
      <summary>
            returns true when this element refers to another token.
            </summary>
      <returns>
        <c>true</c> if this element refers to another token; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsStringTokenMatched(SCICT.NLP.Utility.SentenceToken)">
      <summary>
            Tests whether the string token element matches a given token.
            </summary>
      <param name="token">The token to match against.</param>
      <returns>
        <c>true</c> if matches; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.ResolveMatchReferences(SCICT.NLP.Utility.SentenceToken)">
      <summary>
            Prepare Element for matching by formatting its string token and POS (if
            the Element is supposed to refer to some other token).
            </summary>
      <param name="token">The token value of the resolved *Match* reference.</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.GetUniFeatures">
      <summary>
            Get unification features and types.
            </summary>
      <returns>A map from features to a list of types.</returns>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsNegated">
      <summary>
            Gets or sets a value indicating whether the meaning of this match is negated
            </summary>
      <value>
        <c>true</c> if this instance is negation; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.SkipNext">
      <summary>
            Gets the exception scope length.
            </summary>
      <returns>Scope length</returns>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.Match">
      <summary>
            Gets or Sets the reference to another token.
            Another token is usually referenced with the *Match* element or the \# pattern.
            </summary>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.PhraseName">
      <summary>
            Gets or sets string ID of the phrase the element is in.
            </summary>
      <value>
            The name of the phrase.
            </value>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsPartOfPhrase">
      <summary>
            Checks if the Element is in any phrase.
            </summary>
      <returns>
        <c>true</c> if the Element is contained in the phrase; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsCaseSensitive">
      <summary>
            indicates whether the value of this element shoudl be matched case-sensitivity.
            </summary>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsRegularExpression">
      <summary>
            indicates whether the value of this element is an instance of regular expression string
            </summary>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element.IsUnified">
      <summary>
            Gets a value indicating whether the element is inside the unification, 
            so that <c>Unifier</c>  tests it.
            </summary>
      <value>
        <c>true</c> if this instance is unified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Category">
      <summary>
            A rule's category. Categories are used to group rules for a better overview.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Category.#ctor(System.String)">
      <summary>
            Create a new category with the given name.
            </summary>
      <param name="name">name of the category</param>
    </member>
    <member name="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Rule">
      <summary>
            Abstract rule class. A Rule describes a language error and can test whether a
            given pre-analyzed text Contains that errors.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Rule.MatchSentence(SCICT.NLP.Sentence)">
      <summary>
            Check whether the given text matches this error rule, i.e. whether the
            text Contains this error.
            </summary>
      <param name="text">a pre-analyzed sentence</param>
      <returns>an array of RuleMatch object for each match.</returns>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Rule.CorrectExamples">
      <summary>
            Gets or sets the correct examples.
            </summary>
      <value>
            The correct examples.
            </value>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Rule.IncorrectExamples">
      <summary>
            Gets or sets the incorrect examples.
            </summary>
      <value>
            The incorrect examples.
            </value>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Rule.References">
      <summary>
            Gets or sets the references for this rule.
            </summary>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Rule.Category">
      <summary>
            Gets or sets the category of the rule.
            </summary>
      <value>
            The category.
            </value>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Rule.IsDefaultOff">
      <summary>
            Gets and sets value indicating whether the rule has been turned off by default by the rule
            author.
            </summary>
      <value>
        <c>true</c> if this instance is default off; otherwise, <c>false</c>.
            </value>
      <returns>
        <c>true</c> if if the rule is turned off by default; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.AbstractPatternRule">
      <summary>
            An Abstract Pattern Rule that describes a pattern of words or 
            tags used for PatternRule and DisambiguationPatternRule.
            Introduced to minimize code duplication between those classes.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.AbstractPatternRule.m_prevExceptMatched">
      <summary>
            A value indicating whether the current token has been matched by the exception part of the previous token. 
            The previous token's exception must have been attributed as scope="next"
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.AbstractPatternRule.m_sentStart">
      <summary>
            set to true if the first element of the pattern is conditioned as sentence-start
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.AbstractPatternRule.SetupAndGroup(System.Int32,SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element,SCICT.NLP.Utility.SentenceToken[])">
      <summary>
            Sets up references in pattern elements if they have and groups.
            </summary>
      <param name="firstMatchTokenInd">The token-index of the first pattern match</param>
      <param name="elem">The element to setup</param>
      <param name="tokens">the sentence tokens</param>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.MatchTokenInfo.StartPos">
      <summary>
            Pos: Part of Speech
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.CaseConversion">
      <summary>
            Possible string case conversions.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.m_staticLemma">
      <summary>
            True if this match element formats a statically defined lemma which is
            enclosed by the element, e.g., <tt>&lt;match...&gt;word&lt;/word&gt;</tt>.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.m_formattedToken">
      <summary>
            True if this match element is used for formatting POS token.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.m_pRegexMatch">
            Pattern used to define parts of the matched token.
        </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.m_inMessageOnly">
      <summary>
            True when the match is not in the suggestion.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.SetToken(SCICT.NLP.Utility.SentenceToken)">
      <summary>
            Sets the token that will be formatted or otherwise used in the class.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.SetToken(SCICT.NLP.Utility.SentenceToken[],System.Int32,System.Int32)">
      <summary>
            Sets the token to be formatted etc. and includes the support for
            including the skipped tokens.
            </summary>
      <param name="tokens">Array of tokens.</param>
      <param name="index">Index of the token to be formatted.</param>
      <param name="next">Position of the next token (the skipped tokens are the ones
            between the tokens[index] and tokens[next].
            </param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.ToFinalString">
      <summary>
            Gets all strings formatted using the match element.
            
            @return array of strings
            @
                        in case of synthesizer-related disk problems.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.ToTokenString">
      <summary>
            Method for getting the formatted match as a single string. In case of
            multiple matches, it joins them using a regular expression operator "|".
            
            @return Formatted string of the matched token.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.SetTokenRef(System.Int32)">
      <summary>
            Sets the token number referenced by the match.
            </summary>
      <param name="i">Token number</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.GetTokenRef">
      <summary>
            Gets the token number referenced by the match.
            </summary>
      <returns>token number</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.ConvertCase(System.String)">
      <summary>
            Converts case of the string token according to match element attributes.
            
            @param s
                       Token to be converted.
            @return Converted string.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.ConvertsCase">
      <summary>
            Used to let LT know that it should change the case of the match.
            
            @return true if match converts the case of the token.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.SetInMessageOnly(System.Boolean)">
      <summary>
            @param inMessageOnly
                       the inMessageOnly to set
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match.IsInMessageOnly">
      <summary>
            @return the inMessageOnly
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule">
      <summary>
            A Rule that describes a language error as a simple pattern of words or of
            part-of-speech tags.
            
            @author Daniel Naber
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.m_errorMessageMatches">
            Formatted suggestion elements
        </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.m_elementNo">
      <summary>
            A list of elements as they appear in XML file (phrases count as single
            tokens in case of matches or skipping).
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.m_useList">
      <summary>
            This property is used for short-circuiting evaluation of the elementNo
            list order.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.m_isMemberOfDisjunctiveSet">
      <summary>
             Marks whether the rule is a member of a disjunctive set (in case of OR
             operation on phraserefs).
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.#ctor(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element},System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule" /> class.
            </summary>
      <param name="id">Id of the Rule.</param>
      <param name="locale">Language of the Rule.</param>
      <param name="getWhitespace">if set to <c>true</c> yields whitespaces as tokens.</param>
      <param name="elements">The elements.</param>
      <param name="name">Name to be shown.</param>
      <param name="message">Message to be displayed to the user.</param>
      <param name="description">The short message.</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.IsWithComplexPhrase">
      <summary>
            Used for testing rules: only one of the set can match.
            </summary>
      <returns>
            Whether the rule can non-match (as a member of disjunctive set of
            rules generated by phraseref in includephrases element).
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.NotComplexPhrase">
      <summary> Reset complex status - used for testing.</summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.TranslateElementNo(System.Int32)">
      <summary>
            Gets the index of the element indexed by i, adding any offsets because of
            the phrases in the rule.
            </summary>
      <param name="i">Current element index</param>
      <returns>Index translated into XML element no</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.PhraseLen(System.Int32)">
      <summary>
             Returns true when the token in the rule references a phrase composed of
             many tokens.
             
             @param i
                        The index of the token.
             @return true if the phrase is under the index, false otherwise.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.CombineLists(System.String[][],System.String[],System.Int32,System.String)">
      <summary>
            Creates a Cartesian product of the arrays stored in the input array.
            </summary>
      <param name="input">Array of string arrays to combine.</param>
      <param name="output">Work array of strings.</param>
      <param name="r">Starting parameter (use 0 to get all combinations).</param>
      <param name="locale">Text language for adding spaces in some languages.</param>
      <returns>Combined array of strings.</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.ConcatMatches(System.Collections.Generic.List{SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match},System.Int32,System.Int32,System.Int32,SCICT.NLP.Utility.SentenceToken[],System.Int32)">
      <summary>
            Concatenates the matches, and takes care of phrases (including inflection
            using synthesis).
            
            @param start
                       Position of the element as referenced by match element in the
                       rule.
            @param index
                       The index of the element found in the matching sentence.
            @param tokenIndex
                       The position of the token in the AnalyzedTokenReadings array.
            @param tokens
                       Array of @AnalyzedTokenReadings
            @return @string[] Array of concatenated strings
            @
                        in case disk operations (used in synthesizer) go wrong.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.ResolveErrorMessageMatches(SCICT.NLP.Utility.SentenceToken[],System.Int32[],System.Int32,System.String)">
      <summary>
            Replace back references generated with &lt;match&gt; and \\1 in message
            using Match class, and take care of skipping.///
            
            @param toks
                       Array of AnalyzedTokenReadings that were matched against the
                       pattern
            @param positions
                       Array of relative positions of matched tokens
            @param firstMatchTok
                       Position of the first matched token
            @param errorMsg
                       string containing suggestion markup
            @return string Formatted message.
            @
            
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRule.GetElements">
      <summary>
            For testing only.
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRuleLoader">
      <summary>
            Loads PatternRules from an XML file.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRuleParser.ProcessElement(System.Collections.Generic.IEnumerable{SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Element})">
      <summary>
            Calculates the offset of the match reference (if any) in case the match
            element has been used in the group.
            </summary>
      <param name="elList">Element list where the match element was used. It is directly
            changed.</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.PatternRuleParser.AddLegacyMatches(System.Text.StringBuilder,System.Collections.Generic.List{SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Patterns.Match})">
      <summary>
            Adds Match objects for all references to tokens (including '\1' and the
            like).
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch">
      <summary>
            A class that holds information about where a rule matches text.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.#ctor(SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Rule,System.Int32,System.Int32,System.String,System.String)">
      <summary>
            Creates a RuleMatch object, taking the rule that triggered this match,
            position of the match and an explanation message. This message is scanned
            for &lt;suggestion&gt;...&lt;/suggestion&gt; to get suggested fixes for the
            problem detected by this rule.
            
            @param startWithUppercase
                       whether the original text at the position of the match start
                       with an uppercase character
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.SetSuggestedReplacement(System.String)">
      <summary>
        <see cref="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.GetSuggestedReplacements" />
      </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.SetSuggestedReplacements(System.Collections.Generic.List{System.String})">
      <summary>
        <see cref="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.GetSuggestedReplacements" />
      </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.GetSuggestedReplacements">
      <summary>
            The text fragments which might be an appropriate fix for the problem. One
            of these fragments can be used to Replace the old text between
            getFromPos() to getToPos(). Text between &lt;suggestion&gt; and
            &lt;/suggestion&gt; is taken as the suggested replacement.
            </summary>
      <returns>List of string objects or an empty List</returns>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.FromLine">
      <summary>
            Gets or sets the line number in which the match occurs.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.EndLine">
      <summary>
            Gets or sets the line number in which the match ends.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.FromColumn">
      <summary>
            Gets or sets the column number in which the match occurs.
            </summary>
      <value>
            The column.
            </value>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.EndColumn">
      <summary>
            Gets or sets column number in which the match ends.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.Offset">
      <summary>
            Gets or sets the character offset at which the match occurs.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.FromPos">
      <summary>
            Gets Position of the start of the error (in characters).
            </summary>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.ToPos">
      <summary>
            Gets Position of the end of the error (in characters).
            </summary>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.Message">
      <summary>
            Gets A human-readable explanation describing the error.
            </summary>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.RuleMatch.Description">
      <summary>
            Gets a human-readable explanation describing the rule.
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool">
      <summary>
            The main class used for checking text against different rules:
            <ul><li>the built-in rules (<i>a</i> vs. <i>an</i>, whitespace after commas, ...)</li><li>pattern rules loaded from external XML files with <c>loadPatternRules</c></li><li>your own implementation of the abstract <c>Rule</c> classes added with <c>addRule</c></li></ul>
            Pay attention that the constructors create a language checker that uses the built-in
            rules only. Other rules (e.g. from XML) need to be added explicitly.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
      <summary>
            Create a LanguageTool and setup the built-in rules appropriate for the
            given language, ignoring false friend hints.
            </summary>
      <param name="locale">The locale short name e.g., "fa" or "en", or "xx" for test.</param>
      <param name="ruleFileNames">The rule file names.</param>
      <param name="posTaggerDicFile">The POS tagger dictionary file.</param>
      <param name="posTaggerStemFile">The POS tagger stem file.</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.SetOutput(System.IO.TextWriter)">
      <summary>
            HashSet a TextWriter that will receive verbose output. HashSet to
            <code>null</code> to disable verbose output.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.LoadPatternRules(System.String)">
      <summary>
            Load pattern rules from an XML file. Use <c>addRule</c> to Add these
            rules to the checking process.
            </summary>
      <param name="filename">The filename.</param>
      <returns>a List of <c>PatternRule</c> objects</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.ActivateDefaultPatternRules">
      <summary>
            Loads and activates the pattern rules from <paramref name="m_ruleFileNames" /></summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.AddRule(SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Rules.Rule)">
      <summary>
            Add a rule to be used by the next call to <c>Check</c>.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.DisableRule(System.String)">
      <summary>
            Disable a given rule so <c>check</c> won't use it.
            </summary>
      <param name="ruleId">the id of the rule to disable.</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.EnableRule(System.String)">
      <summary>
            Re-enable a given rule so Check will use it.
            </summary>
      <param name="ruleId">the id of the rule to enable</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.DisableCategory(System.String)">
      <summary>
            Disable a given category so <c>Check</c> won't use it.
            </summary>
      <param name="categoryName">the id of the category to disable.</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.EnableCategory(System.String)">
      <summary>
            Disable a given category so <c>Check</c> won't use it.
            </summary>
      <param name="categoryName">the id of the category to disable.</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.GetDisabledCategories">
      <summary>
            Get category ids of the rules that have been explicitly disabled.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.SentenceTokenize(System.String)">
      <summary>
            Returns tokenized sentences.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.Check(System.String,System.Boolean)">
      <summary>
            The main check method. Tokenizes the text into sentences and matches
            these sentences against all currently active rules.
            </summary>
      <param name="text">the text to check</param>
      <param name="tokenizeTextInSentences">if set to <c>true</c>, the text is tokenized into sentences. 
            Otherwise, it is assumed it's already tokenized.</param>
      <returns>a List of <c>RuleMatch</c> objects</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.GetAnalyzedSentence(System.String)">
      <summary>
            Tokenizes the given <code>sentence</code> into words, adds the sentence
            start token, and applies the "struct" and "pos" taggers to it.
            </summary>
      <param name="sentence">The string to build the sentence upon.</param>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.LanguageTool.AllRules">
      <summary>
            Get all rules for the current language that are built-in or that have
            been added using <c>addRule</c>.
            </summary>
      <returns>a List of <c>Rule</c> objects</returns>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tagging.TokenStructs.Whitespace">
      <summary>
            Empty token or a real whitespace token
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tagging.TokenStructs.SentenceStart">
      <summary>
            The first imaginary zero-length token 
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tagging.TokenStructs.SentenceEnd">
      <summary>
            The last non-whitespace token
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tagging.TokenStructs.ParagraphEnd">
      <summary>
            The last newline token
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tagging.TokenStructs.Punctuation">
      <summary>
            A punctuation or a symbol
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tools.ReflectionUtils.GetTypeByName(System.String)">
      <summary>
            Searches all loaded assemblies to find a type with a special name.
            </summary>
      <param name="name">The name of the type to find.</param>
      <returns>type found using the specified name</returns>
    </member>
    <member name="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tools.StringTools">
      <summary>
            Tools for reading files etc.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tools.StringTools.AddSpace(System.String,System.String)">
      <summary>
            Adds spaces before words that are not punctuation.
            </summary>
      <param name="word">Word to Add the preceding space.</param>
      <param name="locale">Language of the word (to check typography conventions).
            Currently French convention of not adding spaces only before
            '.' and ',' is implemented; other languages assume that before
            ,.;:!? no spaces should be added..</param>
      <returns>string containing a space or an empty string.</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tools.StringTools.IsPositiveNumber(System.Char)">
      <summary>
            Checks if the character is a positive number (decimal digit from 1
            to 9).
            </summary>
      <param name="ch">Character to check</param>
      <returns>
        <c>true</c> if the character is a positive number (decimal digit from 1
            to 9); otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tools.SymbolLocator">
      <summary>
            Helper class for GenericUnpairedBracketsRule to identify symbols indexed with
            integers.
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tools.UnsyncStack`1">
      <summary>
            Implements unsynchronized stack (contrary to default Java java.util.Stack,
            this one is based on ArrayList). Usage is the same as the java.util.Stack.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tools.UnsyncStack`1.#ctor">
      <summary>
            Generated automatically.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tools.UnsyncStack`1.Push(`0)">
      <summary>
            Pushes an item onto the top of this stack. This has exactly the same
            effect as: <blockquote><pre>
            Add(item)
            </pre></blockquote>
            
            @param item
                       the item to be pushed onto this stack.
            @return the <code>item</code> argument.
            @see java.util.ArrayList#Add
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tools.UnsyncStack`1.Pop">
      <summary>
            Removes the object at the top of this stack and returns that object as
            the value of this function.
            
            @return The object at the top of this stack (the last item of the
                    <tt>List</tt> object).
            @exception Exception
                           if this stack is empty.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tools.UnsyncStack`1.Peek">
      <summary>
            Looks at the object at the top of this stack without removing it from the
            stack.
            
            @return the object at the top of this stack (the last item of the
                    <tt>List</tt> object).
            @exception Exception
                           if this stack is empty.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tools.UnsyncStack`1.Empty">
      <summary>
            Tests if this stack is empty.
            
            @return <code>true</code> if and only if this stack Contains no items;
                    <code>false</code> otherwise.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.RuleBasedLanguageChecking.Tools.UnsyncStack`1.Search(System.Object)">
      <summary>
            Returns the 1-based position where an object is on this stack. If the
            object <tt>o</tt> occurs as an item in this stack, this method returns
            the distance from the top of the stack of the occurrence nearest the top
            of the stack; the topmost item on the stack is considered to be at
            distance <tt>1</tt>. The <tt>Equals</tt> method is used to compare
            <tt>o</tt> to the items in this stack.
            
            @param o
                       the desired object.
            @return the 1-based position from the top of the stack where the object
                    is located; the return value <code>-1</code> indicates that the
                    object is not on the stack.
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.SpellChecker.SpaceCorrectionState">
      <summary>
             Differnet state of correct spacing problems
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpaceCorrectionState.SpaceDeletation">
      <summary>
             Mistakenly omission of a white space (e.g. computersoftware)
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpaceCorrectionState.SpaceDeletationSerrially">
      <summary>
             Mistakenly omission of many white spaces (e.g. computersoftwarearchitecture)
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpaceCorrectionState.SpaceInsertationLeft">
      <summary>
             Mistakenly Insertion of a white space in left side of word (e.g. comput er software)
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpaceCorrectionState.SpaceInsertationLeftSerrially">
      <summary>
             Mistakenly Insertion of white spaces in left side of word and its parted words (e.g. com p u ter software)
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpaceCorrectionState.SpaceInsertationRight">
      <summary>
             Mistakenly Insertion of a white space in right side of word (e.g. computer so ftware)
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpaceCorrectionState.SpaceInsertationRightSerrially">
      <summary>
             Mistakenly Insertion of white spaces in right side of word and its parted words (e.g. computer s o ftware)
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpaceCorrectionState.None">
      <summary>
             Spacing is correct
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.SpellChecker.SuggestionType">
      <summary>
             Type of suggestion, warning or error
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SuggestionType.Green">
      <summary>
             Green for warning types
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SuggestionType.Red">
      <summary>
             Red for explicit error types
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.SpellChecker.SpellingRules">
      <summary>
             Different rules for spellchecking
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpellingRules.VocabularyWordsSpaceCorrection">
      <summary>
             Consider space correction for dictionary words
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpellingRules.CheckForCompletetion">
      <summary>
             Consider suggestions that may appear by assuming word as incomplete and complete rest of it (e.g. compu -&gt; computer)
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpellingRules.IgnoreHehYa">
      <summary>
             Ignore writing of mocker Yeh of Kasra as "Heh with Yeh above" (e.g. "خانۀ" instead of "خانه‌ی")
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpellingRules.IgnoreLetters">
      <summary>
             Ignore single letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpellingRules.IgnorePseudoSpaceCompoundWords">
      <summary>
             Ignore existnce of compund words with pseudo space in dictionary and accept them if the parts exists
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.SpellChecker.OnePassCorrectionRules">
      <summary>
             Rules of Prespelling
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.OnePassCorrectionRules.CorrectPrefix">
      <summary>
             Correct spacing of Prefixes such as Mee and NeMee (e.g. "می توانم" and "میتوانم" to "می‌توانم")
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.OnePassCorrectionRules.CorrectSuffix">
      <summary>
             Correct spacing of Suffixes such as Haa and objective pronouns (e.g. "شرکت ها" and "شرکتها" to "شرکت‌ها")
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.OnePassCorrectionRules.CorrectBe">
      <summary>
             Correct sticked Be to Be with white space (e.g. "بعنوان" to "به عنوان")
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.OnePassCorrectionRules.CorrectSpacing">
      <summary>
             Correct spacing of words
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.SpellChecker.PersianSpellCheckerConfig">
      <summary>
             configuration Class of Spell Checker
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.PersianSpellCheckerConfig.StemPath">
      <summary>
             The absolute path of stem's file.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.PersianSpellCheckerConfig.DicPath">
      <summary>
             The absolute path of dictionary file.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.PersianSpellCheckerConfig.EditDistance">
      <summary>
             Indicates the Maximum Edit Distance that searched for finding suggestions
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.PersianSpellCheckerConfig.SuggestionCount">
      <summary>
             Number of Suggestions
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.PersianSpellCheckerConfig.ColloquialSupport">
      <summary>
            Support for colloquial words inflection
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellCheckerConfig.#ctor">
      <summary>
             Constructor Class
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellCheckerConfig.#ctor(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>
             Constructor Class
            </summary>
      <param name="dicPath">Absolute path of dictionary file</param>
      <param name="stemPath">Absolute path of verb stem file</param>
      <param name="editDist">Maximum Edit Distance that searched for finding suggestions</param>
      <param name="sugCnt">Number of Suggestions</param>
      <param name="colloquialSupport">Support for colloquial word inflection</param>
    </member>
    <member name="T:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine">
      <summary>
             Spell Checker Engine
             This Class find and rank respelling suggestions for a incorrectly spelled word
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine" /> class.
            Before using this intance, you should call <see cref="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.Reconfigure(SCICT.NLP.TextProofing.SpellChecker.SpellCheckerConfig)" /> to properly initialize the engine.
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.#ctor(SCICT.NLP.TextProofing.SpellChecker.SpellCheckerConfig)">
      <summary>
             Class Constructor
            </summary>
      <param name="config">Spellchecker Configuration</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.Reconfigure(SCICT.NLP.TextProofing.SpellChecker.SpellCheckerConfig)">
      <summary>
            Reconfigures the engine
            </summary>
      <param name="sc">Spellchecker Configuration</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.AppendDictionary(System.String)">
      <summary>
             Append another dictionary
             </summary>
      <param name="fileName">dictionary file name</param>
      <returns>True if dictionary is successfully added, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.CheckDictionaryCorrectness(System.String,System.Int64)">
      <summary>
             Check Dictionary Correctness
            </summary>
      <param name="fileName">File name</param>
      <param name="wordCounts">Extracted words count</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.ClearDictionary">
      <summary>
             Remove all words from dictionary
            </summary>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.AddToIgnoreList(System.String)">
      <summary>
             Add a word to Ignore List
             </summary>
      <param name="word">word to be ignored</param>
      <returns>True if word is successfully added, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.AddToDictionary(System.String)">
      <summary>
             Add a correct word to dictionary
             </summary>
      <param name="word">New word</param>
      <param name="freq">Usage frequency of word</param>
      <returns>True if word is successfully added, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.AddToDictionary(System.String,System.String)">
      <summary>
             Add a correct word to dictionary
             </summary>
      <param name="word">New word</param>
      <param name="fileName">File name</param>
      <returns>True if word is successfully added, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.AddToDictionary(System.String,System.Int32,SCICT.NLP.Persian.Constants.PersianPOSTag)">
      <summary>
             Add a correct word to dictionary
             </summary>
      <param name="word">New word</param>
      <param name="freq">Usage frequency of word</param>
      <param name="posTag">POS tag of word</param>
      <returns>True if word is successfully added, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.AddToDictionary(System.String,System.Int32,SCICT.NLP.Persian.Constants.PersianPOSTag,System.String)">
      <summary>
             Add a correct word to dictionary
             </summary>
      <param name="word">New word</param>
      <param name="freq">Usage frequency of word</param>
      <param name="posTag">POS tag of word</param>
      <param name="fileName">File name</param>
      <returns>True if word is successfully added, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.RemoveFromDictionary(System.String)">
      <summary>
            Remove a word from dictionary
            </summary>
      <param name="word">input word</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.IsRealWord(System.String)">
      <summary>
            Check if the word is correct (exists in dictionary)
            </summary>
      <param name="word">Word</param>
      <returns>True if word is correct, Otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.IsInIgnoreList(System.String)">
      <summary>
            Check if the word is in ignore list
            </summary>
      <param name="word">Word</param>
      <returns>True if word is exist, Otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.IsRealWord(System.String,System.Int32@,SCICT.NLP.Persian.Constants.PersianPOSTag@)">
      <summary>
             Check if the word is correct (exists in dictionary)
             </summary>
      <param name="word">Word</param>
      <param name="freq">Frequency</param>
      <param name="posTag">POS tag</param>
      <returns>True if word is correct, Otherwise False</returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.GetAllWords">
      <summary>
            Get All dictionary's words
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.CompleteWord(System.String)">
      <summary>
            Complete the rest of incomplete word
            </summary>
      <param name="subWord">Incomplete word</param>
      <returns>Completed words start with incomplete word</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.CompleteWord(System.String,System.Int32)">
      <summary>
            Complete the rest of incomplete word
            </summary>
      <param name="subWord">Incomplete word</param>
      <param name="count">Number of returned suggestions</param>
      <returns>Completed words start with incomplete word</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SortSuggestions(System.String[])">
      <summary>
            Return most frequent word from list of words
            </summary>
      <param name="words">list of words</param>
      <returns>Most frequent word</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SortSuggestions(System.String[],System.Int32)">
      <summary>
            Sort a list of words ordered by usage frequency
            </summary>
      <param name="words">list of words</param>
      <param name="suggestionCount">Number of returned suggestions</param>
      <returns>Sorted list</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SortSuggestions(System.String,System.String[])">
      <summary>
            return most string similar word of list with givven word
            </summary>
      <param name="baseWord">Base word used to compare (Usually incorrect word)</param>
      <param name="words">List of words (Usually list of respelling suggestions)</param>
      <returns>most similar word</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SortSuggestions(System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.Int32})">
      <summary>
            return most string similar word of list with givven word
            </summary>
      <param name="baseWord">Base word used to compare (Usually incorrect word)</param>
      <param name="words">List of words (Usually list of respelling suggestions)</param>
      <param name="freq">Word's frequency</param>
      <returns>most similar word</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SortSuggestions(System.String,System.String[],System.Int32)">
      <summary>
            Sort a list of words ordered by string similarity
            </summary>
      <param name="baseWord">Base word used to compare (Usually incorrect word)</param>
      <param name="words">List of words (Usually list of respelling suggestions)</param>
      <param name="suggestionCount">Number of returned suggestions</param>
      <returns>Sorted list</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SortSuggestions(System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.Int32},System.Int32)">
      <summary>
            Sort a list of words ordered by string similarity
            </summary>
      <param name="baseWord">Base word used to compare (Usually incorrect word)</param>
      <param name="words">List of words (Usually list of respelling suggestions)</param>
      <param name="freq">Word frequency</param>
      <param name="suggestionCount">Number of returned suggestions</param>
      <returns>Sorted list</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.ExtractRealWords(System.String[])">
      <summary>
            Return dictionary (correct) words
            </summary>
      <param name="words">List of words</param>
      <returns>List of dictionary (correct) words</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.ExtractRealWords(System.String[],System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Collections.Generic.Dictionary{System.String,SCICT.NLP.Persian.Constants.PersianPOSTag}@)">
      <summary>
            Return dictionary words including POS
            </summary>
      <param name="words">List of words</param>
      <param name="freqDic">Frequency</param>
      <param name="posDic">POS tag</param>
      <returns>List of dictionary words</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SpellingSuggestions(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Collections.Generic.Dictionary{System.String,SCICT.NLP.Persian.Constants.PersianPOSTag}@)">
      <summary>
            Get all correct respelling suggestions of an incorrect word including their POS tag
            </summary>
      <param name="word">(Incorrect) Word</param>
      <param name="freqDic">Frequency</param>
      <param name="posDic">POS Tag</param>
      <returns>List of correct respellings</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.RankedSpellingSuggestions(System.String,System.Int32)">
      <summary>
            Get a list of sorted (ranked) correct respelling suggestions of an incorrect word by similarity
            </summary>
      <param name="word">Wrong Word</param>
      <param name="suggestionCount">Number of returned suggestions</param>
      <returns>Sorted list of correct respelling suggestions</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SpellingSuggestions(System.String)">
      <summary>
            Get a list of correct respelling and homophone suggestions of an incorrect word by similarity
            </summary>
      <param name="word">Wrong Word</param>
      <returns>Sorted list of correct respelling suggestions</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SpellingSuggestions2(System.String)">
      <summary>
            Get a list of correct respelling and homophone suggestions of an incorrect word by similarity
            </summary>
      <param name="word">Wrong Word</param>
      <returns>Sorted list of correct respelling suggestions</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SpellingSuggestions3(System.String,System.Int32)">
      <summary>
            Get a list of correct respelling and homophone suggestions of an incorrect word by similarity
            </summary>
      <param name="word">Wrong Word</param>
      <returns>Sorted list of correct respelling suggestions</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.MultiplyStrings(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Returns a sequence of strings gained from concatenating all the strings 
            in <paramref name="first" /> with all the strings in <paramref name="second" />.
            </summary>
      <param name="first">The sequence of strings to form the left-hand-side of the concatenations.</param>
      <param name="second">The sequence of strings to form the right-hand-side of the concatenations.</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SpellingSuggestions(System.String,System.Int32)">
      <summary>
            Get a list of correct respelling and homophone suggestions of an incorrect word by similarity
            </summary>
      <param name="word">Wrong Word</param>
      <param name="editDistance">Edit distance</param>
      <returns>Sorted list of correct respelling suggestions</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.WordFrequency(System.String)">
      <summary>
             Return word's frequency
            </summary>
      <param name="word">word</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.WordPOS(System.String)">
      <summary>
             Return word's POS tag
            </summary>
      <param name="word">word</param>
      <returns>POS tag</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SaveDistionaryToFile(System.String)">
      <summary>
             Save Loaded Dictionary to File
            </summary>
      <param name="fileName">File name</param>
    </member>
    <member name="P:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.EditDistance">
      <summary>
             Indicates the Maximum Edit Distance that searched for finding suggestions
            </summary>
    </member>
    <member name="P:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.SuggestionCount">
      <summary>
             Number of Suggestions
            </summary>
    </member>
    <member name="P:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.DictionaryFileName">
      <summary>
             The absolute path of dictionary file.
            </summary>
    </member>
    <member name="P:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.StemFileName">
      <summary>
             The absolute path of stem's file.
            </summary>
    </member>
    <member name="P:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine.DicWordCount">
      <summary>
             Number of dictionary words
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker">
      <summary>
             Persian Spell Checker
             This Class find and rank respelling suggestions for a incorrectly spelled Persian word
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.#ctor(SCICT.NLP.TextProofing.SpellChecker.SpellCheckerConfig)">
      <summary>
             Class Constructor
            </summary>
      <param name="config">Spellchecker configuration</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.SetSpellingRules(SCICT.NLP.TextProofing.SpellChecker.SpellingRules)">
      <summary>
             Set rules of spellchecking
            </summary>
      <param name="rules">Spellchecking rules (Logically OR rules)</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.UnsetSpellingRules(SCICT.NLP.TextProofing.SpellChecker.SpellingRules)">
      <summary>
             Remove rules of spellchecking
            </summary>
      <param name="rules">Spellchecking rules (Logically OR rules)</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.SetOnePassCorrectionRules(SCICT.NLP.TextProofing.SpellChecker.OnePassCorrectionRules)">
      <summary>
             Set rules of prespelling
            </summary>
      <param name="rules">Prespelling rules (Logically OR rules)</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.UnsetOnePassCorrectionRules(SCICT.NLP.TextProofing.SpellChecker.OnePassCorrectionRules)">
      <summary>
             Remove rules of prespelling
            </summary>
      <param name="rules">Prespelling rules (Logically OR rules)</param>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.GetSimpleFormOfWord(System.String)">
      <summary>
            Get affix-striped word
            </summary>
      <param name="word">Word</param>
      <returns>List of plausible simple forms of word</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.OnePassCorrection(System.String,System.String,System.String,System.Int32,System.String[]@,SCICT.NLP.TextProofing.SpellChecker.SuggestionType@,SCICT.NLP.TextProofing.SpellChecker.SpaceCorrectionState@)">
      <summary>
             Prespell text
            </summary>
      <param name="word">Current word</param>
      <param name="preWord">Previous word in context</param>
      <param name="nxtWord">Next word in context</param>
      <param name="suggestionCount">Number of returned suggestions</param>
      <param name="suggestions">List of suggestions</param>
      <param name="suggestionType">Type of suggestins (Warning or Error)</param>
      <param name="spaceCorrectionState">State of space correction</param>
      <returns>True if the current word is correct, Flase if current word is incorrect</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.CheckSpelling(System.String,System.String,System.String,System.Int32,System.String[]@,SCICT.NLP.TextProofing.SpellChecker.SuggestionType@,SCICT.NLP.TextProofing.SpellChecker.SpaceCorrectionState@)">
      <summary>
             Check and correct spelling
            </summary>
      <param name="word">Current word</param>
      <param name="preWord">Previous word in context</param>
      <param name="nxtWord">Next word in context</param>
      <param name="suggestionCount">Number of returned suggestions</param>
      <param name="suggestions">List of suggestions</param>
      <param name="suggestionType">Type of suggestins (Warning or Error)</param>
      <param name="spaceCorrectionState">State of space correction</param>
      <returns>True if the current word is correct, Flase if current word is incorrect</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.AddToDictionary(System.String,System.String)">
      <summary>
             Add a correct word to dictionary
             </summary>
      <param name="userSelectedWord">Form of word which user select to add to dictionary</param>
      <param name="originalWord">Original word without lemmatization</param>
      <returns>True if word is successfully added, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.AddToDictionary(System.String,System.String,System.String)">
      <summary>
             Add a correct word to dictionary
             </summary>
      <param name="userSelectedWord">Form of word which user select to add to dictionary</param>
      <param name="originalWord">Original word without lemmatization</param>
      <param name="fileName">File Name</param>
      <returns>True if word is successfully added, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.ContainWord(System.String)">
      <summary>
            check if the word is correct or exist in Ignore List
            </summary>
      <param name="word">Input word</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.CheckSpellingWithSpacingConsideration(System.String,System.String,System.String,SCICT.NLP.TextProofing.SpellChecker.SpaceCorrectionState@)">
      <summary>
            correct wrong insert/delete of white space between words
            </summary>
      <param name="word">Input word</param>
      <param name="preWord">Previous word</param>
      <param name="nxtWord">Next word</param>
      <param name="spaceCorrectionState">return the spacing correction state</param>
      <returns>
            word with corrected spacing
            </returns>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.CheckSpellingWithAffixConsideration(System.String,System.Int32)">
      <summary>
            If the word contain the persian affix, this method check or try to correct its spelling without affix 
            </summary>
      <param name="word">Input word</param>
      <param name="suggestionCount">Number of returned suggestions</param>
      <returns>
            if word don't have affix return an array with one string with lenght 0
            if word without its affix being correct, return word
            if word without its affix being incorrect, correct the word without affix and return the corrected word with corresponding affix
            </returns>
    </member>
    <member name="P:SCICT.NLP.TextProofing.SpellChecker.PersianSpellChecker.RankingDetail">
      <summary>
             Return suggestion ranking detail
            </summary>
    </member>
    <member name="T:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerConfig">
      <summary>
             configuration Class of Spell Checker
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerConfig.StemPath">
      <summary>
             The absolute path of stem's file.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerConfig.DicPath">
      <summary>
             The absolute path of dictionary file.
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerConfig.EditDistance">
      <summary>
             Indicates the Maximum Edit Distance that searched for finding suggestions
            </summary>
    </member>
    <member name="F:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerConfig.SuggestionCount">
      <summary>
             Number of Suggestions
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerConfig.#ctor">
      <summary>
             Constructor Class
            </summary>
    </member>
    <member name="M:SCICT.NLP.TextProofing.SpellChecker.SpellCheckerConfig.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
             Constructor Class
            </summary>
      <param name="dicPath">Absolute path of dictionary file</param>
      <param name="editDist">Maximum Edit Distance that searched for finding suggestions</param>
      <param name="sugCnt">Number of Suggestions</param>
    </member>
    <member name="T:SCICT.NLP.Utility.LanguageModel.POSTaggedDictionaryExtractor">
      <summary>
             Extract a POS tagged dictionary from a text corpus
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.LanguageModel.POSTaggedDictionaryExtractor.AddTerm(System.String)">
      <summary>
             Add a term
            </summary>
      <param name="term">Term</param>
    </member>
    <member name="M:SCICT.NLP.Utility.LanguageModel.POSTaggedDictionaryExtractor.ExtractPOSTaggedDictionary(System.String)">
      <summary>
             Extract POS tagged dictionary to a file
            </summary>
      <param name="fileName">File name</param>
      <returns>Tru on success</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.LanguageModel.POSTaggedDictionaryExtractor.AddPlainText(System.String)">
      <summary>
             Add a text corpus
            </summary>
      <param name="text">Text string</param>
    </member>
    <member name="M:SCICT.NLP.Utility.LanguageModel.POSTaggedDictionaryExtractor.AppendExternalPOSTaggedDictionary(System.String)">
      <summary>
             Append exteranl POS tagged dictionary
            </summary>
      <param name="fileName">File name</param>
    </member>
    <member name="M:SCICT.NLP.Utility.LanguageModel.POSTaggedDictionaryExtractor.AddToDictionary(System.String,System.String)">
      <summary>
             Add a correct word to dictionary
             </summary>
      <param name="userSelectedWord">Form of word which user select to add to dictionary</param>
      <param name="originalWord">Original word without lemmatization</param>
      <returns>True if word is successfully added, otherwise False</returns>
    </member>
    <member name="P:SCICT.NLP.Utility.LanguageModel.POSTaggedDictionaryExtractor.ProgressPercent">
      <summary>
            Gets the percentage of progress.
            </summary>
      <value>The progress percent.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo">
      <summary>
            Defines mapping information for a character. These information are used in conversion phase. 
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.EmptyChar">
      <summary>
            Empty character which is used by the classes of this namespace.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.EmptyString">
      <summary>
            Empty string which is used by the classes of this namespace.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="relativeIndex">The relative index of this instance. Instances with high value of <see cref="!:relativeIndex" /> 
            has less priority in generation phase.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.#ctor(System.String,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="relativeIndex">The relative index of this instance. Instances with high value of <see cref="!:relativeIndex" /> 
            has less priority in generation phase.</param>
      <param name="name">The name of this instance.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.#ctor(System.String,System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="postfix">The postfix character, if any. 
            For example: 'h' is a possible postfix for 's' character in Persian transliteration.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.#ctor(System.String,System.Char,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="postfix">The postfix character, if any. 
            For example: 'h' is a possible postfix for 's' character in Persian transliteration.</param>
      <param name="name">The name of this instance.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.#ctor(System.String,SCICT.NLP.Utility.PinglishConverter.TokenPosition,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="position">The position.</param>
      <param name="relativeIndex">The relative index of this instance. Instances with high value of <see cref="!:relativeIndex" /> 
            has less priority in generation phase.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.#ctor(System.String,SCICT.NLP.Utility.PinglishConverter.TokenPosition,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="position">The position.</param>
      <param name="relativeIndex">The relative index of this instance. Instances with high value of <see cref="!:relativeIndex" /> 
            has less priority in generation phase.</param>
      <param name="name">The name of this instance.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.#ctor(System.String,System.Char,SCICT.NLP.Utility.PinglishConverter.TokenPosition,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="postfix">The postfix character, if any. 
            For example: 'h' is a possible postfix for 's' character in Persian transliteration.</param>
      <param name="position">The position.</param>
      <param name="relativeIndex">The relative index of this instance. Instances with high value of <see cref="!:relativeIndex" /> 
            has less priority in generation phase.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.#ctor(System.String,System.Char,SCICT.NLP.Utility.PinglishConverter.TokenPosition,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="postfix">The postfix character, if any. 
            For example: 'h' is a possible postfix for 's' character in Persian transliteration.</param>
      <param name="position">The position.</param>
      <param name="relativeIndex">The relative index of this instance. Instances with high value of <see cref="!:relativeIndex" /> 
            has less priority in generation phase.</param>
      <param name="name">The name.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.Value">
      <summary>
            Gets or sets The character which this instance holds its mapping information.
            </summary>
      <value>The character which this instance holds its mapping information.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.Postfix">
      <summary>
            Gets or sets the postfix.
            </summary>
      <value>The postfix character, if any.
            For example: 'h' is a possible postfix for 's' character in Persian transliteration.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.Position">
      <summary>
            Gets or sets the position.
            </summary>
      <value>The position.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.RelativeIndex">
      <summary>
            Gets or sets the relative index of this instance.
            </summary>
      <value>The relative index of this instance. Instances with high value of <see cref="P:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.RelativeIndex" /> 
            has less priority in generation phase.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo.Name">
      <summary>
            Gets or sets the name of this instance.
            </summary>
      <value>The name.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.PinglishConverter.PinglishMapping">
      <summary>
            Instance of this class will learns the mappings from sample dataset.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishMapping.SuggestWords(System.String,System.Boolean)">
      <summary>
      </summary>
      <param name="pinglishWord">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishMapping.Union(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
      <summary>
      </summary>
      <remarks>Affects the first parameter</remarks>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishMapping.Union(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.Dictionary{System.String,System.Int32})">
      <summary>
      </summary>
      <remarks>Affects the first parameter</remarks>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.PinglishConverter.TokenPosition">
      <summary>
            Represents the position of a character in a word
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.PinglishConverter.Extensions">
      <summary>
            Useful Extension methods
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.Extensions.Update(System.Collections.Generic.List{SCICT.NLP.Utility.PinglishConverter.PinglishString},System.Char,System.Collections.Generic.List{System.String})">
      <summary>
      </summary>
      <param name="list">
      </param>
      <param name="englishLetter">
      </param>
      <param name="persianLetters">Must be sorted based on their weights</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.Extensions.RemoveDuplicates(System.Collections.Generic.List{SCICT.NLP.Utility.PinglishConverter.PinglishString})">
      <summary>
            Remove duplicate elements within the given list.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.Extensions.Compare(System.Char,System.Char,System.Boolean)">
      <summary>
            Compares the specified characters.
            </summary>
      <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.PinglishConverter.PinglishConverter">
      <summary>
            Base class for Pinglish conversion. Provides methods to generate or convert possible words for a 
            given Pinglish string.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.MultipleValueCharMap">
      <summary>
      </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.#ctor">
      <summary>
            Initializes the <see cref="T:SCICT.NLP.Utility.PinglishConverter.PinglishConverter" /> class.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.LoadConverter(System.String)">
      <summary>
            Loads the converter engine from the given file.
            </summary>
      <param name="fileName">Name of the file.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.SaveConverter(System.String)">
      <summary>
            Saves the converter engine to the given file.
            </summary>
      <param name="fileName">Name of the file.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.LoadPreprocessElements(System.String)">
      <summary>
            Loads the preprocess elements from the file
            </summary>
      <param name="filePath">The file path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.SetSpellerEngine(SCICT.NLP.TextProofing.SpellChecker.SpellCheckerEngine)">
      <summary>
            Sets the speller engine.
            </summary>
      <param name="spellerEngine">The speller engine.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.SuggestFarsiWordWithMapping(System.String)">
      <summary>
            Returns the equivalent Farsi words, based on the previously learned data.
            </summary>
      <param name="pinglishWord">The Pinglish word.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.SuggestFarsiWordsWithMapping(System.String)">
      <summary>
            Suggests Farsi words for the given Pinglish word, based on the learned dataset.
            </summary>
      <param name="pinglishWord">The Pinglish word.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.SuggestFarsiWord(System.String,System.Boolean)">
      <summary>
            Suggests Farsi word for the given Pinglish word, based on the learned dataset.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.SuggestFarsiWords(System.String,System.Boolean)">
      <summary>
            Suggests Farsi words for the given Pinglish word, based on the learned dataset.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.GenerateAllPossibleWords(System.String)">
      <summary>
            Generates all possible words. 
            Note that this method may return hundreds of words if the given Pinglish word contains many letters that have
            more that one mapping.
            A preprocess phase is applied to normalize characters in the word.
            </summary>
      <param name="pinglishWord">The Pinglish word.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.PreprocessWord(System.String)">
      <summary>
            Applies preprocess rules to the given word.
            </summary>
      <param name="pinglishWord">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.IsSpellerEngineSet">
      <summary>
            Gets a value indicating whether the speller engine is set for this instance.
            </summary>
      <value>
        <c>true</c> if the speller engine is set for this instance; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.PinglishConverter.Dataset">
      <summary>
            Gets the dataset.
            </summary>
      <value>The dataset.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.PinglishConverter.PinglishStringNormalizationOptions">
      <summary>
            Represents options in PinglishString normalization.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.PinglishConverter.PinglishStringNormalizationOptions.None">
      <summary>
            Use the default settings
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.PinglishConverter.PinglishStringNormalizationOptions.LowercaseEnglishLetters">
      <summary>
            Lowercase English letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.PinglishConverter.PinglishStringNormalizationOptions.NoErabPersianLetters">
      <summary>
            No Erab in Persian letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.PinglishConverter.PinglishStringNormalizationOptions.NoDuplicatesEntries">
      <summary>
            No duplicate entries
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.PinglishConverter.PinglishStringNormalizationOptions.SortBasedOnEnglishLetters">
      <summary>
            Sort entries
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.PinglishConverter.PinglishConverterUtils">
      <summary>
            Generic methods used by other classes of this library.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.PinglishConverter.PinglishConverterUtils.PreprocessElementInfoSeparators">
      <summary>
            Each row of a preprocess file has more that 1 column, each column is separated by these characters.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverterUtils.MergePinglishStringLists(System.Collections.Generic.List{SCICT.NLP.Utility.PinglishConverter.PinglishString},System.Collections.Generic.List{SCICT.NLP.Utility.PinglishConverter.PinglishString},SCICT.NLP.Utility.PinglishConverter.PinglishStringNormalizationOptions)">
      <summary>
            Merges the two PinglishString lists. 
            <returns>A reference to the merged list.</returns></summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverterUtils.LoadPinglishStrings(System.String)">
      <summary>
            Loads a serialized list of PinglishString from a file.
            Note: May throws Exception
            </summary>
      <param name="filePath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverterUtils.SavePinglishStrings(System.Collections.Generic.List{SCICT.NLP.Utility.PinglishConverter.PinglishString},System.String)">
      <summary>
            Serialize a list of PinglishString into the given file.
            </summary>
      <returns>True if the operation was successful, and false otherwise.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishConverterUtils.LoadPreprocessElements(System.String)">
      <summary>
            Loads Pinglish preprocess elements from a file.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.PinglishConverter.PinglishString">
      <summary>
            Represents a Pinglish word, and its corresponding Persian word
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishString.Append(System.String,System.Char)">
      <summary>
            Appends the specified letters to this instance.
            </summary>
      <param name="persianLetter">The Persian letter.</param>
      <param name="englishLetter">The English letter.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.PinglishString.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.PinglishString.PersianLetters">
      <summary>
      </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.PinglishString.EnglishLetters">
      <summary>
      </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.PinglishString.PersianString">
      <summary>
            Gets the Persian string.
            </summary>
      <value>The Persian string.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.PinglishString.EnglishString">
      <summary>
            Gets the english string.
            </summary>
      <value>The english string.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.PinglishString.Length">
      <summary>
            Gets the length.
            </summary>
      <value>The length.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.PinglishString.Item(System.Int32)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <returns>
            Returns a KeyValuePair: 
            Key is the English character, and Value is its Persian equivalent.
            </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.PinglishConverter.PinglishStringEqualityComparer">
      <summary>
      </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.PinglishConverter.CharacterMapping">
      <summary>
            Holds all possible mapping information for a letter.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.CharacterMapping.#ctor(System.Char,SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo[])">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.PinglishConverter.CharacterMapping" /> class.
            </summary>
      <param name="letter">The letter which this instance will hold its mappings.</param>
      <param name="values">Mapping values for the given letter.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.CharacterMapping.#ctor(System.Char,System.Boolean,System.Collections.Generic.IEnumerable{SCICT.NLP.Utility.PinglishConverter.CharacterMappingInfo})">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.PinglishConverter.CharacterMapping" /> class.
            </summary>
      <param name="letter">The letter which this instance will hold its mappings.</param>
      <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
      <param name="values">Mapping values for the given letter.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.CharacterMapping.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.CharacterMapping.Letter">
      <summary>
            Gets the letter which this instance holds its mapping information.
            </summary>
      <value>The letter.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.CharacterMapping.IsCaseSensitive">
      <summary>
            Gets a value indicating whether this instance is case sensitive.
            </summary>
      <value>
        <c>true</c> if this instance is case sensitive; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.CharacterMapping.Values">
      <summary>
            Gets the corresponding mapping information of the <see cref="P:SCICT.NLP.Utility.PinglishConverter.CharacterMapping.Letter" /></summary>
      <value>The values.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.PinglishConverter.PreprocessElementInfo">
      <summary>
      </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.PinglishConverter.SingleValueCharMappings">
      <summary>
            One-to-one corresponding letters in transliteration.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.PinglishConverter.SingleValueCharMappings.s_singleValueCharMap">
      <summary>
            A dictionary contains all single value mappings
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PinglishConverter.SingleValueCharMappings.TryGetValue(System.Char)">
      <summary>
            Retrieves a mapping Persian letter for the given English character.
            </summary>
      <param name="ch">
      </param>
      <returns>The mapping letter, if it contains an entry for the give character;
            otherwise <value>null</value></returns>
    </member>
    <member name="P:SCICT.NLP.Utility.PinglishConverter.SingleValueCharMappings.SingleValueCharacters">
      <summary>
      </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.StringDistance.KeyboardLanguages">
      <summary>
             Define Language of Current Keyboard Layout
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.KeyboardLanguages.Persian">
      <summary>
             Used as Persian Standard Keyboad Layout 
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.KeyboardLanguages.English">
      <summary>
             Used as English Standard Keyboad Layout
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.StringDistance.KeyboardConfig">
      <summary>
             Keyboard Layout Data Structure
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.KeyboardConfig.FirstRowCharacters">
      <summary>
             In a keyboard layout with 3 rows, it indicates the first row.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.KeyboardConfig.SecondRowCharacters">
      <summary>
             In a keyboard layout with 3 rows, it indicates the second row.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.KeyboardConfig.ThirdRowCharacters">
      <summary>
             In a keyboard layout with 3 rows, it indicates the third row.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.KeyboardConfig.KeyboardLanguage">
      <summary>
             Keyboard Language
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.KeyboardConfig.OtherCharacters">
      <summary>
             Other charachters that does not fit in 3 rowed structure layout like charachters which must typed with Shift 
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardConfig.#ctor">
      <summary>
            If the language has not been specified, Persian will use as default. 
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardConfig.#ctor(SCICT.NLP.Utility.StringDistance.KeyboardLanguages)">
      <summary>
             Class Constructor
            </summary>
      <param name="language">Keyboard Labguage</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardConfig.LoadPersianDefault">
      <summary>
            this function loads Persian default keyboard layout into this config object.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardConfig.LoadEnglishDefault">
      <summary>
            this function loads English default keyboard layout into this config object.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.StringDistance.KeyboardKey">
      <summary>
             Keboard Key (Letters) data structure in Cartesian Coordinate System
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.KeyboardKey.X">
      <summary>
             Indicates the x-axes position of a key (letter) in Cartesian Coordinate System
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.KeyboardKey.Y">
      <summary>
             Indicates the y-axes position of a key (letter) in Cartesian Coordinate System
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.KeyboardKey.UseShift">
      <summary>
             Indicates the needs of pressing Shift key to type corresponding key.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.KeyboardKey.Value">
      <summary>
             Indicates the Unicode value of the key in current keyboard layout
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKey.#ctor">
      <summary>
             Class Constructor
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKey.#ctor(System.Char)">
      <summary>
             Class Constructor
            </summary>
      <param name="ch">Unicode value of the key in current keyboard layout</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKey.#ctor(System.Single,System.Single)">
      <summary>
             Class constructor
            </summary>
      <param name="x">x-axes position of a key (letter) in Cartesian Coordinate System</param>
      <param name="y">y-axes position of a key (letter) in Cartesian Coordinate System</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKey.#ctor(System.Single,System.Single,System.Char)">
      <summary>
             Class Constructor
            </summary>
      <param name="x">x-axes position of a key (letter) in Cartesian Coordinate System</param>
      <param name="y">y-axes position of a key (letter) in Cartesian Coordinate System</param>
      <param name="ch">Unicode value of the key in current keyboard layout</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKey.#ctor(System.Single,System.Single,System.Char,System.Boolean)">
      <summary>
             Class Constructor
            </summary>
      <param name="x">x-axes position of a key (letter) in Cartesian Coordinate System</param>
      <param name="y">y-axes position of a key (letter) in Cartesian Coordinate System</param>
      <param name="ch">Unicode value of the key in current keyboard layout</param>
      <param name="useShift">Is pressing Shift key needed to type corresponding key.</param>
    </member>
    <member name="T:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance">
      <summary>
             Calculate Euclidean and Cosine Distance between two letters on given keyboard layout
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance.#ctor">
      <summary>
            default consturcor which also sets the language to Persian.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance.AddARow(System.Single,System.Single,System.String)">
      <summary>
            this function adds a row of m_keys to m_keys list. a row contains real characters on keyboard and can start from "Q", "A" and "Z".
            </summary>
      <param name="startX">for "Q" row it is 1.0, for "A" row it is "1.5" and for "Z" row it is 2.</param>
      <param name="y">for "Q" row it is 3.0, for "A" row it is "2" and for "Z" row it is 1.</param>
      <param name="values">list of letters in each row, e.g. for a English standard qwerty keyboard layout it could be "asdfghjkl;'" for second row</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance.SetMaximumDistance">
      <summary>
            this function computes maximum possible distance between m_keys in the defined keyboard.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance.SetMinimumDistance">
      <summary>
            this function computes minimum possible distance between m_keys in the defined keyboard.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance.Reconfig(SCICT.NLP.Utility.StringDistance.KeyboardConfig)">
      <summary>
            this function sets keyboadr language to Farsi and sets up Keys list.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance.CosineDistance(System.Char,System.Char)">
      <summary>
            this function calculates simple Cosine distance between two characters on keyboard.
            Note that this distance is not normalized!
            If any of these characters doesn't exist in current keyboard setting, then this function returns Maximum Distance value specified in current object.
            </summary>
      <param name="ch1">
      </param>
      <param name="ch2">
      </param>
      <returns>returns distance between two characters in keyboard.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance.NormalizedCosineDistance(System.Char,System.Char)">
      <summary>
            this function calculates simple Cosine distance between two characters on keyboard. 
            </summary>
      <param name="ch1">
      </param>
      <param name="ch2">
      </param>
      <returns>result is in range [0..1]. 0 means that two characters are near each other.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance.EuclideanDistance(System.Char,System.Char)">
      <summary>
            this function calculates simple euclidean distance between two characters on keyboard.
            Note that this distance is not normalized!
            If any of these characters doesn't exist in current keyboard setting, then this function returns Maximum Distance value specified in current object.
            </summary>
      <param name="ch1">
      </param>
      <param name="ch2">
      </param>
      <returns>returns distance between two characters in keyboard.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance.NormalizedEuclideanDistance(System.Char,System.Char)">
      <summary>
            this function calculates simple euclidean distance between two characters on keyboard. 
            </summary>
      <param name="ch1">
      </param>
      <param name="ch2">
      </param>
      <returns>result is in range [0..1]. 0 means that two characters are near each other.</returns>
    </member>
    <member name="P:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance.CurrentConfig">
      <summary>
             Keyboard layout
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance.MinimumNormalizedDistance">
      <summary>
             Minimum possible distance
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance.MaximumNormalizedDistance">
      <summary>
             Maximum possible distance
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.StringDistance.KashefiConfig">
      <summary>
             Kashefi String Distnace Metric Configuration Class
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KashefiConfig.#ctor(SCICT.NLP.Utility.StringDistance.KeyboardKeyDistance,System.Double,System.Double,System.Double,System.Double)">
      <summary>
             Class Constructor
            </summary>
      <param name="keyboardKeyDistance">Keboard Layout</param>
      <param name="kashefiInsertGapCost">Gap Cost of Mistakanly Insertaion of a letter</param>
      <param name="kashefiDeleteGapCost">Gap Cost of Mistakenly Omission of a letter</param>
      <param name="kashefiMaxSubstituteRange">Maximum Cost of Substitution of Two Letters</param>
      <param name="kashefiTransCost">Transposition Cost</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.KashefiConfig.#ctor">
      <summary>
             Class Constructor
             Set Default values
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.StringDistance.KashefiConfig.Keyboard">
      <summary>
             Define keyboard layout
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.StringDistance.KashefiConfig.InsertGapCost">
      <summary>
             Gap Cost of Mistakanly Insertaion of a letter
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.StringDistance.KashefiConfig.DeleteGapCost">
      <summary>
             Gap Cost of Mistakenly Omission of a letter
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.StringDistance.KashefiConfig.TranspositionGapCost">
      <summary>
             Gap Cost of Mistakenly Transposition of two adjacent letter
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.StringDistance.KashefiConfig.SubstituteGapCost">
      <summary>
             Maximum Cost of Substitution of Two Letters
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithms.Hamming(System.String,System.String)">
      <summary>
            The Hamming distance H is defined only for strings of the same length. 
            For two strings s and t, H(s, t) is the number of places in which the two string differ, i.e., have different characters.
            ref: http://www.cut-the-knot.org/do_you_know/Strings.shtml
            We also add difference of length of two strings to result.
            </summary>
      <param name="word1">First word</param>
      <param name="word2">Second word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithms.Cosine(System.String,System.String)">
      <summary>
            Cosine similarity is a common vector based similarity measure similar to dice coefficient. 
            Whereby the input string is transformed into vector space so that the Euclidean cosine rule can be used to determine similarity. 
            The cosine similarity is often paired with other approaches to limit the dimensionality of the problem. 
            For instance with simple strings at list of stopwords are used to exclude from the dimensionality of the comparison.
            ref: http://www.dcs.shef.ac.uk/~sam/stringmetrics.html#cosine
            </summary>
      <param name="word1">First word</param>
      <param name="word2">Second word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithms.Levenstein(System.String,System.String)">
      <summary>
            The Levenshtein distance between two strings is given by the minimum number of operations needed to transform one string into the other, 
            where an operation is an insertion, deletion, or substitution of a single character.
            ref: http://en.wikipedia.org/wiki/Levenshtein_distance
            </summary>
      <param name="word1">First word</param>
      <param name="word2">Second word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithms.DamerauLevenstein(System.String,System.String)">
      <summary>
            The Levenshtein distance between two strings is given by the minimum number of operations needed to transform one string into the other, 
            where an operation is an insertion, deletion, or substitution of a single character.
            ref: http://en.wikipedia.org/wiki/Levenshtein_distance
            </summary>
      <param name="word1">First word</param>
      <param name="word2">Second word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithms.WagnerFischer(System.String,System.String)">
      <summary>
            The Wagner-Fischer distance between two strings is given by the minimum number of operations needed to transform one string into the other, 
            where an operation is an insertion, deletion, or substitution of a single character.
            </summary>
      <param name="word1">First word</param>
      <param name="word2">Second word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithms.GNULevenstein(System.String,System.String)">
      <summary>
            The Levenshtein distance between two strings is given by the minimum number of operations needed to transform one string into the other, 
            where an operation is an insertion, deletion, or substitution of a single character.
            ref: http://en.wikipedia.org/wiki/Levenshtein_distance
            </summary>
      <param name="word1">First word</param>
      <param name="word2">Second word</param>
      <returns>Not normalized result obtain here</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithms.JaroWinckler(System.String,System.String)">
      <summary>
            The Jaro distance metric takes into account typical spelling deviations, this work comes from the following paper.
            Jaro, M. A. 1989 "Advances in record linking methodology as applied to the 1985 census of Tampa Florida". Journal of the American Statistical Society 64:1183-1210 
            Briefly, for two strings s and t, let s' be the characters in s that are “common with” t, and let t' be the charcaters in t that are "common with" s; 
            roughly speaking, a character a in s is “in common” with t if the same character a appears in about the place in t.
            Note that Jaro result is Normalized. 1 means maximum similarity, 0 means maximum difference.
            ref:  http://en.wikipedia.org/wiki/Jaro-Winkler_distance
            </summary>
      <param name="word1">First word</param>
      <param name="word2">Second word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithms.GetCommonCharactersForJaroMethod(System.String,System.String,System.Int32)">
      <summary>
            compute number of common characters and transpositions:
            </summary>
      <param name="s1">first string</param>
      <param name="s2">second string</param>
      <param name="windowLen">windows length</param>
      <returns>common characters string</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithms.NeedlemanWunch(System.String,System.String,SCICT.NLP.Utility.StringDistance.NeedlemanConfig)">
      <summary>
            TThis approach is known by various names, Needleman-Wunch, Needleman-Wunch-Sellers, Sellers and the Improving Sellers algorithm. 
            This is similar to the basic edit distance metric, Levenshtein distance, this adds an variable cost adjustment to the cost of a gap, i.e. insert/deletion, in the distance metric. 
            So the Levenshtein distance can simply be seen as the Needleman-Wunch distance with G=1.
            Where G = “gap cost” and SubstitutionCost is again an arbitrary distance function on characters (e.g. related to typographic frequencies, amino acid substitutibility, etc). 
            ref:  http://www.dcs.shef.ac.uk/~sam/stringmetrics.html#needleman
            </summary>
      <param name="word1">First word</param>
      <param name="word2">Second word</param>
      <param name="needlemanConfig">NeedlemanConfig</param>
      <returns> Normalized similarity between [0..1]. 0 means minimum similarity and 1 means maxumim smilarity</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithms.KashefiMeasure(System.String,System.String,SCICT.NLP.Utility.StringDistance.KashefiConfig)">
      <summary>
            This is a New Perisan String Distance Metric Based on Needleman and Levenstein Similarity Metric.
            </summary>
      <param name="word1">First word</param>
      <param name="word2">Second word</param>
      <param name="kashefiConfig">KashefiConfig</param>
      <returns> Normalized similarity between [0..1]. 0 means minimum similarity and 1 means maxumim smilarity</returns>
    </member>
    <member name="T:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm">
      <summary>
             Indicates String Distance Algorithm
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm.Hamming">
      <summary>
             Hamming Distnace Algorithm
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm.Levenestain">
      <summary>
             Levenestain Distnace Algorithm
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm.JaroWinkler">
      <summary>
             JaroWinkler Distnace Algorithm
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm.DamerauLevenestain">
      <summary>
             Damerau-Levenestain Distnace Algorithm
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm.WagnerFischer">
      <summary>
             Wagner-Fischer Distnace Algorithm
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm.Needleman">
      <summary>
             Needleman Distnace Algorithm
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm.GNULevenesain">
      <summary>
             GNULevenesain Distnace Algorithm
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm.Cosine">
      <summary>
             Cosine Distnace Algorithm
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm.Kashefi">
      <summary>
             Kashefi Distnace Algorithm
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.StringDistance.StringDistanceLayout">
      <summary>
             String Distance Class
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceLayout.GetStringDistance(System.String,System.String,SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm)">
      <summary>
             Get String Distance
            </summary>
      <param name="word1">First Word</param>
      <param name="word2">Second Word</param>
      <param name="algorithm">String Distance Algorithm</param>
      <returns>String Distance</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceLayout.GetStringDistance(System.String,System.String,SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm,SCICT.NLP.Utility.StringDistance.KashefiConfig)">
      <summary>
             Get String Distance
            </summary>
      <param name="word1">First Word</param>
      <param name="word2">Second Word</param>
      <param name="algorithm">String Distance Algorithm</param>
      <param name="kashefiConfig">Configuration of Kashefi's String Distance Method</param>
      <returns>String Distance</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceLayout.GetWordSimilarity(System.String,System.String,SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm)">
      <summary>
             Get Similarity Score
            </summary>
      <param name="word1">First Word</param>
      <param name="word2">Second Word</param>
      <param name="algorithm">String Distance Algorithm</param>
      <returns>Similarity Score</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringDistance.StringDistanceLayout.GetWordSimilarity(System.String,System.String,SCICT.NLP.Utility.StringDistance.StringDistanceAlgorithm,SCICT.NLP.Utility.StringDistance.KashefiConfig)">
      <summary>
             Get Similarity Score
            </summary>
      <param name="word1">First Word</param>
      <param name="word2">Second Word</param>
      <param name="algorithm">String Distance Algorithm</param>
      <param name="kashefiConfig">Configuration of Kashefi's String Distance Method</param>
      <returns>Similarity Score</returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Transliteration.KNN.CharacterMapping">
      <summary>
            Holds all possible mapping information for a letter.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.CharacterMapping.#ctor(System.Char,SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo[])">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Transliteration.KNN.CharacterMapping" /> class.
            </summary>
      <param name="letter">The letter which this instance will hold its mappings.</param>
      <param name="values">Mapping values for the given letter.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.CharacterMapping.#ctor(System.Char,System.Boolean,SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo[])">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Transliteration.KNN.CharacterMapping" /> class.
            </summary>
      <param name="letter">The letter which this instance will hold its mappings.</param>
      <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
      <param name="values">Mapping values for the given letter.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.CharacterMapping.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.CharacterMapping.Letter">
      <summary>
            Gets the letter which this instance holds its mapping information.
            </summary>
      <value>The letter.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.CharacterMapping.IsCaseSensitive">
      <summary>
            Gets a value indicating whether this instance is case sensitive.
            </summary>
      <value>
        <c>true</c> if this instance is case sensitive; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.CharacterMapping.Values">
      <summary>
            Gets the corresponding mapping information of the <see cref="P:SCICT.NLP.Utility.Transliteration.KNN.CharacterMapping.Letter" /></summary>
      <value>The values.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo">
      <summary>
            Defines mapping information for a character. These information are used in conversion phase. 
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.EmptyChar">
      <summary>
            Empty character which is used by the classes of this namespace.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.EmptyString">
      <summary>
            Empty string which is used by the classes of this namespace.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="relativeIndex">The relative index of this instance. Instances with high value of <see cref="!:relativeIndex" /> 
            has less priority in generation phase.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.#ctor(System.String,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="relativeIndex">The relative index of this instance. Instances with high value of <see cref="!:relativeIndex" /> 
            has less priority in generation phase.</param>
      <param name="name">The name of this instance.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.#ctor(System.String,System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="postfix">The postfix character, if any. 
            For example: 'h' is a possible postfix for 's' character in Persian transliteration.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.#ctor(System.String,System.Char,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="postfix">The postfix character, if any. 
            For example: 'h' is a possible postfix for 's' character in Persian transliteration.</param>
      <param name="name">The name of this instance.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.#ctor(System.String,SCICT.NLP.Utility.Transliteration.KNN.TokenPosition,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="position">The position.</param>
      <param name="relativeIndex">The relative index of this instance. Instances with high value of <see cref="!:relativeIndex" /> 
            has less priority in generation phase.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.#ctor(System.String,SCICT.NLP.Utility.Transliteration.KNN.TokenPosition,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="position">The position.</param>
      <param name="relativeIndex">The relative index of this instance. Instances with high value of <see cref="!:relativeIndex" /> 
            has less priority in generation phase.</param>
      <param name="name">The name of this instance.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.#ctor(System.String,System.Char,SCICT.NLP.Utility.Transliteration.KNN.TokenPosition,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="postfix">The postfix character, if any. 
            For example: 'h' is a possible postfix for 's' character in Persian transliteration.</param>
      <param name="position">The position.</param>
      <param name="relativeIndex">The relative index of this instance. Instances with high value of <see cref="!:relativeIndex" /> 
            has less priority in generation phase.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.#ctor(System.String,System.Char,SCICT.NLP.Utility.Transliteration.KNN.TokenPosition,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo" /> class.
            </summary>
      <param name="value">The character which this instance holds its mapping information.</param>
      <param name="postfix">The postfix character, if any. 
            For example: 'h' is a possible postfix for 's' character in Persian transliteration.</param>
      <param name="position">The position.</param>
      <param name="relativeIndex">The relative index of this instance. Instances with high value of <see cref="!:relativeIndex" /> 
            has less priority in generation phase.</param>
      <param name="name">The name.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.Value">
      <summary>
            Gets or sets The character which this instance holds its mapping information.
            </summary>
      <value>The character which this instance holds its mapping information.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.Postfix">
      <summary>
            Gets or sets the postfix.
            </summary>
      <value>The postfix character, if any.
            For example: 'h' is a possible postfix for 's' character in Persian transliteration.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.Position">
      <summary>
            Gets or sets the position.
            </summary>
      <value>The position.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.RelativeIndex">
      <summary>
            Gets or sets the relative index of this instance.
            </summary>
      <value>The relative index of this instance. Instances with high value of <see cref="P:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.RelativeIndex" /> 
            has less priority in generation phase.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.CharacterMappingInfo.Name">
      <summary>
            Gets or sets the name of this instance.
            </summary>
      <value>The name.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.Transliteration.KNN.Extensions">
      <summary>
            Useful Extension methods
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.Extensions.Update(System.Collections.Generic.List{SCICT.NLP.Utility.Transliteration.KNN.PinglishString},System.Char,System.Collections.Generic.List{System.String})">
      <summary>
      </summary>
      <param name="list">
      </param>
      <param name="englishLetter">
      </param>
      <param name="persianLetters">Must be sorted based on their weights</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.Extensions.RemoveDuplicates(System.Collections.Generic.List{SCICT.NLP.Utility.Transliteration.KNN.PinglishString})">
      <summary>
            Remove duplicate elements within the given list.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.Extensions.Compare(System.Char,System.Char,System.Boolean)">
      <summary>
            Compares the specified characters.
            </summary>
      <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Transliteration.KNN.TokenPosition">
      <summary>
            Represents the position of a character in a word
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Transliteration.KNN.PinglishStringNormalizationOptions">
      <summary>
            Represents options in PinglishString normalization.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Transliteration.KNN.PinglishStringNormalizationOptions.None">
      <summary>
            Use the default settings
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Transliteration.KNN.PinglishStringNormalizationOptions.LowercaseEnglishLetters">
      <summary>
            Lowercase English letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Transliteration.KNN.PinglishStringNormalizationOptions.NoErabPersianLetters">
      <summary>
            No Erab in Persian letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Transliteration.KNN.PinglishStringNormalizationOptions.NoDuplicatesEntries">
      <summary>
            No duplicate entries
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Transliteration.KNN.PinglishStringNormalizationOptions.SortBasedOnEnglishLetters">
      <summary>
            Sort entries
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Transliteration.KNN.PinglishConverterUtils">
      <summary>
            Generic methods used by other classes of this library.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Transliteration.KNN.PinglishConverterUtils.PreprocessElementInfoSeparators">
      <summary>
            Each row of a preprocess file has more that 1 column, each column is separated by these characters.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.PinglishConverterUtils.MergePinglishStringLists(System.Collections.Generic.List{SCICT.NLP.Utility.Transliteration.KNN.PinglishString},System.Collections.Generic.List{SCICT.NLP.Utility.Transliteration.KNN.PinglishString},SCICT.NLP.Utility.Transliteration.KNN.PinglishStringNormalizationOptions)">
      <summary>
            Merges the two PinglishString lists. 
            <returns>A reference to the merged list.</returns></summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.PinglishConverterUtils.LoadPinglishStrings(System.String)">
      <summary>
            Loads a serialized list of PinglishString from a file.
            Note: May throws Exception
            </summary>
      <param name="filePath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.PinglishConverterUtils.SavePinglishStrings(System.Collections.Generic.List{SCICT.NLP.Utility.Transliteration.KNN.PinglishString},System.String)">
      <summary>
            Serialize a list of PinglishString into the given file.
            </summary>
      <returns>True if the operation was successful, and false otherwise.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.PinglishConverterUtils.LoadPreprocessElements(System.String)">
      <summary>
            Loads Pinglish preprocess elements from a file.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Transliteration.KNN.PinglishMapping">
      <summary>
            Instance of this class will learns the mappings from sample dataset.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.PinglishMapping.SuggestWords(SCICT.NLP.Utility.Transliteration.ResultWord,System.Boolean,System.Boolean)">
      <summary>
      </summary>
      <param name="pinglishWord">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.PinglishMapping.Union(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
      <summary>
      </summary>
      <remarks>Affects the first parameter</remarks>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.PinglishMapping.Union(System.Collections.Generic.Dictionary{System.String,System.Double},System.Collections.Generic.Dictionary{System.String,System.Double})">
      <summary>
      </summary>
      <remarks>Affects the first parameter</remarks>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Transliteration.KNN.PinglishString">
      <summary>
            Represents a Pinglish word, and its corresponding Persian word
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.PinglishString.Append(System.String,System.Char)">
      <summary>
            Appends the specified letters to this instance.
            </summary>
      <param name="persianLetter">The Persian letter.</param>
      <param name="englishLetter">The English letter.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.PinglishString.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.PinglishString.PersianLetters">
      <summary>
      </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.PinglishString.EnglishLetters">
      <summary>
      </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.PinglishString.PersianString">
      <summary>
            Gets the Persian string.
            </summary>
      <value>The Persian string.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.PinglishString.EnglishString">
      <summary>
            Gets the english string.
            </summary>
      <value>The english string.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.PinglishString.Length">
      <summary>
            Gets the length.
            </summary>
      <value>The length.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.PinglishString.Item(System.Int32)">
      <summary>
      </summary>
      <param name="index">
      </param>
      <returns>
            Returns a KeyValuePair: 
            Key is the English character, and Value is its Persian equivalent.
            </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Transliteration.KNN.PinglishStringEqualityComparer">
      <summary>
      </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Transliteration.KNN.PreprocessElementInfo">
      <summary>
      </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Transliteration.KNN.SingleValueCharMappings">
      <summary>
            One-to-one corresponding letters in transliteration.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Transliteration.KNN.SingleValueCharMappings.s_singleValueCharMap">
      <summary>
            A dictionary contains all single value mappings
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.KNN.SingleValueCharMappings.TryGetValue(System.Char)">
      <summary>
            Retrieves a mapping Persian letter for the given English character.
            </summary>
      <param name="ch">
      </param>
      <returns>The mapping letter, if it contains an entry for the give character;
            otherwise <value>null</value></returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.KNN.SingleValueCharMappings.SingleValueCharacters">
      <summary>
      </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2">
      <summary>
            Priority queue based on binary heap,
            Elements with minimum priority dequeued first
            </summary>
      <typeparam name="TPriority">Type of priorities</typeparam>
      <typeparam name="TValue">Type of values</typeparam>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.#ctor">
      <summary>
            Initializes a new instance of priority queue with default initial capacity and default priority comparer
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of priority queue with specified initial capacity and default priority comparer
            </summary>
      <param name="capacity">initial capacity</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>
            Initializes a new instance of priority queue with specified initial capacity and specified priority comparer
            </summary>
      <param name="capacity">initial capacity</param>
      <param name="comparer">priority comparer</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
            Initializes a new instance of priority queue with default initial capacity and specified priority comparer
            </summary>
      <param name="comparer">priority comparer</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>
            Initializes a new instance of priority queue with specified data and default priority comparer
            </summary>
      <param name="data">data to be inserted into priority queue</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IComparer{`0})">
      <summary>
            Initializes a new instance of priority queue with specified data and specified priority comparer
            </summary>
      <param name="data">data to be inserted into priority queue</param>
      <param name="comparer">priority comparer</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.MergeQueues(SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue{`0,`1},SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue{`0,`1})">
      <summary>
            Merges two priority queues
            </summary>
      <param name="pq1">first priority queue</param>
      <param name="pq2">second priority queue</param>
      <returns>resultant priority queue</returns>
      <remarks>
            source priority queues must have equal comparers,
            otherwise <see cref="T:System.InvalidOperationException" /> will be thrown
            </remarks>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.MergeQueues(SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue{`0,`1},SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>
            Merges two priority queues and sets specified comparer for resultant priority queue
            </summary>
      <param name="pq1">first priority queue</param>
      <param name="pq2">second priority queue</param>
      <param name="comparer">comparer for resultant priority queue</param>
      <returns>resultant priority queue</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.Enqueue(`0,`1)">
      <summary>
            Enqueues element into priority queue
            </summary>
      <param name="priority">element priority</param>
      <param name="value">element value</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.Dequeue">
      <summary>
            Dequeues element with minimum priority and return its priority and value as <see cref="T:System.Collections.Generic.KeyValuePair`2" /></summary>
      <returns>priority and value of the dequeued element</returns>
      <remarks>
            Method throws <see cref="T:System.InvalidOperationException" /> if priority queue is empty
            </remarks>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.DequeueValue">
      <summary>
            Dequeues element with minimum priority and return its value
            </summary>
      <returns>value of the dequeued element</returns>
      <remarks>
            Method throws <see cref="T:System.InvalidOperationException" /> if priority queue is empty
            </remarks>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.Peek">
      <summary>
            Returns priority and value of the element with minimun priority, without removing it from the queue
            </summary>
      <returns>priority and value of the element with minimum priority</returns>
      <remarks>
            Method throws <see cref="T:System.InvalidOperationException" /> if priority queue is empty
            </remarks>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.PeekValue">
      <summary>
            Returns value of the element with minimun priority, without removing it from the queue
            </summary>
      <returns>value of the element with minimum priority</returns>
      <remarks>
            Method throws <see cref="T:System.InvalidOperationException" /> if priority queue is empty
            </remarks>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
            Enqueus element into priority queue
            </summary>
      <param name="item">element to add</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.Clear">
      <summary>
            Clears the collection
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
            Determines whether the priority queue contains a specific element
            </summary>
      <param name="item">The object to locate in the priority queue</param>
      <returns>
        <c>true</c> if item is found in the priority queue; otherwise, <c>false.</c></returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
            Copies the elements of the priority queue to an Array, starting at a particular Array index. 
            </summary>
      <param name="array">The one-dimensional Array that is the destination of the elements copied from the priority queue. The Array must have zero-based indexing. </param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <remarks>
            It is not guaranteed that items will be copied in the sorted order.
            </remarks>
    </member>
    <member name="M:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>Enumerator</returns>
      <remarks>
            Returned enumerator does not iterate elements in sorted order.</remarks>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.IsEmpty">
      <summary>
            Gets whether priority queue is empty
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.Count">
      <summary>
            Gets number of elements in the priority queue
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.Transliteration.PrioritySelection.PriorityQueue`2.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only. 
            </summary>
      <remarks>
            For priority queue this property returns <c>false</c>.
            </remarks>
    </member>
    <member name="T:SCICT.NLP.Utility.WordContainer.Node">
      <summary>
             Simple character node
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.Node.#ctor(System.Char)">
      <summary>
             Class Constructor
            </summary>
      <param name="letter">character value</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.Node.#ctor(System.Char,System.Boolean)">
      <summary>
             Class Constructor
            </summary>
      <param name="letter">character value</param>
      <param name="isEndLetter">Current letter is the final letter of corresponding word?</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.Node.ContainLetter(System.Char)">
      <summary>
             Search for having a child
            </summary>
      <param name="c">child's Unicode value</param>
      <returns>True if contain child, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.Node.HaveLinks">
      <summary>
             Check if current node have any child
            </summary>
      <returns>True if having any child, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.Node.RemoveLink(SCICT.NLP.Utility.WordContainer.Node)">
      <summary>
             Remove a child node
            </summary>
      <param name="node">Child node</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.Node.RemoveLink(System.Char)">
      <summary>
             Remove a child by value
            </summary>
      <param name="c">Child's Unicode value</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.Node.LogicalRemove">
      <summary>
             Logically remove current word (if current node is final letter of a word)
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.Node.Clear">
      <summary>
             Remove current word and all the words that start with this word (if current node is final letter of a word)
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.Node.AddLink(SCICT.NLP.Utility.WordContainer.Node)">
      <summary>
             Add a child node
            </summary>
      <param name="node">Child node</param>
      <returns>Node pointer to added child node</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.Node.GetNextNode(System.Char)">
      <summary>
             Get a pointer to a child node by child value
            </summary>
      <param name="letter">Child's Unicode value</param>
      <returns>Node pointer to child node</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.Node.GetLinks">
      <summary>
             Get all child nodes
            </summary>
      <returns>Child nodes</returns>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.Node.Value">
      <summary>
             Unicode value of current node
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.Node.LinkCount">
      <summary>
             Number of childs
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.Node.IsEndOfWord">
      <summary>
             Check if current node is final letter of a word
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.WordContainer.NodeWithFreq">
      <summary>
             Node structure which can store words' usage frequency
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreq.#ctor(System.Char,System.Boolean,System.Int32)">
      <summary>
             Class Constructor
            </summary>
      <param name="letter">character value</param>
      <param name="isEndLetter">Current letter is the final letter of corresponding word?</param>
      <param name="count">Usage frequency of word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreq.ContainLetter(System.Char)">
      <summary>
             Search for having a child
            </summary>
      <param name="c">child's unicode value</param>
      <returns>True if contain child, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreq.HaveLinks">
      <summary>
             Check if current node have any child
            </summary>
      <returns>True if having any child, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreq.AddLink(SCICT.NLP.Utility.WordContainer.NodeWithFreq)">
      <summary>
             Add a child node
            </summary>
      <param name="node">Child node</param>
      <returns>Node pointer to added child node</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreq.GetNextNode(System.Char)">
      <summary>
             Get a pointer to a child node by child value
            </summary>
      <param name="letter">Child's unicode value</param>
      <returns>Node pointer to child node</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreq.GetLinks">
      <summary>
             Get all child nodes
            </summary>
      <returns>Child nodes</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreq.RemoveLink(SCICT.NLP.Utility.WordContainer.NodeWithFreq)">
      <summary>
             Remove a child node
            </summary>
      <param name="node">Child node</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreq.LogicalRemove">
      <summary>
             Logically remove current word (if current node is final letter of a word)
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreq.Clear">
      <summary>
             Remove current word and all the words that start with this word (if current node is final letter of a word)
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.NodeWithFreq.Value">
      <summary>
             Unicode value of current node
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.NodeWithFreq.LinkCount">
      <summary>
             Number of childs
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.NodeWithFreq.IsEndOfWord">
      <summary>
             Check if current node is final letter of a word
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.NodeWithFreq.WordFrequency">
      <summary>
             Usage frequency of word (if current node is final letter of word)
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS">
      <summary>
             Node structure which can store words' usage frequency and POS tag
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.#ctor(System.Char,System.Boolean,System.Int32,System.String)">
      <summary>
             Class Constructor
            </summary>
      <param name="letter">character value</param>
      <param name="isEndLetter">Current letter is the final letter of corresponding word?</param>
      <param name="count">Usage frequency of word</param>
      <param name="pos">POS tag</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.ContainLetter(System.Char)">
      <summary>
             Search for having a child
            </summary>
      <param name="c">child's Unicode value</param>
      <returns>True if contain child, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.HaveLinks">
      <summary>
             Check if current node have any child
            </summary>
      <returns>True if having any child, otherwise False</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.AddLink(SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS)">
      <summary>
             Add a child node
            </summary>
      <param name="node">Child node</param>
      <returns>Node pointer to added child node</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.GetNextNode(System.Char)">
      <summary>
             Get a pointer to a child node by child value
            </summary>
      <param name="letter">Child's unicode value</param>
      <returns>Node pointer to child node</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.GetLinks">
      <summary>
             Get all child nodes
            </summary>
      <returns>Child nodes</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.RemoveLink(SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS)">
      <summary>
             Remove a child node
            </summary>
      <param name="node">Child node</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.LogicalRemove">
      <summary>
             Logically remove current word (if current node is final letter of a word)
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.Clear">
      <summary>
             Remove current word and all the words that start with this word (if current node is final letter of a word)
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.Value">
      <summary>
             Unicode value of current node
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.LinkCount">
      <summary>
             Number of childs
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.IsEndOfWord">
      <summary>
             Check if current node is final letter of a word
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.WordFrequency">
      <summary>
             Usage frequency of word (if current node is final letter of word)
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS.POSTag">
      <summary>
             POS tag of of word (if current node is final letter of word)
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.WordContainer.TreeTraveralType">
      <summary>
             Tree Traversal Method
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.WordContainer.TreeTraveralType.DFS">
      <summary>
             Depth First Search
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.WordContainer.TreeTraveralType.BFS">
      <summary>
             Breadth First Search
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.WordContainer.WordContainerTreeConfig">
      <summary>
             Word container tree data structure's configuration
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.WordContainer.WordContainerTreeConfig.DictionaryFileName">
      <summary>
             The absolute path of dictionary
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.WordContainer.WordContainerTreeConfig.SuggestionCount">
      <summary>
            Number of returned words, 0 for all
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.WordContainer.WordContainerTree">
      <summary>
             A data structure for efficient management of words, This structure is a character level tree.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.#ctor">
      <summary>
             Class constructor
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.#ctor(SCICT.NLP.Utility.WordContainer.WordContainerTreeConfig)">
      <summary>
             Class Constructor
            </summary>
      <param name="wordContainerConfig">Configuration</param>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.Clear(SCICT.NLP.Utility.WordContainer.Node)">
      <summary>
            Teaverse Tree on Depth First Type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.DoDFSTraverse(SCICT.NLP.Utility.WordContainer.Node)">
      <summary>
            Teaverse Tree on Depth First Type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.DoBFSTraverse(SCICT.NLP.Utility.WordContainer.Node)">
      <summary>
            Teaverse Tree on Breath First Type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.GenerateNode(System.Char,System.Boolean)">
      <summary>
            Utility Function, Generate Node from Letter
            </summary>
      <param name="c">Letter</param>
      <param name="isEndLetter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.Contain(System.String)">
      <summary>
            Check if a word exists
            </summary>
      <param name="word">Word</param>
      <returns>If the dictionary contains the word, returns true, else returns false.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.AddWord(System.String)">
      <summary>
            Add a word to tree
            </summary>
      <param name="word">Word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.AddWordBlind(System.String)">
      <summary>
            Add a word to tree
            </summary>
      <param name="word">Word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.RemoveWord(System.String)">
      <summary>
            Remove word from Dictinary
            </summary>
      <param name="word">Word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.AppendDictionary(System.String)">
      <summary>
             Append a new dictionary
            </summary>
      <param name="fileName">Absolute path of dictionary</param>
      <returns>True if successfully added</returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.Clear">
      <summary>
             Clear all words
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.ReverseString(System.String)">
      <summary>
            Utility Function, Reverse a word
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordContainerTree.TraverseTree(SCICT.NLP.Utility.WordContainer.TreeTraveralType)">
      <summary>
            Traverse tree to retrieve all words
            </summary>
      <param name="traversType">Traversal Type</param>
      <returns>All Words</returns>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.WordContainerTree.DictionaryWordsCount">
      <summary>
             Number of existing words
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree">
      <summary>
             A data structure for efficient management of words, This structure is a character level tree.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.#ctor">
      <summary>
             Class Constructor
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.#ctor(SCICT.NLP.Utility.WordContainer.WordContainerTreeConfig)">
      <summary>
             Class Constructor
            </summary>
      <param name="wordContainerConfig">Configuration</param>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.DoDFSTraverse(SCICT.NLP.Utility.WordContainer.NodeWithFreq)">
      <summary>
            Teaverse Tree on Depth First Type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.DoBFSTraverse(SCICT.NLP.Utility.WordContainer.NodeWithFreq)">
      <summary>
            Teaverse Tree on Breath First Type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.GenerateNode(System.Char,System.Int32,System.Boolean)">
      <summary>
            Utility Function, Generate Node from Letter
            </summary>
      <param name="c">Letter</param>
      <param name="freq">Usage frequency</param>
      <param name="isEndLetter">end of word</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.Contain(System.String)">
      <summary>
            Check if a word exists
            </summary>
      <param name="word">Word</param>
      <returns>If the dictionary contains the word, returns true, else returns false.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.Contain(System.String,System.Int32@)">
      <summary>
            Check if a word exists
            </summary>
      <param name="word">Word</param>
      <param name="freq">Word's usage frequency</param>
      <returns>If the dictionary contains the word, returns true, else returns false.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.AddWord(System.String,System.Int32)">
      <summary>
            Add a word to tree
            </summary>
      <param name="word">Word</param>
      <param name="freq">Word's usage frequency</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.AddWordBlind(System.String,System.Int32)">
      <summary>
            Add a word to tree
            </summary>
      <param name="word">Word</param>
      <param name="freq">Word's usage frequency</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.RemoveWord(System.String)">
      <summary>
            Remove a word from dictionary
            </summary>
      <param name="word">Word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.AppendDictionary(System.String)">
      <summary>
             Append a new dictionary
            </summary>
      <param name="fileName">Absolute path of dictionary</param>
      <returns>True if successfully added</returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.WordFrequency(System.String)">
      <summary>
            Word frequency
            </summary>
      <param name="word">word</param>
      <returns>usage frequency</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.Clear">
      <summary>
             Clear all words
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.TraverseTree(SCICT.NLP.Utility.WordContainer.TreeTraveralType)">
      <summary>
            Traverse Tree to Retrieve All Words
            </summary>
      <param name="traversType">Traversal Type</param>
      <returns>All Words</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.ReverseString(System.String)">
      <summary>
            Utility Function, Reverse a word
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.FreqSummation">
      <summary>
             Total frequency
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.TotalNumberofWords">
      <summary>
             Total Number of Words
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.WordFreqContainerTree.DictionaryWordsCount">
      <summary>
             Number of existing words
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree">
      <summary>
             A data structure for efficient management of words, This structure is a character level tree.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.#ctor">
      <summary>
             Class Constructor
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.#ctor(SCICT.NLP.Utility.WordContainer.WordContainerTreeConfig)">
      <summary>
             Class Constructor
            </summary>
      <param name="wordContainerConfig">Configuration</param>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.DoDFSTraverse(SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS)">
      <summary>
            Teaverse Tree on Depth First Type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.DoBFSTraverse(SCICT.NLP.Utility.WordContainer.NodeWithFreqandPOS)">
      <summary>
            Teaverse Tree on Breath First Type
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.GenerateNode(System.Char,System.Int32,System.Boolean,System.String)">
      <summary>
            Utility Function, Generate Node from Letter
            </summary>
      <param name="c">Letter</param>
      <param name="freq">Usage frequency</param>
      <param name="isEndLetter">end of word</param>
      <param name="pos">POS tag of word</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.Contain(System.String)">
      <summary>
            Check if a word exists
            </summary>
      <param name="word">Word</param>
      <returns>If the dictionary contains the word, returns true, else returns false.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.Contain(System.String,System.Int32@)">
      <summary>
            Check if a word exists
            </summary>
      <param name="word">Word</param>
      <param name="freq">Word's usage frequency</param>
      <returns>If the dictionary contains the word, returns true, else returns false.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.Contain(System.String,SCICT.NLP.Persian.Constants.PersianPOSTag@)">
      <summary>
            Check if a word exists
            </summary>
      <param name="word">Word</param>
      <param name="posTag">Word's POS tag</param>
      <returns>If the dictionary contains the word, returns true, else returns false.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.Contain(System.String,System.Int32@,SCICT.NLP.Persian.Constants.PersianPOSTag@)">
      <summary>
            Check if a word exists
            </summary>
      <param name="word">Word</param>
      <param name="freq">Word's usage frequency</param>
      <param name="posTag">Word's POS tag</param>
      <returns>If the dictionary contains the word, returns true, else returns false.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.AddWord(System.String,System.Int32,SCICT.NLP.Persian.Constants.PersianPOSTag)">
      <summary>
            Add a word to tree
            </summary>
      <param name="word">Word</param>
      <param name="freq">Word's usage frequency</param>
      <param name="posTag">Word's pos</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.AddWordBlind(System.String,System.Int32,SCICT.NLP.Persian.Constants.PersianPOSTag)">
      <summary>
            Add a word to tree
            </summary>
      <param name="word">Word</param>
      <param name="freq">Word's usage frequency</param>
      <param name="posTag">Word's pos</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.AddWord(System.String,System.Int32,SCICT.NLP.Persian.Constants.PersianPOSTag,System.String)">
      <summary>
            Add a word to tree
            </summary>
      <param name="word">Word</param>
      <param name="freq">Word's usage frequency</param>
      <param name="posTag">Word's pos</param>
      <param name="fileName">File name</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.RemoveWord(System.String)">
      <summary>
            Remove word from Dictinary
            </summary>
      <param name="word">Word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.AppendDictionary(System.String)">
      <summary>
             Append a new dictionary
            </summary>
      <param name="fileName">Absolute path of dictionary</param>
      <returns>True if successfully added</returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.WordFrequency(System.String)">
      <summary>
            Word frequency
            </summary>
      <param name="word">word</param>
      <returns>usage frequency</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.WordPOS(System.String)">
      <summary>
            Word pos
            </summary>
      <param name="word">word</param>
      <returns>POS tag</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.Clear">
      <summary>
             Clear all words
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.TraverseTree(SCICT.NLP.Utility.WordContainer.TreeTraveralType)">
      <summary>
            Traverse Tree to Retrieve All Words
            </summary>
      <param name="traversType">Traversal Type</param>
      <returns>All Words</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.ReverseString(System.String)">
      <summary>
            Utility Function, Reverse a word
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.FreqSummation">
      <summary>
             Total frequency
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.WordContainer.WordFreqPOSContainerTree.DictionaryWordsCount">
      <summary>
             Number of existing words
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.WordContainer.AutoCompleteWordContainerTree">
      <summary>
             A data structure for efficient management of words with auto complete feature, This structure is a character level tree.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.AutoCompleteWordContainerTree.#ctor(SCICT.NLP.Utility.WordContainer.WordContainerTreeConfig)">
      <summary>
             Class Constructor
            </summary>
      <param name="wordContainerConfig">Configuration</param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.AutoCompleteWordContainerTree.Complete(System.String)">
      <summary>
             Complete the rest of incomplete word
            </summary>
      <param name="subWord">Incomplete word</param>
      <returns>Completed words start with incomplete word</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.AutoCompleteWordContainerTree.Complete(System.String,System.Int32)">
      <summary>
             Complete the rest of incomplete word
            </summary>
      <param name="subWord">Incomplete word</param>
      <param name="count">Number of returned suggestions</param>
      <returns>Completed words start with incomplete word</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.AutoCompleteWordContainerTree.CompleteWithPseudoSpase(System.String)">
      <summary>
             Complete the rest of incomplete word considering PseudoSpase after current part
            </summary>
      <param name="subWord">Incomplete word</param>
      <returns>Completed words start with incomplete word</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.AutoCompleteWordContainerTree.GetAllWords">
      <summary>
            Retrive all existing words
            </summary>
      <returns>All words</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordContainer.AutoCompleteWordContainerTree.SaveDictionaryToFile(System.String)">
      <summary>
             Save Loaded Dictionaryt to File
            </summary>
      <param name="fileName">File name</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.WordGenerator.RespellingGenerationType">
      <summary>
             Indicates the methodes of generating respelling suggestions by insering or omitting a letter, substitution of a letter with other letters and transposing two adjacent letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.WordGenerator.RespellingGenerationType.Transpose">
      <summary>
             Transposition of two adjacent letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.WordGenerator.RespellingGenerationType.Insert">
      <summary>
             insertion of one letter
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.WordGenerator.RespellingGenerationType.Delete">
      <summary>
             Omission of one letter
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.WordGenerator.RespellingGenerationType.Substitute">
      <summary>
             Substitution of two letters
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.WordGenerator.WordGenerator">
      <summary>
             Word Generator Class, This class generates respelling suggestions in given edit distance for a word
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.WordGenerator.WordGenerator.GenerateRespelling(System.String,System.Int32)">
      <summary>
             Generates respelling suggestions in given edit distance for a word
            </summary>
      <param name="word">Word</param>
      <param name="editDistance">Edit Distance</param>
      <returns>Respelling Suggestions</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordGenerator.WordGenerator.GenerateRespelling(System.String,System.Int32,SCICT.NLP.Utility.WordGenerator.RespellingGenerationType)">
      <summary>
             Generates respelling suggestions in given edit distance for a word
            </summary>
      <param name="word">Word</param>
      <param name="editDistance">Edit Distance</param>
      <param name="respellingType">Type of generating respelling, logically OR desired types</param>
      <returns>Respelling Suggestions</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordGenerator.WordGenerator.GenerateRespelling(System.String,System.Int32,SCICT.NLP.Utility.WordGenerator.RespellingGenerationType,System.Char[])">
      <summary>
             Generates respelling suggestions in given edit distance for a word
            </summary>
      <param name="word">Word</param>
      <param name="editDistance">Edit Distance</param>
      <param name="respellingType">Type of generating respelling, logically OR desired types</param>
      <param name="alphabet">List of charachters used to generate respelling</param>
      <returns>Respelling Suggestions</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.WordGenerator.WordGenerator.SetAccuracy(System.Double)">
      <summary>
            Accuracy of generating homophone words, It can be a number between 0 to 1 which 0 means minimum accuracy but fastest and 1 means maximum accuracy but slowest
            </summary>
      <param name="p">
      </param>
    </member>
    <member name="M:SCICT.NLP.Utility.WordGenerator.WordGenerator.GenerateHomophoneWords(System.String)">
      <summary>
             Generate homophone words of given word, homophone words are those that can pronounce the same
            </summary>
      <param name="word">Word</param>
      <returns>Homophone Words</returns>
    </member>
    <member name="T:SCICT.NLP.Persian.Constants.PartOfSpeech">
      <summary>
            Persian EAGLE Compatible POS Tag Representer
            </summary>
    </member>
    <member name="T:SCICT.NLP.Persian.Constants.POSAnnotation">
      <summary>
             Set of annotations used for defining a part fo speech
            </summary>
    </member>
    <member name="M:SCICT.NLP.Persian.Constants.POSAnnotation.ToString(System.Enum)">
      <summary>
            Converts a annotation into standard string.
            </summary>
      <param name="annotation">The annotation (defined in this class) to be converted</param>
      <returns>Equivalant string of annotation</returns>
    </member>
    <member name="M:SCICT.NLP.Persian.Constants.POSAnnotation.Parse(System.String)">
      <summary>
      </summary>
      <param name="annotation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.FilterResultsWithStats">
      <summary>
            Contains the result of persian char filters applied and the statistics of the changes made
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.FilterResultsWithStats.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.FilterResultsWithStats" /> class.
            </summary>
      <param name="result">The result.</param>
      <param name="numLetters">number of letters.</param>
      <param name="numDigits">number of digits.</param>
      <param name="numErabs">number of erabs.</param>
      <param name="numHalfSpaces">number of half-space characters.</param>
    </member>
    <member name="P:SCICT.NLP.Utility.FilterResultsWithStats.Result">
      <summary>
            Gets or sets the result of filtering
            </summary>
      <value>The result of filtering.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.FilterResultsWithStats.NumLetters">
      <summary>
            Gets or sets the number of letters affected
            </summary>
      <value>The number of letters affected.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.FilterResultsWithStats.NumDigits">
      <summary>
            Gets or sets the number of digits affected
            </summary>
      <value>The number of digits affected.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.FilterResultsWithStats.NumErabs">
      <summary>
            Gets or sets the number of erabs affected
            </summary>
      <value>The number of erabs affected.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.FilterResultsWithStats.NumHalfSpaces">
      <summary>
            Gets or sets the number of half-spaces affected
            </summary>
      <value>The number of half-spaces affected.</value>
    </member>
    <member name="T:SCICT.NLP.Persian.Constants.PseudoSpace">
      <summary>
            Holds PseudoSpace related constants
            TODO: Complete this class based on unicode spaces, specified here:
            http://www.cs.tut.fi/~jkorpela/chars/spaces.html
            http://www.alanwood.net/unicode/general_punctuation.html
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PseudoSpace.ZWNJ">
      <summary>
            The main standard PseudoSpace (Zero Width Non-Joiner)
            Value: U+200C
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PseudoSpace.ZWS">
      <summary>
            alternative PseudoSpace (Zero Width Space)
            Value: U+200B
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PseudoSpace.ZWJ">
      <summary>
            alternative PseudoSpace (Zero Width Joiner)
            Value: U+200D
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PseudoSpace.MSWPS">
      <summary>
            alternative PseudoSpace used by Microsoft Word (Ctrl + -)
            Value: U+00AC
            </summary>
    </member>
    <member name="T:SCICT.NLP.Persian.Constants.HeYe">
      <summary>
            Holds He-ye related constants
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.HeYe.ArabicHamzaAbove">
      <summary>
            A single hamza letter which is going to be used as the standard short-from Ye.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.HeYe.ArabicHeWithYeAbove">
      <summary>
            A single character containing both He and Ye in a single glyph.
            This is a non-standard character in Persian contexts.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.HeYe.ArabicHeGoalWithYeAbove">
      <summary>
            A single character containing both He and Ye in a single glyph. 
            This is a non-standard character in Persian contexts.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.HeYe.ArabicHamzah">
      <summary>
            Arabic Hamzah, which is sometimes used as Yeh following Pseudo-space and Heh
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.HeYe.He">
      <summary>
            Standard character He
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.HeYe.StandardLongHeYe">
      <summary>
            Standard form of writing long HeYe (i.e., ه‌ی)
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.HeYe.StandardShortHeYe">
      <summary>
            Standard form of writing short HeYe (i.e., هٔ)
            </summary>
    </member>
    <member name="M:SCICT.NLP.Persian.Constants.HeYe.IsTwoWordsFormingLongHeYe(System.String,System.String)">
      <summary>
            Determines whether the specified word sequence is forming a long HeYe.
            </summary>
      <param name="word0">first word</param>
      <param name="word1">second word</param>
      <returns>
        <c>true</c> if the specified word sequence is forming a long HeYe; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Persian.Constants.HeYe.Load">
      <summary>
            Loads this instance.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Persian.Constants.PersianAlphabets">
      <summary>
            Holds constants related to the persian language
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.Tashdid">
      <summary>
            The standard tashdid character.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.Delimiters">
      <summary>
            Persian Delimiters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.Numbers">
      <summary>
             Numbers
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsStickerInAllCondition">
      <summary>
             Consonant sticker letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsStickerConditional">
      <summary>
             Conditional Consonant sticker letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsNonStickerInAllCondition">
      <summary>
             Consonant non-sticker letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsNonStickerConditional">
      <summary>
             Conditional Consonant non-sticker letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsStickerInAllCondition">
      <summary>
             Vowel sticker letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsStickerConditional">
      <summary>
             Vowel sticker letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsNonStickerInAllCondition">
      <summary>
             Vowel non-sticker letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsNonStickerConditional">
      <summary>
             Vowel non-sticker letters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.Diacritics">
      <summary>
             Pseudo letters like Shaddah and Fathatan
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.Erabs">
      <summary>
            Erabs
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.NonStickerChars">
      <summary>
            Persian Characters which are always seperate, and cannot stick to a next char
            </summary>
    </member>
    <member name="M:SCICT.NLP.Persian.Constants.PersianAlphabets.Load">
      <summary>
            Loads this instance.
            </summary>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.Alphabets">
      <summary>
            Persian Alphabets
            </summary>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.AlphabetWithPseudoSpace">
      <summary>
             Persian Alphabets with Pseudo-space (ZWNJ)
            </summary>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.Consonants">
      <summary>
             Consonant letters
            </summary>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsInAllConditions">
      <summary>
             Consonant letters
            </summary>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsConditional">
      <summary>
             Consonant letters
            </summary>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsStickers">
      <summary>
             Consonant letters
            </summary>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsNonStickers">
      <summary>
             Consonant letters
            </summary>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.Vowels">
      <summary>
             Vowel letters
            </summary>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsInAllCondition">
      <summary>
             Vowel letters
            </summary>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsConditional">
      <summary>
             Vowel letters
            </summary>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsStickers">
      <summary>
             Vowel letters
            </summary>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsNonStickers">
      <summary>
             Vowel letters
            </summary>
    </member>
    <member name="T:SCICT.NLP.Persian.Constants.PersianHomophoneLetters">
      <summary>
             Homophone letters in Persian, homophone words are those that can pronounce the same
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.ZainFamily">
      <summary>
             Zain homophone family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.SeenFamily">
      <summary>
             Seen homophone family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.TehFamily">
      <summary>
             Teh homophone family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.GhainFamily">
      <summary>
             Ghain homophone family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.HahFamily">
      <summary>
             Hah homophone family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.AlefFamily">
      <summary>
             Alef homophone family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.HamzaFamily1">
      <summary>
             Hamza homophone family 1
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.HamzaFamily2">
      <summary>
             Hamza homophone family 2
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.YaFamily">
      <summary>
             Ya homophone family
            </summary>
    </member>
    <member name="M:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.AreHomophone(System.Char,System.Char)">
      <summary>
             Check if two letters are homophone
            </summary>
      <param name="c1">c1</param>
      <param name="c2">c2</param>
      <returns>True if c1 and c2 are homophone</returns>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.AllHomophones">
      <summary>
             Get all homophone letters
            </summary>
    </member>
    <member name="T:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters">
      <summary>
             Homoshape letters in Persian, homophone words are those that can pronounce the same
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.AlefFamily">
      <summary>
             Alef homoshape family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.BeFamily">
      <summary>
             Be homoshape family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.TehFamily">
      <summary>
             Teh homoshape family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.HahFamily">
      <summary>
             Hah homoshape family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.XahFamily">
      <summary>
             Xah homoshape family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.DalFamily">
      <summary>
             Dal homoshape family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.ZehFamily">
      <summary>
             Zeh homoshape family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.ZainFamily">
      <summary>
             Zain homoshape family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.ZathFamily">
      <summary>
             Zath homoshape family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.GhainFamily">
      <summary>
             Ghain homoshape family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.KafFamily">
      <summary>
             Kaf homoshape family
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.GhafFamily">
      <summary>
             Ghaf homoshape family
            </summary>
    </member>
    <member name="M:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.AreHomoshape(System.Char,System.Char)">
      <summary>
             Check if two letters are homoshape
            </summary>
      <param name="c1">c1</param>
      <param name="c2">c2</param>
      <returns>True if c1 and c2 are homoshape</returns>
    </member>
    <member name="P:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.AllHomoshapes">
      <summary>
             Get all homophone letters
            </summary>
    </member>
    <member name="T:SCICT.NLP.Persian.Constants.StandardCharacters">
      <summary>
            Holds constants about Persian standard character codes
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardKaaf">
      <summary>
            The Standard Kaaf letter code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardYaa">
      <summary>
            The Standard Yaa letter code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit0">
      <summary>
            The Standard Digit 0 code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit1">
      <summary>
            The Standard Digit 1 code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit2">
      <summary>
            The Standard Digit 2 code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit3">
      <summary>
            The Standard Digit 3 code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit4">
      <summary>
            The Standard Digit 4 code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit5">
      <summary>
            The Standard Digit 5 code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit6">
      <summary>
            The Standard Digit 6 code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit7">
      <summary>
            The Standard Digit 7 code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit8">
      <summary>
            The Standard Digit 8 code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit9">
      <summary>
            The Standard Digit 9 code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardHalfSpace">
      <summary>
            The Standard Half Space code in Persian keyboard: 0x200C
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardTashdid">
      <summary>
            The Standard Tashdid letter code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardFathatan">
      <summary>
            The Standard Fathatan letter code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardFatha">
      <summary>
            The Standard Fatha letter code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardZamma">
      <summary>
            The Standard Zamma letter code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardSaaken">
      <summary>
            The Standard Saaken letter code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardZammatan">
      <summary>
            The Standard Zammatan letter code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardKasra">
      <summary>
            The Standard Kasra letter code in Persian keyboard
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardKasratan">
      <summary>
            The Standard Kasratan letter code in Persian keyboard
            </summary>
    </member>
    <member name="M:SCICT.NLP.Persian.Constants.StandardCharacters.Load">
      <summary>
            Loads this instance.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Persian.Constants.WordSpecialCharacters">
      <summary>
            Character codes which are used by Microsoft Word for special purposes
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FormulaDelimiterCode">
      <summary>
            Code for the character used to delimit formulas in Word 2003.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FootnoteDelimiterCode">
      <summary>
            Code for the character used to delimit footnotes.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FormulaDelimiter">
      <summary>
            Character used to delimit formulas in Word 2003
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FormulaDelimiterReplacementString">
      <summary>
            Replacement String in Persian for the formula special character
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FormulaDelimiterReplacementRTF">
      <summary>
            Replacement RTF-String in Persian for the formula special character
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FootnoteDelimiter">
      <summary>
            Character used to delimit footnotes
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FootnoteDelimiterReplacementString">
      <summary>
            Replacement String in Persian for the footnote special character
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FootnoteDelimiterReplacementRTF">
      <summary>
            Replacement RTF-String in Persian for the footnote special character
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.SpecialCharsArray">
      <summary>
            An array of special characters used by Microsoft Word for special purposes.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Persian.Constants.QuotationMark">
      <summary>
             Quotation Marks
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.QuotationMark.SingleQuotationMark">
      <summary>
            ASCII representation of single quotation mark
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.QuotationMark.RightSingleQuotationMark">
      <summary>
             Right quotation mark as seen in printed content
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.QuotationMark.SingleLow9QuotationMark">
      <summary>
             Right quotation mark as seen in printed content
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.QuotationMark.SingleHighReveresed9QuotationMark">
      <summary>
             Single Low-9 Quotation Mark
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.QuotationMark.Prime">
      <summary>
             Character which is used to show 'prime' in mathematical context.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Persian.Constants.PersianPOSTag">
      <summary>
             Persian Part-of-Speech (POS) tags
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.ADV">
      <summary>
             Adverb
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.AJ">
      <summary>
             Adjective
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.CL">
      <summary>
             Measurment Units
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.CONJ">
      <summary>
             Conjunction
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.DET">
      <summary>
             Determiner
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.INT">
      <summary>
             Interjection 
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.N">
      <summary>
             Noun
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.NUM">
      <summary>
             Numbers
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.P">
      <summary>
             Preposition
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.POSTP">
      <summary>
             Postposition 
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.PRO">
      <summary>
             Pronoun
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.PUNC">
      <summary>
             Punctuation
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.RES">
      <summary>
             Rests, Not recognized
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.V">
      <summary>
             Verb
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.UserPOS">
      <summary>
             User aadded words, not yet tagged
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.VowelEnding">
      <summary>
             Ends with a vowel
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.ConsonantalEnding">
      <summary>
             Ends with a consonant
            </summary>
    </member>
    <member name="T:SCICT.NLP.Persian.Constants.PersianCombinationSpacingState">
      <summary>
             The state of combination spacing of two Persian words
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianCombinationSpacingState.PseudoSpace">
      <summary>
             Combine with Pseudo-space
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianCombinationSpacingState.WhiteSpace">
      <summary>
             Combine seprately by a white space
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.Constants.PersianCombinationSpacingState.Continous">
      <summary>
             Combine with no space and make a word
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Calendar.CalendarStringUtils">
      <summary>
            Some string utility functions for creating date-strings.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetPresianJalaliMonthName(System.Int32)">
      <summary>
            Gets the name of the Nth Jalali month in Presian.
            </summary>
      <param name="n">The month number.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetPersianGregorianMonthName(System.Int32)">
      <summary>
            Gets the name of the Nth Gregorian month in Persian.
            </summary>
      <param name="n">The month number.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetPersianGhamariMonthName(System.Int32)">
      <summary>
            Gets the name of the Nth Ghamari month in Persian .
            </summary>
      <param name="n">The n.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetPersianWeekdayName(SCICT.NLP.Utility.Parsers.Weekdays)">
      <summary>
            Gets the name of the weekday in Persian.
            </summary>
      <param name="w">The weekday to get its name</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetWeekdayFromDayOfWeek(System.DayOfWeek)">
      <summary>
            Gets the <see cref="T:SCICT.NLP.Utility.Parsers.Weekdays" /> value for the <see cref="T:System.DayOfWeek" />.
            <see cref="T:System.DayOfWeek" /> is an enum defined in the System namespace of the .NET Framework.
            </summary>
      <param name="d">The day of the week.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetPersianDateString(System.DateTime)">
      <summary>
            Gets the persian date string from its Gregorian equivalant.
            The string is a descriptive statement in Persian Language.
            </summary>
      <param name="dt">The date-time instance for the Gregorian date.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetPersianDateString(SCICT.NLP.Utility.Parsers.DateCalendarType,SCICT.NLP.Utility.Parsers.Weekdays,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets a date description string from the specified values and calendar types.
            The string is a descriptive statement in Persian Language.
            </summary>
      <param name="t">The type of calendar.</param>
      <param name="w">The day of the week.</param>
      <param name="dayNumber">The day of the month.</param>
      <param name="monthNum">The month number.</param>
      <param name="yearNum">The year number.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx">
      <summary>
            Extension class for the Hijri Calendar, to make working with this calendar more handy
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Calendar.HijriCalendarEx.dt">
      <summary>
            The Gregorian date of the calendar.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Calendar.HijriCalendarEx.hc">
      <summary>
            The Hijri Calendar object of the Framework
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx" /> class.
            </summary>
      <param name="dt">The date-time to be converted in Gregorian calendar.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx" /> class.
            </summary>
      <param name="year">The year (in Hijri Ghamari).</param>
      <param name="month">The month (in Hijri Ghamari).</param>
      <param name="day">The day (in Hijri Ghamari).</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx" /> class.
            </summary>
      <param name="year">The year (in Hijri Ghamari).</param>
      <param name="month">The month (in Hijri Ghamari).</param>
      <param name="day">The day (in Hijri Ghamari).</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="secs">The seconds.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetYear">
      <summary>
            Gets the year in Hijri Ghamari calendar.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetMonth">
      <summary>
            Returns the month (in the Hijri Ghamari calendar)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetDayOfMonth">
      <summary>
            Gets the day of the month.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetDayOfWeek">
      <summary>
            Gets the day of week.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetHour">
      <summary>
            Gets the hour value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetMinute">
      <summary>
            Gets the minutes value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetSecond">
      <summary>
            Gets the second value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetMilliseconds">
      <summary>
            Gets the milliseconds value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetMonthsInYear(System.Int32)">
      <summary>
            Gets the number of months in the specified year in the current era.
            </summary>
      <param name="year">An integer that represents the year.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetDayOfYear">
      <summary>
            Gets the day of the year.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetLeapMonth(System.Int32)">
      <summary>
            Calculates the leap month for a specified year.
            </summary>
      <param name="year">The year.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetEra">
      <summary>
            Gets the era.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetDaysInYear(System.Int32)">
      <summary>
            Gets the number of days in th specified year of the current era.
            </summary>
      <param name="year">An integer representing year.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>
            Gets the number of days in specified year and month of the current era.
            </summary>
      <param name="year">An integer representing the year.</param>
      <param name="month">An integer representing the month.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            The format of the returned string is "yy/mm/dd".
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.ToString(System.String)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            If the format string provided equals "D" then a string describing the current date in Persian language is returned.
            Otherwise, the format of the returned string would be "yy/mm/dd".
            </summary>
      <param name="format">The format.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.TryParse(System.String,SCICT.NLP.Utility.Calendar.HijriCalendarEx@)">
      <summary>
            Converts the string representation of a Hijri Ghamari Date, to a <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx" /> Instance. A return 
            value indicates whether the operation succeeded. The string can contain a numberical representation of a date,
            or a literal date description in Persian language.
            </summary>
      <param name="str">The string to convert.</param>
      <param name="pcOut">If the conversion operation succeeds this will hold the result, 
            otherwise it will be set to null.</param>
      <returns>true if the operation succeeds, otherwise false.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.TryParseLiteralDate(System.String)">
      <summary>
            Converts the string representation of a Hijri Ghamari Date, to a <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx" /> Instance. A return 
            value indicates whether the operation succeeded. The string can contain a literal date description in Persian language.
            </summary>
      <param name="str">The string to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.TryParseNumericDate(System.String)">
      <summary>
            Converts the string representation of a Hijri Ghamari Date, to a <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx" /> Instance. A return 
            value indicates whether the operation succeeded. The string can contain a numberical representation of a date.
            </summary>
      <param name="str">The string to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Calendar.HijriCalendarEx.DateTime">
      <summary>
            Gets the date time object that holds the Gregorian representation of the current calendar object.
            </summary>
      <value>The date time.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Calendar.HijriCalendarEx.Now">
      <summary>
            Gets a <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx" /> instance that is set to the current date and time of the local machine.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.MathUtils">
      <summary>
            Some mathematical utility methods, and string utility methods related to mathematics
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.MathUtils.IsPowerOfTen(System.Int64)">
      <summary>
            Determines whether the specified number is power of ten.
            </summary>
      <param name="n">The number</param>
      <returns>
        <c>true</c> if the specified number is power of ten; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.MathUtils.DigitCount(System.Int64)">
      <summary>
            Gets the number of digits of the specified number.
            </summary>
      <param name="n">The number.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.MathUtils.RemoveTrailingZeros(System.String)">
      <summary>
            Removes the trailing zeros from the string representation of a number.
            Has some usage in dealing with the mantissa of numbers.
            </summary>
      <param name="p">The string representation of a number.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.MathUtils.NormalizeForF20Format(System.String)">
      <summary>
            Normalizes the string representation of a number that is converted to string with F20 format.
            It removes the trailing zeros, and if the mantissa consists all 
            of zeros the decimal point is also removed.
            </summary>
      <param name="p">The string representation of a number.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.MathUtils.InsertThousandSeperator(System.String)">
      <summary>
            Inserts english thousand seperator characters in proper positions inside the string containig a number.
            </summary>
      <param name="str">The string containing a number.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.MathUtils.CreateOrdinalNumber(System.String)">
      <summary>
            Creates the ordinal string from the main number string. e.g. "سه" --&gt; "سوم"
            </summary>
      <param name="word">The word.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Persian.ICharFilter">
      <summary>
            Interface to Character Filters that provide means to replace non-standard characters with
            their standard ones.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Persian.ICharFilter.FilterChar(System.Char)">
      <summary>
            Filters the char and returns the string for its filtered (i.e. standardized) equivalant.
            The string may contain 0, 1, or more characters.
            If the length of the string is 0, then the character should have been left out.
            If the length of the string is 1, then the character might be left intact or replaced with another character.
            If the length of the string is more than 1, then there have been no 1-character replacement for this character.
            It is replaced with 2 or more characters. e.g. some fonts have encoded Tashdid, and Tanvin in one character. 
            To make it standard this character is replaced with 2 characters, one for Tashdid, and the other for Tanvin.
            </summary>
      <param name="ch">The character to filter.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.NumberToPersianString">
      <summary>
            Provides the means to convert long integer and double numbers to a Persian descriptive string.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.NumberToPersianString.TryConvertNumberToPersianString(System.Int64,System.String@)">
      <summary>
            Tries to convert a long integer number to a descriptive string in Persian language. A return value indicates
            whether the operation succeeded or not.
            </summary>
      <param name="n">The number to convert.</param>
      <param name="str">The string that holds the result.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.NumberToPersianString.TryConvertNumberToPersianString(System.Double,System.String@)">
      <summary>
            Tries to convert a double number to a descriptive string in Persian language. A return value indicates
            whether the operation succeeded or not.
            </summary>
      <param name="d">The double number to convert.</param>
      <param name="str">The string that holds the result.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.NumberToPersianString.ToString(System.Int32)">
      <summary>
            Converts an integer number to its written form in Persian
            </summary>
      <param name="x">The integer to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.NumberToPersianString.ToString(System.Int64)">
      <summary>
            Converts a long number to its written form in Persian
            </summary>
      <param name="x">The long integer number to convert</param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
      </exception>
    </member>
    <member name="M:SCICT.NLP.Utility.NumberToPersianString.ConvertUpTo100(System.Int64)">
      <summary>
            Converts the number to its equivalant persian string. 
            The number should not have more than 3 digits.
            </summary>
      <param name="n">The number to convert</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx">
      <summary>
            Extension class for the Persian Calendar, to make working with this calendar more handy
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Calendar.PersianCalendarEx.dt">
      <summary>
            The Gregorian date of the calendar.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Calendar.PersianCalendarEx.pc">
      <summary>
            The Persian Calendar object of the Framework
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx" /> class.
            </summary>
      <param name="dt">The date-time to be converted in Gregorian calendar.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx" /> class from Gregorian date values.
            </summary>
      <param name="year">The year (in Jalali).</param>
      <param name="month">The month (in Jalali).</param>
      <param name="day">The day (in Jalali).</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx" /> class from Gregorian date values.
            </summary>
      <param name="year">The year (in Jalali).</param>
      <param name="month">The month (in Jalali).</param>
      <param name="day">The day (in Jalali).</param>
      <param name="hour">The hour.</param>
      <param name="minute">The minute.</param>
      <param name="secs">The seconds.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetYear">
      <summary>
            Gets the year in Jalali calendar.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetMonth">
      <summary>
            Returns the month (in the Jalali calendar)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetDayOfMonth">
      <summary>
            Gets the day of the month.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetDayOfWeek">
      <summary>
            Gets the day of week.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetHour">
      <summary>
            Gets the hour value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetMinute">
      <summary>
            Gets the minutes value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetSecond">
      <summary>
            Gets the second value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetMilliseconds">
      <summary>
            Gets the milliseconds value.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetMonthsInYear(System.Int32)">
      <summary>
            Gets the number of months in the specified year in the current era.
            </summary>
      <param name="year">An integer that represents the year.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetDayOfYear">
      <summary>
            Gets the day of the year.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetLeapMonth(System.Int32)">
      <summary>
            Calculates the leap month for a specified year.
            </summary>
      <param name="year">The year.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetEra">
      <summary>
            Gets the era.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetDaysInYear(System.Int32)">
      <summary>
            Gets the number of days in th specified year of the current era.
            </summary>
      <param name="year">An integer representing year.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>
            Gets the number of days in specified year and month of the current era.
            </summary>
      <param name="year">An integer representing the year.</param>
      <param name="month">An integer representing the month.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current Persian Calendar Format. 
            The format of the returned string is "yy/mm/dd".
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current Persian Calendar.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.ToString(System.String)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current Persian Calendar Format. 
            If the format string provided equals "D" then a string describing the current date in Persian language is returned.
            Otherwise, the format of the returned string would be "yy/mm/dd".
            </summary>
      <param name="format">The format.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.TryParse(System.String,SCICT.NLP.Utility.Calendar.PersianCalendarEx@)">
      <summary>
            Converts the string representation of a Persian Date, to a <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx" /> Instance. A return 
            value indicates whether the operation succeeded. The string can contain a numberical representation of a date,
            or a literal date description in Persian language.
            </summary>
      <param name="str">The string to convert.</param>
      <param name="pcOut">If the conversion operation succeeds this will hold the result, 
            otherwise it will be set to null.</param>
      <returns>true if the operation succeeds, otherwise false.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.TryParseLiteralDate(System.String)">
      <summary>
            Converts the string representation of a Persian Date, to a <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx" /> Instance. A return 
            value indicates whether the operation succeeded. The string can contain a literal date description in Persian language.
            </summary>
      <param name="str">The string to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.TryParseNumericDate(System.String)">
      <summary>
            Converts the string representation of a Persian Date, to a <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx" /> Instance. A return 
            value indicates whether the operation succeeded. The string can contain a numberical representation of a date.
            </summary>
      <param name="str">The string to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Calendar.PersianCalendarEx.DateTime">
      <summary>
            Gets the date time object that holds the Gregorian representation of the current calendar object.
            </summary>
      <value>The date time.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Calendar.PersianCalendarEx.Now">
      <summary>
            Gets a <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx" /> instance that is set to the current date and time of the local machine.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Persian.PersianCharFilter">
      <summary>
            Filter for the Persian characters that provide means for replacing non-standard characters with their standard ones.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.PersianCharFilter.m_dicCharFilterings">
      <summary>
            dictionary that maps character codes (i.e. their integer value) to their refined string.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.PersianCharFilter.m_dicCharCategories">
      <summary>
            dictionary that maps character codes to their filtering category that the character belongs
            </summary>
    </member>
    <member name="M:SCICT.NLP.Persian.PersianCharFilter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Persian.PersianCharFilter" /> class. And fills the 
            data-structures holding filtering data in a hard-coded way.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Persian.PersianCharFilter.AddCodesToCategory(SCICT.NLP.Persian.FilteringCharacterCategory,System.Int32[])">
      <summary>
            Adds a sequence of character codes to a filtering category
            </summary>
      <param name="category">The filtering category.</param>
      <param name="codes">The codes.</param>
    </member>
    <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char)">
      <summary>
            Filters the char and returns the string for its filtered (i.e. standardized) equivalant.
            The string may contain 0, 1, or more characters.
            If the length of the string is 0, then the character should have been left out.
            If the length of the string is 1, then the character might be left intact or replaced with another character.
            If the length of the string is more than 1, then there have been no 1-character replacement for this character.
            It is replaced with 2 or more characters. e.g. some fonts have encoded Tashdid, and Tanvin in one character.
            To make it standard this character is replaced with 2 characters, one for Tashdid, and the other for Tanvin.
            </summary>
      <param name="ch">The character to filter.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char,SCICT.NLP.Persian.FilteringCharacterCategory)">
      <summary>
            Filters the char and returns the string for its filtered (i.e. standardized) equivalant.
            The string may contain 0, 1, or more characters.
            If the length of the string is 0, then the character should have been left out.
            If the length of the string is 1, then the character might be left intact or replaced with another character.
            If the length of the string is more than 1, then there have been no 1-character replacement for this character.
            It is replaced with 2 or more characters. e.g. some fonts have encoded Tashdid, and Tanvin in one character.
            To make it standard this character is replaced with 2 characters, one for Tashdid, and the other for Tanvin.
            </summary>
      <param name="ch">The character to filter.</param>
      <param name="ignoreCats">The filtering categories to be ignored.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char,System.Collections.Generic.HashSet{System.Char})">
      <summary>
            Filters the char and returns the string for its filtered (i.e. standardized) equivalant.
            The string may contain 0, 1, or more characters.
            If the length of the string is 0, then the character should have been left out.
            If the length of the string is 1, then the character might be left intact or replaced with another character.
            If the length of the string is more than 1, then there have been no 1-character replacement for this character.
            It is replaced with 2 or more characters. e.g. some fonts have encoded Tashdid, and Tanvin in one character.
            To make it standard this character is replaced with 2 characters, one for Tashdid, and the other for Tanvin.
            </summary>
      <param name="ch">The character to filter.</param>
      <param name="ignoreList">The characters to be ignored.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char,System.Collections.Generic.HashSet{System.Char},SCICT.NLP.Persian.FilteringCharacterCategory)">
      <summary>
            Filters the char and returns the string for its filtered (i.e. standardized) equivalant.
            The string may contain 0, 1, or more characters.
            If the length of the string is 0, then the character should have been left out.
            If the length of the string is 1, then the character might be left intact or replaced with another character.
            If the length of the string is more than 1, then there have been no 1-character replacement for this character.
            It is replaced with 2 or more characters. e.g. some fonts have encoded Tashdid, and Tanvin in one character.
            To make it standard this character is replaced with 2 characters, one for Tashdid, and the other for Tanvin.
            </summary>
      <param name="ch">The character to filter.</param>
      <param name="ignoreList">The characters to be ignored.</param>
      <param name="ignoreCats">The filtering categories to be ignored.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterString(System.String)">
      <summary>
            Filters every character of the string and returns the filtered string. To see how each character is 
            filtered see: <see cref="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char)" /></summary>
      <param name="str">The string to be filtered.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterString(System.String,SCICT.NLP.Persian.FilteringCharacterCategory)">
      <summary>
            Filters every character of the string and returns the filtered string. To see how each character is 
            filtered see: <see cref="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char)" /></summary>
      <param name="str">The string to be filtered.</param>
      <param name="ignoreCats">The filtering categories to be ignored.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterString(System.String,System.Collections.Generic.HashSet{System.Char})">
      <summary>
            Filters every character of the string and returns the filtered string. To see how each character is 
            filtered see: <see cref="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char)" /></summary>
      <param name="str">The string to be filtered.</param>
      <param name="ignoreList">The characters to be ignored.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterString(System.String,System.Collections.Generic.HashSet{System.Char},SCICT.NLP.Persian.FilteringCharacterCategory)">
      <summary>
            Filters every character of the string and returns the filtered string. To see how each character is 
            filtered see: <see cref="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char)" /></summary>
      <param name="str">The string to be filtered.</param>
      <param name="ignoreList">The characters to be ignored.</param>
      <param name="ignoreCats">The filtering categories to be ignored.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterStringWithStats(System.String,System.Collections.Generic.HashSet{System.Char},SCICT.NLP.Persian.FilteringCharacterCategory)">
      <summary>
            Filters the given string with the given options while returning the filtered string as well as filtering statistics.
            </summary>
      <param name="str">The string to filter.</param>
      <param name="ignoreList">list of characters to ignore.</param>
      <param name="ignoreCats">The character-categories to ignore.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Persian.FilteringCharacterCategory">
      <summary>
            The main filtering categories used by Persian Char Filters to replace non-standard characters,
            with their standard equivalents.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.FilteringCharacterCategory.Kaaf">
      <summary>
            Filter all kinds of Kaaf
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.FilteringCharacterCategory.Yaa">
      <summary>
            Filter all kinds of Yaa
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.FilteringCharacterCategory.HalfSpace">
      <summary>
            Filter all kinds of Half-space
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.FilteringCharacterCategory.ArabicDigit">
      <summary>
            Filter arabic digits, and replaces them with their Persian counter-part.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Persian.FilteringCharacterCategory.Erab">
      <summary>
            Filter all kinds of Erabs. Some fonts have their own customized 
            erab characters, which are considered as non-standard.
            </summary>
    </member>
    <member name="T:SCICT.Utility.GUI.PersianMessageBox">
      <summary>
            A Persian Message Box
            </summary>
    </member>
    <member name="F:SCICT.Utility.GUI.PersianMessageBox.components">
      <summary>
            Required designer variable.
            </summary>
    </member>
    <member name="M:SCICT.Utility.GUI.PersianMessageBox.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Utility.GUI.PersianMessageBox" /> class.
            </summary>
    </member>
    <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String)">
      <summary>
            Opens a persian message box.
            </summary>
      <param name="text">The message to be shown.</param>
      <returns>The button pressed</returns>
    </member>
    <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String,System.Windows.Forms.MessageBoxIcon)">
      <summary>
            Opens a persian message box.
            </summary>
      <param name="text">The message to be shown.</param>
      <param name="icon">The icon to be shown.</param>
      <returns>The button pressed</returns>
    </member>
    <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String,System.String)">
      <summary>
            Opens a persian message box.
            </summary>
      <param name="text">The message to be shown.</param>
      <param name="caption">The caption of the message box.</param>
      <returns>The button pressed</returns>
    </member>
    <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
      <summary>
            Opens a persian message box.
            </summary>
      <param name="text">The message to be shown.</param>
      <param name="caption">The caption of the message box.</param>
      <param name="buttons">The buttons of the message box.</param>
      <returns>The button pressed</returns>
    </member>
    <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
      <summary>
            Opens a persian message box.
            </summary>
      <param name="text">The message to be shown.</param>
      <param name="caption">The caption of the message box.</param>
      <param name="buttons">The buttons of the message box.</param>
      <param name="icon">The icon to be shown.</param>
      <returns>The button pressed</returns>
    </member>
    <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
      <summary>
            Opens a persian message box.
            </summary>
      <param name="text">The message to be shown.</param>
      <param name="caption">The caption of the message box.</param>
      <param name="buttons">The buttons of the message box.</param>
      <param name="icon">The icon to be shown.</param>
      <param name="defaultButton">The default button.</param>
      <returns>The button pressed</returns>
    </member>
    <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
      <summary>
            Opens a persian message box.
            </summary>
      <param name="text">The message to be shown.</param>
      <param name="caption">The caption of the message box.</param>
      <param name="buttons">The buttons of the message box.</param>
      <param name="icon">The icon to be shown.</param>
      <param name="defaultButton">The default button.</param>
      <returns>The button pressed</returns>
    </member>
    <member name="M:SCICT.Utility.GUI.PersianMessageBox.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:SCICT.Utility.GUI.PersianMessageBox.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.DigitizedNumberParser">
      <summary>
            Tries to parse numbers in digits. Also tries to avoid numbers as part of calculations.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.DigitizedNumberParser.FindAndParse(System.String)">
      <summary>
            Searches the specified string for digitized number patterns, and tries to parse the patterns found.
            </summary>
      <param name="str">The string to be searched.</param>
      <returns>A sequence of <see cref="T:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo" /> objects which contain 
            information about the patterns found.</returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.IPatternInfo">
      <summary>
            Defines the main interface to xPatternInfo classes which all implement this interface.
            </summary>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.IPatternInfo.PatternInfoType">
      <summary>
            Gets the type of the pattern info.
            </summary>
      <value>The type of the pattern info.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.IPatternInfo.Content">
      <summary>
            Gets the content of the found pattern.
            </summary>
      <value>The content.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.IPatternInfo.Index">
      <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.IPatternInfo.Length">
      <summary>
            Gets the length of the found pattern.
            </summary>
      <value>The length.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo">
      <summary>
            Will contain information about the Digitized Numbers found in a string 
            as returned by <see cref="T:SCICT.NLP.Utility.Parsers.DigitizedNumberParser" /> class.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.#ctor(System.String,System.Int32,System.Int32,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo" /> class.
            </summary>
      <param name="content">The content.</param>
      <param name="index">The index.</param>
      <param name="len">The length of the found pattern.</param>
      <param name="number">The parsed number.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo" />.
            </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.Content">
      <summary>
            Gets the content of the found pattern.
            </summary>
      <value>The content.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.Index">
      <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.Length">
      <summary>
            Gets the length of the found pattern.
            </summary>
      <value>The length.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.Number">
      <summary>
            Gets the number parsed from the pattern.
            </summary>
      <value>The number.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.PatternInfoType">
      <summary>
            Gets the type of the pattern info.
            </summary>
      <value>The type of the pattern info.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.EnglishDateParser">
      <summary>
            Provides the means to search some input string and finding and parsing 
            all occurrances of written-forms of dates in English language.
            By English Date we do not only mean Gregorian date. It means all Jalali, 
            Gregorian, and Hijri Ghamari dates which are written in English Language.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.WeekdayPattern">
      <summary>
            Returns the regex pattern for the Week-day part in an English date.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.DayNumPattern">
      <summary>
            Returns the regex pattern for the day number (in month) in an English date, which can only be digits.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.MonthNamePattern">
      <summary>
            Returns the regex pattern for all possible month-names in all possible calendar types in English language, ORed together.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.YearPattern">
      <summary>
            Returns the regex pattern for the year part of an English date, which can only be digits.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.EnglishDatePattern">
      <summary>
            Returns the complete regex pattern for an English date.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.FindAndParse(System.String)">
      <summary>
            Searches the specified string for patterns of English dates, and
            returns a sequnce of <see cref="T:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo" /> that holds information about the pattern found.
            </summary>
      <param name="str">The string to search.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.ExtractFromEnglishDate(System.Text.RegularExpressions.Match)">
      <summary>
            Parses and extracts information from the found regex match object 
            containing an English date.
            The parsed pattern info is returned, and null is returned if 
            the Match does not contain valid data.
            </summary>
      <param name="m">The regex match object to be parsed.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.ExtractYearNum(System.Text.RegularExpressions.Match)">
      <summary>
            Extracts and parses the year number part.
            </summary>
      <param name="m">The regex Match object to parse.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.ExtractMonthNum(System.Text.RegularExpressions.Match)">
      <summary>
            Extracts and parses the Month number part.
            </summary>
      <param name="m">The regex Match object to parse.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.ExtractDayNum(System.Text.RegularExpressions.Match)">
      <summary>
            Extracts and parses the day number.
            </summary>
      <param name="m">The regex Match object to parse.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.ExtractWeekday(System.Text.RegularExpressions.Match)">
      <summary>
            Extracts and parses the week-day.
            </summary>
      <param name="m">The regex Match object to parse.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.EnglishWeekday(System.String)">
      <summary>
            Returns the day of the week from the given string containing week-day in English.
            Returns Illegal if the specified string does not contain valid week-day.
            </summary>
      <param name="str">The string containing day of the week in English.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.EnglishMonthNum(System.String)">
      <summary>
            Returns the month number from the input string. The month number ranges vary for different calendar types.
            The return value ranges are as follows:
            -1      Illegal
            1 - 12  Jalali
            13 - 24 Gregorian
            25 - 36 HijriGhamari
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.NthWeekday(System.Int32)">
      <summary>
            Returns the Nth day of the week for numbers between 0 and 6 inclusive.
            Returns Illegal othewise.
            </summary>
      <param name="n">The number to return week-day based upon. 
            The number for Saturday is Zero.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo">
      <summary>
            Class to hold information about the parsed English date patterns.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.#ctor(System.String,System.Int32,System.Int32,SCICT.NLP.Utility.Parsers.DateCalendarType,SCICT.NLP.Utility.Parsers.Weekdays,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo" /> class.
            </summary>
      <param name="content">The m_content.</param>
      <param name="index">The m_index.</param>
      <param name="length">The length of the pattern found.</param>
      <param name="t">The type of the calendar.</param>
      <param name="w">The day of the week.</param>
      <param name="dayNo">The day number (in month).</param>
      <param name="monthNo">The month number.</param>
      <param name="yearNo">The year number.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.Content">
      <summary>
            Gets the content of the found pattern.
            </summary>
      <value>The m_content.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.Index">
      <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.Length">
      <summary>
            Gets the length of the found pattern.
            </summary>
      <value>The length.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.CalendarType">
      <summary>
            Gets the type of the calendar.
            </summary>
      <value>The type of the calendar.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.Weekday">
      <summary>
            Gets the day of the week.
            </summary>
      <value>The day of the week.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.DayNumber">
      <summary>
            Gets the day number (in month).
            </summary>
      <value>The day number.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.MonthNumber">
      <summary>
            Gets the month number.
            </summary>
      <value>The month number.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.YearNumber">
      <summary>
            Gets the year number.
            </summary>
      <value>The year number.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.PatternInfoType">
      <summary>
            Gets the type of the pattern info.
            </summary>
      <value>The type of the pattern info.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.PersianParsers.NumberParsersSuggestions">
      <summary>
            Contains utility methods for creating and managing suggestions for number verifiers
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PersianParsers.NumberParsersSuggestions.CreateSuggestions(SCICT.NLP.Utility.Parsers.IPatternInfo)">
      <summary>
            Creates suggestions for the given pattern info
            </summary>
      <param name="pi">the pattern info object to create suggestions for</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.PersianParsers.NumberParsersSuggestions.CreateSuggestions(SCICT.NLP.Utility.PersianParsers.NumberChangeRule,SCICT.NLP.Utility.Parsers.IPatternInfo)">
      <summary>
            Creates suggestions for the given pattern info
            </summary>
      <param name="rule">the change rules that give order to the suggestions</param>
      <param name="pi">the pattern info object to create suggestions for</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.PersianParsers.NumberParsersSuggestions.CreateDigitizedNumberSuggestions(SCICT.NLP.Utility.PersianParsers.NumberChangeRule,SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo)">
      <summary>
            Creates suggestions for the given pattern info
            </summary>
      <param name="rule">the change rules that give order to the suggestions</param>
      <param name="pi">the pattern info object to create suggestions for</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.PersianParsers.NumberParsersSuggestions.CreateGeneralNumberSuggestions(SCICT.NLP.Utility.PersianParsers.NumberChangeRule,SCICT.NLP.Utility.Parsers.GeneralNumberInfo)">
      <summary>
            Creates suggestions for the given pattern info
            </summary>
      <param name="rule">the change rules that give order to the suggestions</param>
      <param name="pi">the pattern info object to create suggestions for</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.NumericDateParser">
      <summary>
            Provides the means to search some input string and finding and parsing 
            all occurrances of numeric forms of dates. e.g. 10/10/2007 or 1-7-74
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.NumericDatePattern">
      <summary>
            Returns the regex pattern for the numeric dates
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.FindAndParse(System.String)">
      <summary>
            Searches the specified string for patterns of numeric dates, and
            returns a sequnce of <see cref="T:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo" /> that holds information about the pattern found.
            </summary>
      <param name="str">The string to search.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.CheckConsistency(System.Text.RegularExpressions.Match,System.String)">
      <summary>
            Checks the consistency of the found date pattern. 
            It first checks the consistancy of the seperators (see <see cref="M:SCICT.NLP.Utility.Parsers.NumericDateParser.CheckSeperators(System.Text.RegularExpressions.Match,System.String@)" />).
            Then checks the consistancy of the date itself. e.g. 25.02.07 is a date but
            25.02.07.05 might be an IP address. Thus patterns containing more than 3 digit sections
            are not considered as dates.
            </summary>
      <param name="m">The regex Match object containing numeric date.</param>
      <param name="str">The original string inside which the numeric date pattern was found.
            Actually it is the context of the found pattern.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.CheckSeperators(System.Text.RegularExpressions.Match,System.String@)">
      <summary>
            Checks the consistency of seperators in a date string.
            e.g. 12/01/2007 and 12-01-2007 are consistant but 12-01/2007 is not.
            </summary>
      <param name="m">The regex match object containing the english date.</param>
      <param name="sep">The consistant seperator string (if any).</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.ExtractFromNumericDate(System.Text.RegularExpressions.Match)">
      <summary>
            Parses and extracts information from the found regex Match object 
            containing a numeric date.
            The parsed pattern info is returned, and null is returned if 
            the Match does not contain valid data.
            </summary>
      <param name="m">The regex Match object to be parsed.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.FindDateParts(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
            Tries to guess the three main date parts from the provided three numbers.
            </summary>
      <param name="num1">The 1st number.</param>
      <param name="num2">The 2nd number.</param>
      <param name="num3">The 3rd number.</param>
      <param name="year">The year guessed.</param>
      <param name="month">The month guessed.</param>
      <param name="day">The day guessed.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.ExtractNum(System.Text.RegularExpressions.Match,System.String)">
      <summary>
            Extracts and parses the number section of the specified 
            group name from the regex Match object.
            </summary>
      <param name="m">The regex Match object to be parsed.</param>
      <param name="grpName">Name of the (regex) group.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.NthWeekday(System.Int32)">
      <summary>
            Returns the Nth day of the week for numbers between 0 and 6 inclusive.
            Returns Illegal othewise.
            </summary>
      <param name="n">The number to return week-day based upon. 
            The number for Saturday is Zero.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo">
      <summary>
            Class to hold information about the parsed numeric date patterns.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo" /> class.
            </summary>
      <param name="content">The content.</param>
      <param name="index">The index.</param>
      <param name="length">The length of the pattern found.</param>
      <param name="dayNo">The day number (in month).</param>
      <param name="monthNo">The month number.</param>
      <param name="yearNo">The year number.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.Content">
      <summary>
            Gets the content of the found pattern.
            </summary>
      <value>The content.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.Index">
      <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.Length">
      <summary>
            Gets the length of the found pattern.
            </summary>
      <value>The length.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.DayNumber">
      <summary>
            Gets the day number (in month).
            </summary>
      <value>The day number.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.MonthNumber">
      <summary>
            Gets the month number.
            </summary>
      <value>The month number.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.YearNumber">
      <summary>
            Gets the year number.
            </summary>
      <value>The year number.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.PatternInfoType">
      <summary>
            Gets the type of the pattern info.
            </summary>
      <value>The type of the pattern info.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.ParsingUtils">
      <summary>
            A Utility class which is mainly used by parsers.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ParsingUtils.ConvertNumber2English(System.String)">
      <summary>
            Converts the string containing numbers from Persian/Arabic to English. 
            This includes digits, decimal points, and thousand seperators.
            </summary>
      <param name="num">The string of number to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ParsingUtils.ConvertNumber2Persian(System.String)">
      <summary>
            Converts the string containing numbers from English/Arabic to Persian. 
            This includes digits, decimal points, and thousand seperators.
            </summary>
      <param name="num">The string of number to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ParsingUtils.NormalizeSpaces(System.String)">
      <summary>
            Normalizes the spaces. Replaces multiple occurrances of 
            white-space characters to a single space character.
            </summary>
      <param name="str">The string.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.PatternInfoTypes">
      <summary>
            Enumerates different types of xPatternInfo classes.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.PatternInfoTypes.EnglishDate">
      <summary>
            used by EnglishDatePatternInfo class
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.PatternInfoTypes.NumericDate">
      <summary>
            used by NumericDatePatternInfo class
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.PatternInfoTypes.PersianDate">
      <summary>
            used by PersianDatePatternInfo class
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.PatternInfoTypes.PersianNumber">
      <summary>
            used by PersianNumberPatternInfo class
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.PatternInfoTypes.DigitizedNumber">
      <summary>
            used by DigitizedNumberPatternInfo class
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.PersianDateParser">
      <summary>
            Provides the means to search some input string and finding and parsing 
            all occurrances of written-forms of dates in Persian language.
            By Persian Date we do not only mean Jalali date. It means all Jalali, 
            Gregorian, and Hijri Ghamari dates which are written in Persian Language.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.PersianDateParser.persianNumberParser">
      <summary>
            Persian number parser to help parse written number parts in date descriptions
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.WeekdayPattern">
      <summary>
            Returns regex pattern for week-day part of the date pattern
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.DayNumPattern">
      <summary>
            Returns the regex pattern for the day-number (in month) part of the date description
            which can also be in persian written form.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.MonthNamePattern">
      <summary>
            Returns the regex pattern for all possible month names in all the supported calendar types, ORed together.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.YearPattern">
      <summary>
            Returns the regex pattern for the year part of the date,
            which can be either digits or written numbers in Persian.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.PersianDatePattern">
      <summary>
            Returns the complete regex date pattern in Persian.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.FindAndParse(System.String)">
      <summary>
            Searches the specified string for patterns of dates in a Persian descriptive string, and
            returns a sequnce of <see cref="T:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo" /> that holds information about the pattern found.
            </summary>
      <param name="str">The string to search.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.ExtractFromPersianDate(System.Text.RegularExpressions.Match)">
      <summary>
            Extracts and parses date information from a regex Match instance.
            </summary>
      <param name="m">The regex Match instance containing date pattern.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.ExtractYearNum(System.Text.RegularExpressions.Match)">
      <summary>
            Extracts and parses the year number from the given regex Match instance.
            </summary>
      <param name="m">The regex Match instance to extract year number from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.ExtractMonthNum(System.Text.RegularExpressions.Match)">
      <summary>
            Extracts and parses the month number from the given regex Match instance.
            </summary>
      <param name="m">The regex Match instance to extract month number from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.ExtractDayNum(System.Text.RegularExpressions.Match)">
      <summary>
            Extracts and parses the day number from the given regex Match instance.
            </summary>
      <param name="m">The regex Match instance to extract day number from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.ExtractWeekday(System.Text.RegularExpressions.Match)">
      <summary>
            Extracts and parses the week-day from the given regex Match instance.
            </summary>
      <param name="m">The regex Match instance to extract week-day from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.PersianMonthNum(System.String)">
      <summary>
            Returns the month number from the input string. The month number ranges vary for different calendar types.
            The return value ranges are as follows:
            -1      Illegal
            1 - 12  Jalali
            13 - 24 Gregorian
            25 - 36 HijriGhamari
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.NthWeekday(System.Int32)">
      <summary>
            Returns the  Nth day of the week for numbers between 0 and 6 inclusive.
            Returns Illegal othewise.
            </summary>
      <param name="n">The number to return week-day based upon. 
            The number for Saturday is Zero.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo">
      <summary>
            Class to hold information about the parsed persian date patterns
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.#ctor(System.String,System.Int32,System.Int32,SCICT.NLP.Utility.Parsers.DateCalendarType,SCICT.NLP.Utility.Parsers.Weekdays,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo" /> class.
            </summary>
      <param name="content">The content.</param>
      <param name="index">The index.</param>
      <param name="length">The length of the found pattern.</param>
      <param name="t">The calendar type.</param>
      <param name="w">The day of the week.</param>
      <param name="dayNo">The day number (in month).</param>
      <param name="monthNo">The month number.</param>
      <param name="yearNo">The year number.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.Content">
      <summary>
            Gets the content of the found pattern.
            </summary>
      <value>The content.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.Index">
      <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.Length">
      <summary>
            Gets the length of the found pattern.
            </summary>
      <value>The length.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.CalendarType">
      <summary>
            Gets the type of the calendar.
            </summary>
      <value>The type of the calendar.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.Weekday">
      <summary>
            Gets the day of the week.
            </summary>
      <value>The weekday.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.DayNumber">
      <summary>
            Gets the day number in the month.
            </summary>
      <value>The day number in the month.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.MonthNumber">
      <summary>
            Gets the month number.
            </summary>
      <value>The month number.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.YearNumber">
      <summary>
            Gets the year number.
            </summary>
      <value>The year number.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.PatternInfoType">
      <summary>
            Gets the type of the pattern info.
            </summary>
      <value>The type of the pattern info.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.Weekdays">
      <summary>
            Enumeration for the week-days
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Illeagal">
      <summary>
            week-day not defined
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Sat">
      <summary>
            Saturday
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Sun">
      <summary>
            Sunday
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Mon">
      <summary>
            Monday
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Tue">
      <summary>
            Tuesday
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Wed">
      <summary>
            Wednesday
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Thu">
      <summary>
            Thursday
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Fri">
      <summary>
            Friday
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.DateCalendarType">
      <summary>
            Enumerates different calendar types supported by this library
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.DateCalendarType.Illegal">
      <summary>
            Calendar-Type not defined
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.DateCalendarType.Gregorian">
      <summary>
            Gregorian Calendar Type
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.DateCalendarType.Jalali">
      <summary>
            Jalali Calendar Type
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.DateCalendarType.HijriGhamari">
      <summary>
            Hijri Ghamari Calendar Type
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap">
      <summary>
            Utility class that helps convert string of 
            Persian literals of long numbers to long numbers, and vice versa.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap.perStr2IntTable">
      <summary>
            Dictionary that maps string of numbers in Persian to their long value. 
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap.perInt2StrTable">
      <summary>
            Dictionary that maps long values to the their string in Persian.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap.InitPersianStringTable">
      <summary>
            Initializes the Persian string tables (i.e. dictionaries).
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap.TryPersianString2Num(System.String,System.Int64@)">
      <summary>
            Tries to convert a Persian string containing litteral form of a number to its equivalant value.
            A return value indicates whether the operation succeeded or not.
            </summary>
      <param name="str">The string containing litteral form of a number to convert.</param>
      <param name="n">The converted number.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap.TryNum2PersianString(System.Int64,System.String@)">
      <summary>
            Tries to convert a long number to its equivalant Persian string containing litteral form of that number.
            A return value indicates whether the operation succeeded or not.
            </summary>
      <param name="n">The number to convert.</param>
      <param name="str">The converted string containing litteral form of a number to convert.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.PersianNumberParser">
      <summary>
            Provides the means to search some input string and find and parse
            all occurrances of written-forms of persian integer numbers.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.PersianNumberPattern">
      <summary>
            Returns the whole pattern of a persian written number
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.BlockPlusMultiplier">
      <summary>
            Returns the pattern of 3-digit blocks plus the multipliers.
            Named As MULTIPLIER_GROUP_NAME
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.ThreeDigitBlockPattern">
      <summary>
            Returns the regex pattern of three-digit-blocks 
            (i.e. umbers lower than 1000 which are main building blocks of larger numbers).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.AllUpToTens">
      <summary>
            Returns the regex pattern for the Hundreds and Tens (not lower, and not between). e.g. 110, 920 (NOT 117).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.AllUpToOnesAndTenOnes">
      <summary>
            Returns regex pattern for 3-digit numbers from ones to ten-and ones. e.g. 117, 308 (NOT 120).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.OnesPattern">
      <summary>
            returns the regex pattern for numbers from 1 to 9.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.TensPattern">
      <summary>
            Returns the pattern for 10 mulitipliers from 20 to 90 ORed together.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.TenOnesPattern">
      <summary>
            Returns the regex pattern for 10 to 19 ORed together
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.HundsPattern">
      <summary>
            Returns regex patterns for the multipliers of 100. e.g. سیصد، دویست، نهصد، صد
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.OrdinalityPattern">
      <summary>
            returns the pattern that makes numbers ordinal. i.e. adds "م" and "ام" in the end.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.MultipliersPattern">
      <summary>
            Named As MULTIPLIER_NAME
            Containing only the grand coefficients ORed together, e.g. "میلیون", "میلیارد"
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.FindAndParse(System.String)">
      <summary>
            Searches the specified string for patterns of integer numbers in a persian descriptive string, and
            returns a sequnce of <see cref="T:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo" /> that holds information about the pattern found.
            </summary>
      <param name="str">The string to search.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.ExtractFromPersianNumber(System.Text.RegularExpressions.Match)">
      <summary>
            Parses and extracts information from the found regex match object 
            for the persian integer number in descriptive written form.
            The parsed pattern info is returned, and null is returned if 
            the Match does not contain valid data.
            </summary>
      <param name="m">The regex match object to be parsed.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.ExtractMultiplierAndNumber(System.String)">
      <summary>
            Extracts and parses the multiplier and number from the specified string.
            </summary>
      <param name="str">The string to be parsed.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.ExtractThreeDB(System.String)">
      <summary>
            Extracts and parses the three digit block from the specified string.
            </summary>
      <param name="str">The string to extract number from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.ExtractHundreds(System.Text.RegularExpressions.Match)">
      <summary>
            Extracts and parses the hundreds from the specified regex Match object provided.
            </summary>
      <param name="m">The regex match object to extract from.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo">
      <summary>
            Class to hold information about the parsed persian number patterns
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.#ctor(System.String,System.Int32,System.Int32,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo" /> class.
            </summary>
      <param name="content">The content of the pattern.</param>
      <param name="index">The index.</param>
      <param name="len">The length of the pattern.</param>
      <param name="number">The number parsed from the pattern.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.Content">
      <summary>
            Gets the content of the found pattern.
            </summary>
      <value>The content.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.Index">
      <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.Length">
      <summary>
            Gets the length of the found pattern.
            </summary>
      <value>The length.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.Number">
      <summary>
            Gets the number.
            </summary>
      <value>The number.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.PatternInfoType">
      <summary>
            Gets the type of the pattern info.
            </summary>
      <value>The type of the pattern info.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.PersianRealNumberParser">
      <summary>
            Provides the means to search some input string and find and parse
            all occurrances of written-forms of persian real numbers.
            The numbers can be integer, floating point, or fractions.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.s_setAllChunkWords">
      <summary>
            HashSet that holds all possible words which can occur in a written form of a number in Persian language.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.AddWordToSet(System.String)">
      <summary>
            Adds the word of number and its ordinal form to set of possible words.
            </summary>
      <param name="word">The word to add.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.FindChunks(System.String)">
      <summary>
            Finds the chunk of words in the input string in which there could probably numbers be found.
            </summary>
      <param name="input">The input string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.FindAndParse(System.String)">
      <summary>
            Searches the specified string for patterns of real numbers in a persian descriptive string, and
            returns a sequnce of <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo" /> that holds information about the pattern found.
            </summary>
      <param name="input">The string to search.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.ListNeedToBeTrimmed(System.Collections.Generic.List{System.Int64},System.Int32@,System.Int32@)">
      <summary>
            Determines whether the list of numbers need to be trimmed. 
            Since the list of numbers is gained from chunks in input, they may contain 
            some tokens at their beginning or ending, which are valid in chunks, but does not make
            a valid beginning or ending for a number. e.g. vaav is an example.
            </summary>
      <param name="lstValues">The list of long values.</param>
      <param name="start">The start index after trimming the list.</param>
      <param name="end">The end index after trimming the list.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.ExtractGeneralNumber(SCICT.NLP.Utility.Parsers.ChunkInfo)">
      <summary>
            Extracts and returns a sequence of all occurrances of real numbers in the specified chunk.
            </summary>
      <param name="chunk">The chunk to extract real numbers from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.CanExtractTwoIntegersFrom(SCICT.NLP.Utility.Parsers.ChunkInfo,SCICT.NLP.Utility.Parsers.GeneralNumberInfo@,SCICT.NLP.Utility.Parsers.GeneralNumberInfo@)">
      <summary>
            Determines whether two adjacent integers can be extracted from the specified chunk.
            </summary>
      <param name="chunk">The chunk holding elements and values.</param>
      <param name="num1">The 1st number.</param>
      <param name="num2">The 2nd number.</param>
      <returns>
        <c>true</c> if two adjacent integers can be extracted from the specified chunk; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.ExtractAllIntsFromList(System.Collections.Generic.List{System.Int64})">
      <summary>
            Extracts all integer numbers that can be extracted from the specified list of element-values.
            </summary>
      <param name="lstValues">The List of values to extract integer numbers from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.ExtractIntegerNumber(SCICT.NLP.Utility.Parsers.ChunkInfo)">
      <summary>
            Extracts and returns sequence of all occurrances of integer numbers from the specified chunk.
            This method does NOT ignore possible ordinal-Miim at the end of the number.
            </summary>
      <param name="chunk">The chunk to extract integer numbers from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.ExtractIntegerNumber(SCICT.NLP.Utility.Parsers.ChunkInfo,System.Boolean)">
      <summary>
            Extracts and returns sequence of all occurrances of integer numbers from the specified chunk.
            </summary>
      <param name="chunk">The chunk to extract integer numbers from.</param>
      <param name="ignoreMiim">if set to <c>true</c> ignores the ordinal-Miim at the end of the number (if any).</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.GetWordNumericValue(System.String)">
      <summary>
            Gets the numeric value of the specified word which can occur in the written-form of a Persian real number. 
            This includes the symbolic constants also.
            </summary>
      <param name="word">The word.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.GenerateFloatingPartFrom(System.Collections.Generic.List{System.Int64},System.Int32)">
      <summary>
            Generates the floating part of a number from the values specified by the list of values starting from
            the specified floating point index.
            </summary>
      <param name="lstValues">The list of values.</param>
      <param name="dotIndex">Index of the floating dot.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.GenerateIntegralPartFrom(System.Collections.Generic.List{System.Int64},System.Int32,System.Int32)">
      <summary>
            Creates a long integer number from the list of chunk-element values starting from
            the index specified by the <paramref name="from" /> parameter to the index specified by
            the <paramref name="to" /> parameter inclusively.
            </summary>
      <param name="lstValues">The list of values.</param>
      <param name="from">Index of the lower bound.</param>
      <param name="to">Index of the upper bound.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.ReadTopNumber(System.Collections.Generic.List{System.Int64},System.Int64@,System.Int32@)">
      <summary>
            Reads and removes the top number from the list of values. 
            Returns the number read via an out parameter, and 
            updates the index variable from the caller context by incrementing it.
            </summary>
      <param name="lstValues">The list of values.</param>
      <param name="number">The number read.</param>
      <param name="outsideIndex">Index variable in the caller context.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.AreNumbersAddable(System.Int64,System.Int64)">
      <summary>
            Checks whether two numbers can be added if they come next to each other in the written form of a Persian number.
            e.g. 10 and 12 are not addable, 300 and 400 are not addable, but 300 and 50 are addable.
            </summary>
      <param name="big">The bigger number.</param>
      <param name="small">The smaller number.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo">
      <summary>
            Holds information about the content and location of the real numbers found.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.#ctor(System.String,System.Int64,SCICT.NLP.Utility.Parsers.FloatingPartInfo,System.Int32,System.Int32,System.Collections.Generic.List{SCICT.NLP.Utility.Parsers.ChunkElement})">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo" /> class which holds a valid chunk of numbers.
            </summary>
      <param name="content">The content.</param>
      <param name="integralPart">The integral part.</param>
      <param name="floatingPart">The floating part.</param>
      <param name="startIndex">The start index.</param>
      <param name="endIndex">The end index.</param>
      <param name="lstChunkElements">The list of chunk elements.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.#ctor(System.String,System.Int32,System.Int32,System.Collections.Generic.List{SCICT.NLP.Utility.Parsers.ChunkElement})">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo" /> class which holds an INVALID chunk of numbers.
            The content created by this constructor is used for debugging purposes.
            </summary>
      <param name="content">The content.</param>
      <param name="startIndex">The start index.</param>
      <param name="endIndex">The end index.</param>
      <param name="lstChunkElement">The list of chunk elements.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.GetValue">
      <summary>
            Gets the value for this instance of <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo" />.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo" />.
            </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.Content">
      <summary>
            Gets the content of the found pattern.
            </summary>
      <value>The content.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.IntegralPart">
      <summary>
            Gets the integral part of the number
            </summary>
      <value>The integral part.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.FloatingPart">
      <summary>
            Gets the floating part of the number (if any). Could be null.
            </summary>
      <value>The floating part.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.StartIndex">
      <summary>
            Gets the start index of the found pattern of the number.
            </summary>
      <value>The start index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.EndIndex">
      <summary>
            Gets the end index of the found pattern of the number.
            </summary>
      <value>The end index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.ListChunkElements">
      <summary>
            Gets the list of chunk elements.
            </summary>
      <value>The list of chunk elements.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.IsFraction">
      <summary>
            Gets a value indicating whether the floating part of this instance is fraction. e.g. 1/3 (one third).
            If the return value is false, then the floating part is an ordinary floating number. e.g. 0.333
            </summary>
      <value>
        <c>true</c> if this instance is fraction; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.FractionString">
      <summary>
            Gets the string reperesentation of the floating part of the number shown as a fraction.
            The string returned by this property is suitable for showing a right-to-left context.
            </summary>
      <value>The fraction string.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.IsInvalid">
      <summary>
            Gets a value indicating whether this instance is invalid.
            Invalid instance holds just parsed chunk-elements which do not construct a valid number together.
            </summary>
      <value>
        <c>true</c> if this instance is invalid; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.PatternInfoType">
      <summary>
            Gets the type of the pattern info.
            </summary>
      <value>The type of the pattern info.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.Index">
      <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.Length">
      <summary>
            Gets the length of the found pattern.
            </summary>
      <value>The length.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfoComparer">
      <summary>
            An implementation of IComparer to compare instances of <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo" />.
            The comparison is mainly based upon the Numbers' location.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.GeneralNumberInfoComparer.Compare(SCICT.NLP.Utility.Parsers.GeneralNumberInfo,SCICT.NLP.Utility.Parsers.GeneralNumberInfo)">
      <summary>
            Compares two instances of <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo" /> and returns a value indicating whether one is less than, equal to, or greater than the other.
            The comparison is mainly based upon the Numbers' location.
            </summary>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
      <returns>
            Value Condition Less than zero <paramref name="x" /> is less than <paramref name="y" />.
            Zero <paramref name="x" /> equals <paramref name="y" />.
            Greater than zero <paramref name="x" /> is greater than <paramref name="y" />.
            </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.FloatingPartInfo">
      <summary>
            Holds information about the Floating Part of a number, including its nominator and denominator.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.FloatingPartInfo.FloatingPartType">
      <summary>
            Enumerates different types of Floating Part of a number
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.FloatingPartInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.FloatingPartInfo" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.FloatingPartInfo" />.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.FloatingPartInfo.GetDoubleValue">
      <summary>
            Gets the double value for this instance of floating part.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.FloatingPartInfo.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.FloatingPartInfo" /> class.
            The value for denominator is deduced from the number of digits of the numerator.
            e.g. if numerator is 5, denominator would be 10, or if numerator is 123 then the denominator would be 1000.
            </summary>
      <param name="numerator">The numerator.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.FloatingPartInfo.#ctor(System.Int64,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.FloatingPartInfo" /> class.
            </summary>
      <param name="numerator">The numerator.</param>
      <param name="denominator">The denominator.</param>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.FloatingPartInfo.Numerator">
      <summary>
            Gets the numerator.
            </summary>
      <value>The numerator.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.FloatingPartInfo.Denominator">
      <summary>
            Gets the denominator.
            </summary>
      <value>The denominator.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.FloatingPartInfo.Type">
      <summary>
            Gets the type of the floating part: fraction or floating.
            </summary>
      <value>The type of the floating part.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.ChunkInfo">
      <summary>
            Holds information about each chunk of possible real numbers in written form in Persian
            language. This information contains the content and location of the whole chunk, and the
            collection of information about all the elements of the chunks.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.#ctor(System.String,System.Int32,System.Int32,System.Collections.Generic.List{SCICT.NLP.Utility.Parsers.ChunkElement})">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.ChunkInfo" /> class.
            </summary>
      <param name="content">The content.</param>
      <param name="stIndex">The start index.</param>
      <param name="endIndex">The end index.</param>
      <param name="lstChunkElements">The List of chunk elements.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.GetSubChunk(System.Int32)">
      <summary>
            Returns the subset of the chunk, with elements starting at the specified index.
            </summary>
      <param name="startIndex">The index of the chunk element from which the new chunk will be made.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.GetSubChunk(System.Int32,System.Int32)">
      <summary>
            Returns the subset of the chunk, with elements starting at the specified start index, and 
            finishing with the element at the specified end index.
            </summary>
      <param name="startIndex">The index of the chunk element from which the new chunk will be made.</param>
      <param name="endIndex">The index of the chunk element which form the upper bound of the sub-chunk.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.GetChunkIndexFromValueIndex(System.Int32)">
      <summary>
            Retrieves the index of the chunk element from the specified index of the chunk-element values.
            Note that chunk-element indeces and chunk-element value indices are not one to one.
            e.g. "نیم" comprises one chunk-element but 4 chunk-element values: { MOMAYEZ, 5, 10, MIIM }.
            </summary>
      <param name="n">The chunk-element VALUES index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.ChunkInfo" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.ChunkInfo" />.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.GetAllChunkElementValues">
      <summary>
            Gets all chunk element values.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.ListToString``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Utility function that converts a sequence of values to string.
            </summary>
      <typeparam name="T">The type of the sequence elements.</typeparam>
      <param name="seq">The sequence of values to be converted to string.</param>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ChunkInfo.Content">
      <summary>
            Gets the content of the chunk.
            </summary>
      <value>The content.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ChunkInfo.StartIndex">
      <summary>
            Gets the chunk start index.
            </summary>
      <value>The start index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ChunkInfo.EndIndex">
      <summary>
            Gets the chunk end index.
            </summary>
      <value>The end index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ChunkInfo.ListChunkElements">
      <summary>
            Gets the list of chunk elements.
            </summary>
      <value>The list of chunk elements.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.ChunkElement">
      <summary>
            Holds information about each building block of a real number in written form 
            and their location. 
            That would be the digits, and the symbols such as vaav, [ordinal] miim, momayez
            (i.e. floating point) and so on.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ChunkElement.#ctor(System.String,System.Int64[],System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.ChunkElement" /> class.
            </summary>
      <param name="content">The content.</param>
      <param name="elementValues">The element values.</param>
      <param name="startIndex">The start index.</param>
      <param name="endIndex">The end index.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ChunkElement.#ctor(System.String,System.Int64,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.ChunkElement" /> class.
            </summary>
      <param name="content">The content.</param>
      <param name="elementValue">The element value.</param>
      <param name="startIndex">The start index.</param>
      <param name="endIndex">The end index.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ChunkElement.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.ChunkElement" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.ChunkElement" />.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ChunkElement.IsEqualTo(SCICT.NLP.Utility.Parsers.ChunkElement)">
      <summary>
            Determines whether the specified chunk element is equal to this instance.
            </summary>
      <param name="c">The chunk element to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified chunk element is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ChunkElement.AreEqual(SCICT.NLP.Utility.Parsers.ChunkElement,SCICT.NLP.Utility.Parsers.ChunkElement)">
      <summary>
            Determines whether two chunk elements are equal.
            Two chunk elements are considered to be equal if they have the same content
            and are at the same location.
            </summary>
      <param name="a">The 1st chunk-element.</param>
      <param name="b">The 2nd chunk-element.</param>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ChunkElement.ElementValues">
      <summary>
            Gets an array of the value of the elements.
            </summary>
      <value>The element values.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ChunkElement.StartIndex">
      <summary>
            Gets or sets the start index at which the chunk element has been met.
            </summary>
      <value>The start index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ChunkElement.EndIndex">
      <summary>
            Gets the end index of the chunk element.
            </summary>
      <value>The end index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ChunkElement.Content">
      <summary>
            Gets the content of the chunk element.
            </summary>
      <value>The content.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ChunkElement.IsNumeric">
      <summary>
            Gets a value indicating whether this instance is numeric, i.e. the chunk-element itself is 
            made of digits.
            </summary>
      <value>
        <c>true</c> if this instance is numeric; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.NumberSeperationException">
      <summary>
            An Exception class used internally by the <see cref="T:SCICT.NLP.Utility.Parsers.PersianRealNumberParser" /> class to process real number parsing.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.NumberSeperationException.#ctor(System.String,System.Int32,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.NumberSeperationException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="index">The index at which the chunk should divided into two chunks.</param>
      <param name="number">The number parsed so far.</param>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.NumberSeperationException.Index">
      <summary>
            Gets the index at which the chunk should divided into two chunks.
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.NumberSeperationException.ParsedNumber">
      <summary>
            Gets the number parsed so far, right before meeting the illegal chunk element.
            </summary>
      <value>The parsed number.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.ListAndArrayExtensions">
      <summary>
            Provides extension methods for Array and List classes to make it more handy working with.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ListAndArrayExtensions.GetLastElement``1(``0[])">
      <summary>
            Returns the last element of an array.
            </summary>
      <typeparam name="TSource">The type of the source.</typeparam>
      <param name="source">The source array to work with.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ListAndArrayExtensions.SetLastElement``1(``0[],``0)">
      <summary>
            Sets the last element of an array to the specified value.
            </summary>
      <typeparam name="TSource">The type of the source.</typeparam>
      <param name="source">The source array to work with.</param>
      <param name="value">The value to be assigned to the last element of the array.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ListAndArrayExtensions.GetLastElement``1(System.Collections.Generic.List{``0})">
      <summary>
            Returns the last element of a list.
            </summary>
      <typeparam name="TSource">The type of the source.</typeparam>
      <param name="source">The source List instance to work with.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ListAndArrayExtensions.SetLastElement``1(System.Collections.Generic.List{``0},``0)">
      <summary>
            Sets the last element of a List to the specified value.
            </summary>
      <typeparam name="TSource">The type of the source.</typeparam>
      <param name="source">The source array to work with.</param>
      <param name="value">The value to be assigned to the last element of the List.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ListAndArrayExtensions.FindAllIndeces``1(System.Collections.Generic.List{``0},``0)">
      <summary>
            Finds all indeces at which the element of the specified List equals the specified key.
            </summary>
      <typeparam name="TSource">The type of the source.</typeparam>
      <param name="source">The source List to work with.</param>
      <param name="key">The key value to look for in the List.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.RegexPatternCreator">
      <summary>
            A Utility class to help create regular expression patterns programmatically. 
            Recommanded for creating expressions full of right-to-left stuff.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.BetWordWSChars">
      <summary>
            The whitespace characters that can occur between words (not inside them).
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.InWordWSChar">
      <summary>
            The half-space character. In other words, the white-space that can occur inside words.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.BetWordWS">
      <summary>
            The regex representation of the set of whitespace characters that can occur between words (not inside them).
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.InWordWS">
      <summary>
            The regex representation of the set of whitespace characters that can occur both between and inside words.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.InWordWSStar">
      <summary>
            The regex representation of the star closure of the set of whitespace characters that can occur both between and inside words.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.InWordWSPlus">
      <summary>
            The regex representation of the plus closure of the set of whitespace characters that can occur both between and inside words.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.BetWordWSStar">
      <summary>
            The regex representation of the star closure of the set of whitespace characters that can occur between words (not inside them).
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.BetWordWSPlus">
      <summary>
            The regex representation of the plus closure of the set of whitespace characters that can occur between words (not inside them).
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.CreateOR(System.Boolean,System.Object[])">
      <summary>
            Creates a string by seperating any of the arguments by Regex OR operator "|".
            The parameters can be string or an array of strings. For other objects their ToString()
            return value will be put.
            If the putEachInAGroup parameter is set to true then each of the items will be put inside
            parantheses (i.e. regex group operator), otherwise they will be put intact.
            The space characters inside each item will be replaced by a "white-space plus" pattern.
            </summary>
      <param name="putEachInAGroup">if set to <c>true</c> puts each item in a group 
            (i.e. inside parantheses).</param>
      <param name="args">The items that should be prefereably string or string array.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.CreateOR(System.Boolean,System.String[])">
      <summary>
            Creates a string by seperating any of the arguments by Regex OR operator "|".
            If the putEachInAGroup parameter is set to true then each of the items will be put inside
            parantheses (i.e. regex group operator), otherwise they will be put intact.
            The space characters inside each item will be replaced with a "white-space plus" pattern.
            </summary>
      <param name="putEachInAGroup">if set to <c>true</c> puts each item in a group 
            (i.e. inside parantheses).</param>
      <param name="args">The items.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ResolveSpacePattern(System.String)">
      <summary>
            Resolves the space pattern in the given string. 
            The space characters inside the given string will be replaced with a "white-space plus" pattern.
            </summary>
      <param name="str">The string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.CreateGroup(System.String,System.String[])">
      <summary>
            Creates a regex group with an optional name. A regex group is a pattern inside parantheses.
            If the group-name parameter is an empty string then the name part will not be created.
            The content strings will be simply concatenated together.
            </summary>
      <param name="grpName">Name of the group.</param>
      <param name="args">The content arguments which will be concatenated to form the group content.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ClosurePlus(System.String)">
      <summary>
            Creates the plus closure pattern for the given string (i.e. (pat)+ ).
            If the string is not inside a group, it will be put inside a group first.
            </summary>
      <param name="pat">The input pattern.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ClosureStar(System.String)">
      <summary>
            Creates the star closure pattern for the given string (i.e. (pat)* ).
            If the string is not inside a group, it will be put inside a group first.
            </summary>
      <param name="pat">The input pattern.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ClosureQuestionMark(System.String)">
      <summary>
            Creates the optional closure pattern for the given string (i.e. (pat)? ).
            If the string is not inside a group, it will be put inside a group first.
            </summary>
      <param name="pat">The input pattern.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ClosureExactNum(System.String,System.Int32)">
      <summary>
            Creates the exact repetition closure pattern for the given string (i.e. (pat){n} ).
            If the string is not inside a group, it will be put inside a group first.
            </summary>
      <param name="pat">The input pattern.</param>
      <param name="n">The number</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ClosureAtLeastNum(System.String,System.Int32)">
      <summary>
            Creates the at least repetition closure pattern for the given string (i.e. (pat){n,} ).
            If the string is not inside a group, it will be put inside a group first.
            </summary>
      <param name="pat">The input pattern.</param>
      <param name="n">The number</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ClosureRangeNum(System.String,System.Int32,System.Int32)">
      <summary>
            Creates the range repetition closure pattern for the given string (i.e. (pat){min,max} ).
            If the string is not inside a group, it will be put inside a group first.
            </summary>
      <param name="pat">The input pattern.</param>
      <param name="min">The min number</param>
      <param name="max">The max number</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.IsEnclosedInParantheses(System.String)">
      <summary>
            Determines whether the specified string is enclosed in parantheses. 
            (e.g. returns true for "(..)", and false for "(..)(..)".
            </summary>
      <param name="str">The given string.</param>
      <returns>
        <c>true</c> if the specified string is enclosed in parantheses; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher">
      <summary>
            This class matches and finds patterns occuring in the end of a string.
            It makes use of some special wild-card symbols which suits the Persian language more.
            For a list of the possible wild-cards see the "Symbolic Character Constants" region of the code.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.PostProcessRule">
      <summary>
            Use this delegate to pass methods which performs post-processing on returning results.
            </summary>
      <param name="baseWord">The base word to be modified.</param>
      <param name="suffix">The suffix to be modified.</param>
      <param name="baseWords">The new base words to be added.</param>
      <param name="suffixes">The new suffixes to be added.</param>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader">
      <summary>
            A Helper class that helps reading a string in the reverse order and checking the
            pattern symbols in a linear time.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.ReadFirstChar(System.String)">
      <summary>
            Initializes the reading-state variables and starts by returning the first character
            in reverse order.
            </summary>
      <param name="strInput">The input string.</param>
      <exception cref="T:System.ArgumentException">If the input string is null or empty</exception>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.ReadNextChar">
      <summary>
            Reads the next character in the reverse order.
            This method does not necessarily read only one character. It may read 
            several characters if they make a symbol character. e.g. If a sequence of spaces
            are met a Space-Plus symbol is returned instead of them.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.HasMoreChars">
      <summary>
            Determines whether there are characters left that are not read yet.
            </summary>
      <returns>
        <c>true</c> if there are characters left that are not read yet; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.GetCurrentIndex">
      <summary>
            Gets the index at which the string has been read so far.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.ReadChar">
      <summary>
            Reads the next character in the reverse order. This method is 
            aware of <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher" />'s special symbols, and returns 
            those symbols if the characters at the input string match the symbol.
            This method does not necessarily read only one character. It may read 
            several characters if they make a symbol character. e.g. If a sequence of spaces
            are met a Space-Plus symbol is returned instead of them.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode">
      <summary>
            Holds ending patterns, and provide the means for reading their content character
            by character, and makes it easy to enable and disable each node.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode" /> class.
            </summary>
      <param name="pattern">The pattern.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.Reset">
      <summary>
            Resets this instance, by setting Finished to false, and the reading index to 0.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.GetChar">
      <summary>
            Gets the current character.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type. 
            The comparison is made based upon the nodes' pattern strings only.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
            The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj" />. 
            Zero This instance is equal to <paramref name="obj" />. 
            Greater than zero This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.CreateSearchNodeList(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Returns a sequence of search node list created from the specified ending-patterns.
            </summary>
      <param name="listPatterns">The list of ending-patterns.</param>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.Finished">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode" /> is 
            finished with being active in the list. A node is called Finished when its input is
            read completely or the input has no chance of matching the input string.
            </summary>
      <value>
        <c>true</c> if finished; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.Pattern">
      <summary>
            Gets or sets the pattern.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolHalfSpace">
      <summary>
            The character used to indicate a single half-space
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolHalfSpaceQuestionMark">
      <summary>
            The character used to indicate an optional half-space
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolSpacePlus">
      <summary>
            The character used to indicate one or more space characters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolSpaceStar">
      <summary>
            The character used to indicate zero or more space characters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolSpaceOrHalfSpace">
      <summary>
            The character used to indicate either space or half-space character
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolSpaceOrHalfSpacePlus">
      <summary>
            The character used to indicate one or more space or half-space characters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolSpaceOrHalfSpaceStar">
      <summary>
            The character used to indicate zero or more space or half-space characters
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.HalfSpace">
      <summary>
            The standard half-space character used in Persian
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.m_listEndingPatterns">
      <summary>
            List of patterns that should be checked in the end of each input
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.m_listSearchNodes">
      <summary>
            List of search node which provide the means for reading from each ending pattern
            character by character or disable each node during the process.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.m_reverseStringReader">
      <summary>
            An instance of the <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader" /> class that helps 
            reading a string content in reverse order in linear time.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.m_postProcessRule">
      <summary>
            The delegate to post processing rules
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SetEndingPatterns(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Sets the ending patterns from the sequence of strings provided.
            </summary>
      <param name="patterns">The sequence of patterns to add.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.AddEndingPattern(System.String,System.Boolean)">
      <summary>
            Adds all possible pattern-combinations of an ending-pattern string
            to the list of ending patterns.
            </summary>
      <param name="pattern">The pattern string to add</param>
      <param name="checkDuplicates">if set to <c>true</c> checks duplicate patterns.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.AddAtomicEndingPattern(System.String,System.Boolean)">
      <summary>
            Adds the ending pattern directly to the list of ending-patterns if it
            has not been already added.
            </summary>
      <param name="pattern">The pattern to add.</param>
      <param name="checkDuplicates">if set to <c>true</c> checks duplicate patterns.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.GeneratePossiblePatterns(System.String)">
      <summary>
            Generates all possible non-optional patterns from a given pattern.
            e.g. A(Space*)B  --&gt; AB , A(Space+)B
            </summary>
      <param name="pat">The input pattern.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseString(System.String)">
      <summary>
            Reverses the specified string.
            </summary>
      <param name="str">The string to reverse.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.AreCharactersEqual(System.Char,System.Char)">
      <summary>
            Determines whether the character from the pattern string can be
            equal to the character from the input string. The pattern string 
            can contain regex symbol characters. e.g. A space character can be 
            equal to Space+ symbol.
            </summary>
      <param name="chPattern">The character from pattern string.</param>
      <param name="chInput">The character from input string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ResetSearchNodes">
      <summary>
            Resets the search nodes at the start of each pattern-matching operation.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SetPostProcessRule(SCICT.NLP.Utility.Parsers.ReversePatternMatcher.PostProcessRule)">
      <summary>
            Sets the post process rule. The rule is passed in the form of a delagate.
            </summary>
      <param name="ruleMethod">The post process rule method.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.Match(System.String)">
      <summary>
            Matches the input string with the ending patterns provided before and returns a
            sequence of <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo" /> objects which will hold information of the matched pattern.
            </summary>
      <param name="input">The input.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.Match(System.String,System.Boolean)">
      <summary>
            Matches the input string with the ending patterns provided before and returns a
            sequence of <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo" /> objects which will hold information of the matched pattern.
            </summary>
      <param name="input">The input.</param>
      <param name="uniqueResults">if set to <c>true</c> returns unique results only.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.IsOptionalSymbol(System.Char)">
      <summary>
            Determines whether the specified symbolic character is an optional symbol. 
            Optional symbols are those that can occur or not, for example 
            star and question mark closures make a symbol optional.
            Here optional symbols are:
            <code>
                SymbolHalfSpaceQuestionMark
                SymbolSpaceOrHalfSpaceStar
                SymbolSpaceStar
            </code></summary>
      <param name="ch">The character to check</param>
      <returns>
        <c>true</c> if the specified symbolic character is an optional symbol; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.NonOptionalSymbolFor(System.Char)">
      <summary>
            Returns the non-optional version of the specified symbolic character if it is
            an optional symbolic character. 
            e.g. Non-optional version for Space-Star is Space-Plus.
            </summary>
      <param name="ch">The character to process</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo">
      <summary>
            Holds information about the outputs from <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher" />.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo" /> class.
            It also applies some (hard-coded) word construction rules to the words.
            </summary>
      <param name="baseWord">The stem of the word.</param>
      <param name="suffix">The affix.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo.BaseWord">
      <summary>
            Gets or sets the body of the word.
            </summary>
      <value>The body of the word.</value>
    </member>
    <member name="P:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo.Suffix">
      <summary>
            Gets or sets the suffix part of the word.
            </summary>
      <value>The Suffix.</value>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.WordReadingUtility">
      <summary>
            Helps reading words inside a string in linear time.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.Parsers.WordReadingUtility.CharState">
      <summary>
            Current State of characters currently being parsed
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.Parsers.WordReadingUtility.ReadWords(System.String,System.Boolean)">
      <summary>
            Reads the words from the input string and returns a sequence of words. 
            The <paramref name="isHalfSpaceADelim" /> parameter specifies that the half-space 
            character is considered as word-delimiter, or is considered as a typical character
            that can occur inside a word.
            </summary>
      <param name="input">The input string.</param>
      <param name="isHalfSpaceADelim">if set to <c>true</c> the half-space character is considered as a word delimiter.</param>
      <returns>The sequence of words inside the input string.</returns>
    </member>
    <member name="T:SCICT.NLP.Utility.PersianSentenceTokenizer">
      <summary>
             A sentence tokenizer for the Persian language.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.PersianSentenceTokenizer.EndOfLine">
      <summary>
            The order in the following definition is important
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.PersianSentenceTokenizer.Tokenize(System.String)">
      <summary>
            Tokenizes the specified string into sentences.
            </summary>
      <param name="s">The string to extract sentences from.</param>
      <returns>
      </returns>
    </member>
    <member name="F:SCICT.NLP.Sentence.m_tags">
      <summary>
            Key: tag name; Value: per token array of tag objects
            </summary>
    </member>
    <member name="M:SCICT.NLP.Sentence.GetTagAt(System.Int32,System.String)">
      <summary>
            Get the tag for the specified token. 
            If the token is not already tagged, tries to find the proper tagger and calls it.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Sentence.GetTagAt``1(System.Int32,System.String)">
      <summary>
            Get the tag for the specified token.
            If the token is not already tagged, tries to find the proper tagger and calls it.
            </summary>
      <typeparam name="T">type of the tagger to perform type-casting.</typeparam>
      <param name="tokenIndex">Index of the token.</param>
      <param name="tagName">Name of the tag.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Sentence.GetTagAtNonWhitespace``1(System.Int32,System.String)">
      <summary>
            Gets the tag at non whitespace.
            </summary>
      <typeparam name="T">type of the tagger to perform type-casting.</typeparam>
      <param name="tokenIndex">Index of the token in an array of only non-whitespace tokens.</param>
      <param name="tagName">Name of the tag.</param>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.NLP.Sentence.Tokens">
      <summary>
            Gets the tokens array (containing words, spaces, and punctuations).
            </summary>
    </member>
    <member name="P:SCICT.NLP.Sentence.NonWhitespaceTokens">
      <summary>
            Gets the non whitespace tokens (containing words and punctuations only).
            </summary>
    </member>
    <member name="T:SCICT.NLP.TokenInfo">
      <summary>
            This class must remain immutable
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.StringUtil">
      <summary>
            String Utility Class, with special focus on Persian and Arabaic characters.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringUtil.s_persianCharFilter">
      <summary>
            A static reference to an instance of <see cref="T:SCICT.NLP.Persian.PersianCharFilter" /> class.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.StringUtil.OneLetterPinglishWords">
      <summary>
            The characters who (may) represent a whole word in pinglish.
            </summary>
      <remarks>All characters are in lowercase.</remarks>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ReplaceAllRegex(System.String,System.String,System.String)">
      <summary>
            Replaces all matches of the given regex pattern with the specified replacement pattern.
            </summary>
      <param name="str">The string to search and replace in.</param>
      <param name="regex">The regex pattern to be searched.</param>
      <param name="with">The string (or pattern) to be replaced.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ReplaceAllRegex(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Replaces all matches of the given regex pattern with the specified replacement pattern.
            </summary>
      <param name="str">The string to search and replace in.</param>
      <param name="regex">The regex pattern to be searched.</param>
      <param name="with">The string (or pattern) to be replaced.</param>
      <param name="ignoreCase">Specifies whether the character casing should be ignored.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ReplaceFirstRegex(System.String,System.String,System.String)">
      <summary>
            Replaces the first instance of the found regex pattern with the specified replacement pattern.
            </summary>
      <param name="str">The string to search and replace in.</param>
      <param name="regex">The regex pattern to be searched.</param>
      <param name="with">The string (or pattern) to be replaced.</param>
      <param name="ignoreCase">Specifies whether the character casing should be ignored.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ReplaceFirstRegex(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Replaces the first instance of the found regex pattern with the specified replacement pattern.
            </summary>
      <param name="str">The string to search and replace in.</param>
      <param name="regex">The regex pattern to be searched.</param>
      <param name="with">The string (or pattern) to be replaced.</param>
      <param name="ignoreCase">Specifies whether the character casing should be ignored.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ReplaceLastRegex(System.String,System.String,System.String)">
      <summary>
            Replaces the last instance of the regex pattern found in the given string
            with the specified replacement pattern.
            </summary>
      <param name="str">The string to search and replace in.</param>
      <param name="regex">The regex pattern to be searched.</param>
      <param name="with">The string (or pattern) to be replaced.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.MatchesRegex(System.String,System.String)">
      <summary>
            Specified whether the given string matcheses the given regex pattern.
            </summary>
      <param name="str">The string to search and replace in.</param>
      <param name="pattern">The regex pattern to be searched.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.MatchesRegex(System.String,System.String,System.Boolean)">
      <summary>
            Specified whether the given string matcheses the given regex pattern.
            </summary>
      <param name="str">The string to search and replace in.</param>
      <param name="pattern">The regex pattern to be searched.</param>
      <param name="ignoreCase">Specifies whether the character casing should be ignored.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ExtractNonArabicContent(System.String)">
      <summary>
            Extracts the non arabic content. The return value includes none of the 
            arabic characters in the input string.
            </summary>
      <param name="word">The word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FirstWordCharIndex(System.String)">
      <summary>
            Returns the index of the first word-character in the given string.
            It skips the white-space and pseudo-spaces ocurring at the begginning of the string
            and returns the index of the first instance of the non-space character.
            </summary>
      <param name="word">The word.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.LastWordCharIndex(System.String)">
      <summary>
            Returns the index of the last word-character in the given string.
            It skips the white-space and pseudo-spaces ocurring at the end of the string
            and returns the index of the last instance of the non-space character.
            </summary>
      <param name="word">The word.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsWhiteSpace(System.Char)">
      <summary>
            Determines whether is white space the specified character.
            </summary>
      <param name="ch">The character.</param>
      <returns>
        <c>true</c> if the specified character is white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.MakeStringVisible(System.String)">
      <summary>
            Returns a visible version of the string, by making
            its whitespace and control characters visible
            using well known escape sequences, or the equivalant 
            hexa decimal value.
            </summary>
      <param name="str">The string to be made visible.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsWhiteSpace(System.String)">
      <summary>
            Determines whether the specified string includes only white space characters.
            </summary>
      <param name="word">The input string.</param>
      <returns>
        <c>true</c> if the specified string contains only white space characters; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.TrimWithControlChars(System.String)">
      <summary>
            Trims a string, by removing whitespace chars as well as control chars.
            </summary>
      <param name="word">The word to trim.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.TrimStartWithControlChars(System.String)">
      <summary>
            Trims the start of the string, by removing whitespace chars as well as control chars.
            </summary>
      <param name="word">The word to trim.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.TrimEndWithControlChars(System.String)">
      <summary>
            Trims end of the string, by removing whitespace chars as well as control chars.
            </summary>
      <param name="word">The word to trim.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.TrimOnlyControlChars(System.String)">
      <summary>
            Trims a string only considering control chars.
            i.e. it does not remove whitespace chars.
            </summary>
      <param name="word">The word to trim.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.TrimStartOnlyControlChars(System.String)">
      <summary>
            Trims the start of a string only considering control chars.
            i.e. it does not remove whitespace chars.
            </summary>
      <param name="word">The word to trim.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.TrimEndOnlyControlChars(System.String)">
      <summary>
            Trims the end of a string only considering control chars.
            i.e. it does not remove whitespace chars.
            </summary>
      <param name="word">The word to trim.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.TrimStartArabicWord(System.String)">
      <summary>
            Trims the beginning of the arabic word. It trims and removes leading white-spaces,
            together with the half spaces.
            TrimStart means Trim-Left in English (i.e. Left to Right) Context.
            </summary>
      <param name="word">The input word</param>
      <returns>The input string that its beginning characters has been trimmed.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.TrimEndArabicWord(System.String)">
      <summary>
            Trims the end of an Arabic word. It trims and removes trailing white-spaces,
            together with the half spaces.
            TrimEnd means trim-right in English (i.e. Left to Right) context.
            </summary>
      <param name="word">The word.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.TrimEndArabicWord(System.String,System.Int32@)">
      <summary>
            Trims the end of an Arabic word. It trims and removes trailing white-spaces,
            together with the half spaces.
            TrimEnd means trim-right in English (i.e. Left to Right) context.
            </summary>
      <param name="word">The word.</param>
      <param name="numChanges">The number of changes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.NormalizeSpacesAndHalfSpacesInWord(System.String)">
      <summary>
            Normalizes the spaces and half spaces in word.
            It trims the word, removes trailing and leading spaces and half-spaces,
            and replaces multiple occurrences of half-spaces with only one half-space.
            Also half-spaces right after Persian/Arabic separate characters are removed.
            For example, half spaces after "Daal" are completely removed.
            </summary>
      <param name="word">The word</param>
      <returns>The normalized copy of the input string.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.NormalizeSpacesAndHalfSpacesInWord(System.String,System.Int32@)">
      <summary>
            Normalizes the spaces and half spaces in word.
            It trims the word, removes trailing and leading spaces and half-spaces,
            and replaces multiple occurrences of half-spaces with only one half-space.
            Also half-spaces right after Persian/Arabic separate characters are removed.
            For example, half spaces after "Daal" are completely removed.
            </summary>
      <param name="word">The word</param>
      <param name="numChanges">The number of changes made.</param>
      <returns>The normalized copy of the input string.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.WordCountTillIndex(System.String,System.Int32,System.Boolean)">
      <summary>
            returns the number of words that can be counter until we reach the given index.
            This can be done ignoring erabs (and mid-word spaces) or not.
            If <code>includeErabs</code> is true, the counting occurs normally, otherwise it is 
            assumed that we want to count in the refined version of the input string. In this case 
            the input string might contain erabs and mid-word spaces, but we assume that <code>index</code>
            is provided from a refined version of this string, so the method ignores erabs and mid-word
            spaces while counting.
            </summary>
      <param name="exp">input string</param>
      <param name="index">if <code>includeErabs</code> is true index in the given string,
            otherwise index in the refined version of the string</param>
      <param name="includeErabs">if true counts erabs and mid-word spaces as characters, 
            otherwise works as if erabs and mid-word spaces do not exist, index is also
            passed to the function from a refined version of the string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.WordCountTillIndex(System.String,System.Int32)">
      <summary>
            Returns the number of word in the expression in which or before which the index occurs
            Since it is a count it can be regarded as a 1-based index.
            [Seemingly this method is not used]
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.WordStartIndex(System.String,System.Int32)">
      <summary>
            returns the start index of the nth word in the expression
            if the expression contains less word than n then the function returns -1
            by word we mean characters between two whitespaces. e.g. "[123]" is one word
            and "[ 123]" is two words.
            </summary>
      <param name="exp">The input string</param>
      <param name="n">0-based index of the word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.WordEndIndex(System.String,System.Int32)">
      <summary>
            returns the end index of the nth word in the expression
            if the expression contains less words than n then the function returns -1
            by word we mean characters between two whitespaces. e.g. "[123]" is one word
            and "[ 123]" is two words.
            </summary>
      <param name="exp">The input string</param>
      <param name="n">0-based index of the word</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsInArabicWord(System.Char)">
      <summary>
            Determines whether a character can be observed inside an Arabic word.
            i.e. if it is Arabic Letter or Erab or Haf Space or Mid-word Space
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsArabicWord(System.String)">
      <summary>
            Determines whether the specified string is all consisting of arabic letters.
            </summary>
      <param name="str">The string.</param>
      <returns>
        <c>true</c> if the specified string is all consisting of arabic letters; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.RemoveMidWordSpace(System.String)">
      <summary>
            Removes the middle word spaces. Middle word spaces are characters that happen 
            in the middle of a word, but does not count as a word constructive character.
            e.g. مــــــن vs. من
            </summary>
      <param name="word">The input word</param>
      <returns>A copy of the input string with its mid-word-spaces removed.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsMidNumberChar(System.Char)">
      <summary>
            Determines whether the specified character can occur in the middle of a number.
            This does not include digits. E.g. 'e' can happen in a scientific form number, or 
            '.' and '/' are English and Persian/Arabic floating points respectively.
            </summary>
      <param name="ch">The character</param>
      <returns>
        <c>true</c> if the specified character can occur in the middle of a number; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.RemoveErab(System.String)">
      <summary>
            Removes the erab characters from the input string except tashdid and fathatan
            </summary>
      <param name="word">The word to remove erab from</param>
      <returns>The copy of the input string with its erab removed</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.RemoveErabIncludingFathatan(System.String)">
      <summary>
            Removes the erab characters from the input string including tashdid and fathatan
            </summary>
      <param name="word">The word to remove erab from</param>
      <returns>The copy of the input string with its erab removed</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.RefineAndFilterPersianChar(System.Char)">
      <summary>
            Refines and filters Persian char. If the character is Erab or Mid-Word-Space it is removed.
            If it is a non standard Persian character it is replaced with its standard equivalant char(s).
            </summary>
      <param name="ch">The character</param>
      <returns>A string containing the standard equivalant of the input character; or an empty string
            if the charactered is either erab or mid-word-space character.</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.RefinePersianWord(System.String)">
      <summary>
            Trims and normalizes spaces and half-spaces and removes both Erab and Mid-Spaces.
            It does NOT apply Persian Char Filters.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsNonStickingPersianChar(System.Char)">
      <summary>
            Determines whether the specified character is a non-sticking persian character, 
            such as "و", "ر" and so on.
            </summary>
      <param name="ch">The character to inspect.</param>
      <returns>
        <c>true</c> if the specified character is a non-sticking persian character; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.OldIndexInRefinedString(System.String,System.Int32)">
      <summary>
            What would be the char index in the refined version of the string
            </summary>
      <param name="str">The not refined string; string should be trimmed beforehand.</param>
      <param name="index">index in the not refined string</param>
      <returns>corresponding index in the refined string</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.OldIndexInNotRefinedStringOld(System.String,System.Int32)">
      <summary>
            Gets the char index in the original not-refined version of the refined string
            </summary>
      <param name="strNotRefined">The NOT refined string; string should be trimmed beforehand.</param>
      <param name="indexInRefined">index in the refined string</param>
      <returns>corresponding index in the not refined string</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IndexInNotFilterAndRefinedString(System.String,System.Int32)">
      <summary>
            Gets the char index in the original not-refined version of the refined string
            </summary>
      <param name="strNotRefined">The NOT refined string; string should be trimmed beforehand.</param>
      <param name="indexInRefined">index in the refined string</param>
      <returns>corresponding index in the not refined string</returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.RefineAndFilterPersianWord(System.String)">
      <summary>
            Trims and normalizes spaces and half-spaces and removes both Erab and Mid-Spaces
            and applies Persian Char Filters.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.OldRefineAndFilterPersianWord(System.String)">
      <summary>
            Trims and normalizes spaces and half-spaces and removes both Erab and Mid-Spaces
            and applies Persian Char Filters.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FilterPersianWord(System.String)">
      <summary>
            Filters the characters in the word, e.g. replaces non-standard Kaaf, and Yaa
            and half-spaces with the standard version.
            It does NOT remove erabs or mid-word-spaces.
            </summary>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FilterPersianWord(System.String,SCICT.NLP.Persian.FilteringCharacterCategory)">
      <summary>
            Filters the persian word, ignoring some categories.
            </summary>
      <param name="word">The word</param>
      <param name="ignoreCats">The categories to IGNORE</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FilterPersianWord(System.String,System.Collections.Generic.HashSet{System.Char})">
      <summary>
            Filters the Persian word, ignoring a set of characters.
            </summary>
      <param name="word">The word</param>
      <param name="ignoreList">The set of characters to be ignored.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FilterPersianWord(System.String,System.Collections.Generic.HashSet{System.Char},SCICT.NLP.Persian.FilteringCharacterCategory)">
      <summary>
            Filters the Persian word, ignoring a set of characters, and ignoring some categories.
            </summary>
      <param name="word">The word</param>
      <param name="ignoreList">The set of characters to be ignored.</param>
      <param name="ignoreCats">The categories to IGNORE</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FilterPersianWordWithStats(System.String,System.Collections.Generic.HashSet{System.Char},SCICT.NLP.Persian.FilteringCharacterCategory)">
      <summary>
            Filters the given string with the given options while returning the filtered string as well as filtering statistics.
            </summary>
      <param name="str">The string to filter.</param>
      <param name="ignoreList">list of characters to ignore.</param>
      <param name="ignoreCats">The character-categories to ignore.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ConvertShortHeYeToLong(System.String)">
      <summary>
            Converts the instanecs of short HeYe to long.
            </summary>
      <param name="word">The word to change.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.NormalizeShortHeYe(System.String)">
      <summary>
            Normalizes instances of short-heye. It does not convert short HeYe's to long.
            It only normalizes instances of short-HeYe writings to the standard form.
            </summary>
      <param name="word">The word to change.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.UnicodeNormalize(System.String)">
      <summary>
            Returns a new string whose textual value is the same as input string, but whose binary representation is in Unicode normalization form C.
            </summary>
      <param name="word">A string instance to be normalized</param>
      <remarks>It's just a wrapper over the Normalize method of .NET</remarks>
      <returns>
            A new, normalized string whose textual value is the same as input string, but whose binary representation is in normalization form C.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.UnicodeNormalize(System.String,System.Text.NormalizationForm)">
      <summary>
             Returns a new string whose textual value is the same as input string, but whose binary representation is in the specified Unicode normalization form.
             </summary>
      <param name="word">A string instance to be normalized</param>
      <param name="normalizationForm">A Unicode normalization form. </param>
      <returns>A new string whose textual value is the same as input string, but whose binary representation is in the normalization form specified by the <paramref name="normalizationForm" /> parameter. 
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ConvertLongHeYeToShort(System.String)">
      <summary>
            Converts instance of long HeYe to short.
            </summary>
      <param name="word">The word to change.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.NormalizeLongHeYe(System.String)">
      <summary>
            Normalizes instances of long-heye. It does not convert long HeYe's to short.
            It only normalizes instances of long-HeYe writings to the standard form.
            </summary>
      <param name="word">The word to change.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsArabicLetter(System.Char)">
      <summary>
            Determines whether the specified character is an Arabic letter.
            </summary>
      <param name="ch">The character</param>
      <returns>
        <c>true</c> if the specified character is an Arabic letter; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsYe(System.Char)">
      <summary>
            Determines whether the specified character is a form of Ye character, either standard, or non-standard.
            </summary>
      <param name="ch">The character to check.</param>
      <returns>
        <c>true</c> if the specified character is Ye; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsHalfSpace(System.Char)">
      <summary>
            Determines whether the specified character is a half-space character.
            </summary>
      <param name="ch">The character</param>
      <returns>
        <c>true</c> if the specified character is a half-space character; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsHalfSpace(System.String)">
      <summary>
            Determines whether the specified string is all made up of half-space characters.
            </summary>
      <param name="str">The string to test.</param>
      <returns>
        <c>true</c> if the specified string is all made up of half-space character; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsMidWordSpace(System.Char)">
      <summary>
            Determines whether the specified character, is mid-word-space.
            </summary>
      <param name="ch">The ch.</param>
      <returns>
        <c>true</c> if the specified character, is mid-word-space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsArabicScriptDigit(System.Char)">
      <summary>
            Determines whether the specified character is an Arabic or Persian digit.
            </summary>
      <param name="ch">The character</param>
      <returns>
        <c>true</c> if the specified character is an Arabic or Persian digit; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsPersianDigit(System.Char)">
      <summary>
            Determines whether the specified character is a Persian digit.
            </summary>
      <param name="ch">The character</param>
      <returns>
        <c>true</c> if the specified character is a Persian digit; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsEnglishDigit(System.Char)">
      <summary>
            Determines whether the specified character is an English digit.
            </summary>
      <param name="ch">The character</param>
      <returns>
        <c>true</c> if the specified character is an English digit; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsArabicDigit(System.Char)">
      <summary>
            Determines whether the specified character is an Arabic digit.
            </summary>
      <param name="ch">The character</param>
      <returns>
        <c>true</c> if the specified character is an Arabic digit; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsNumberInPersianDigits(System.String)">
      <summary>
            Determines whether the specified string containing a number in digits is completely 
            written in Persian digits.
            </summary>
      <param name="str">The string containing number</param>
      <returns>
        <c>true</c> if the specified string containing a number in digits is completely 
            written in Persian digits, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsArabicPunctuation(System.Char)">
      <summary>
            Determines whether the specified character is Arabic punctuation.
            </summary>
      <param name="ch">The ch.</param>
      <returns>
        <c>true</c> if the specified character is Arabic punctuation; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsParagraphDelimiter(System.Char)">
      <summary>
            Determines whether the specified character is an MS-Word paragraph delimiter.
            </summary>
      <param name="ch">The character</param>
      <returns>
        <c>true</c> if the specified character is an MS-Word paragraph delimiter; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsSentenceDelimiter(System.Char)">
      <summary>
            Determines whether the specified character is sentence delimiter.
            </summary>
      <param name="ch">The character</param>
      <returns>
        <c>true</c> if the specified character is sentence delimiter; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsErabSign(System.Char)">
      <summary>
            Determines whether the specified character is an erab sign.
            </summary>
      <param name="ch">The character</param>
      <returns>
        <c>true</c> if the specified character is an erab sign; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsErabSignExceptFathatan(System.Char)">
      <summary>
            Determines whether the specified character is an erab sign except fathatan.
            </summary>
      <param name="ch">The character to check.</param>
      <returns>
        <c>true</c> if the specified character is an erab sign except fathatan; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.StringStartsWithOneOf(System.String,System.String)">
      <summary>
            Determines whether the specified string starts 
            with one of the characters in the second string.
            </summary>
      <param name="str">The string to be processed</param>
      <param name="chars">The string containing characters to be compared against</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.StringIsASentenceDelim(System.String)">
      <summary>
            Determines whether a string is a sentence delimiter.
            </summary>
      <param name="str">The string.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.StringIsAParagraphDelim(System.String)">
      <summary>
            Determines whether a string is a paragraph delimiter.
            </summary>
      <param name="str">The string.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ExtractPersianSentences(System.String)">
      <summary>
            Extracts the persian sentences.
            Note that the sentences are neither trimmed nor normalized.
            </summary>
      <param name="text">The text to extract sentences from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsWordDelimiter(System.Char)">
      <summary>
            Determines whether the specified character, is word delimiter.
            </summary>
      <param name="ch">The character</param>
      <returns>
        <c>true</c> if the specified character, is word delimiter; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ExtractPersianWordsBase(System.String,System.Boolean)">
      <summary>
            The base method that extracts the Persian words from a string of words.
            </summary>
      <param name="line">The string of words.</param>
      <param name="useCharFilter">if set to <c>true</c> uses Persian char 
            filter to refine the extracted words.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ExtractPersianWords(System.String)">
      <summary>
            Extracts the Persian words, without applying Persian word filters to them.
            </summary>
      <param name="line">The string of words.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ExtractPersianWordsStandardized(System.String)">
      <summary>
            Extracts the Persian words, and applies Persian word filters to them.
            </summary>
      <param name="line">The string of words.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.StringIsADelim(System.String,System.Boolean)">
      <summary>
            Determines whether the specified string is a sentence or paragraph delimiter.
            </summary>
      <param name="str">The string</param>
      <param name="isParagraph">if set to <c>true</c> checks for the being paragraph, 
            otherwise checks for being sentence.</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.StringFromCodes(System.Int32[])">
      <summary>
            Gets a String by concatenating codes from parameters.
            </summary>
      <param name="charCodes">The integer char codes</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.StringContainsAny(System.String,System.Int32,System.Char[],System.Int32@)">
      <summary>
            Checks whether the specified string contains any of the characters within the
            specified character array.
            </summary>
      <param name="str">The string to check.</param>
      <param name="startIndex">The start index.</param>
      <param name="chars">The character array to look for.</param>
      <param name="index">The index of the found character or -1 if no such character is found.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.StringContainsAny(System.String,System.Char[],System.Int32@)">
      <summary>
            Checks whether the specified string contains any of the characters within the 
            specified character array.
            </summary>
      <param name="str">The string to check.</param>
      <param name="chars">The character array to look for.</param>
      <param name="index">The index of the found character or -1 if no such character is found.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.StringContainsAny(System.String,System.Char[])">
      <summary>
            Checks whether the specified string contains any of the characters within the 
            specified character array.
            </summary>
      <param name="str">The string to check.</param>
      <param name="chars">The character array to look for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsAnEnglishLetter(System.Char)">
      <summary>
            Determines whether the specified character is an English character.
            </summary>
      <param name="ch">The character</param>
      <returns>
        <c>true</c> if the specified character is an English character; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsPinglishWord(System.String)">
      <summary>
            Determines whether the specified word is a pinglish word.
            </summary>
      <param name="word">The word.</param>
      <returns>
        <c>true</c> if the specified word is pinglish word; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsSingleQuote(System.Char)">
      <summary>
            Determines whether the given character represents Single Quotation marks (or similar characters like 'Prime')
            </summary>
      <param name="ch">the character to check</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsDecimalSeparator(System.Char)">
      <summary>
            Determines whether the specified character is a decimal separator character.
            </summary>
      <param name="ch">The ch.</param>
      <returns>
        <c>true</c> if the specified character is a decimal separator character; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsThousandSeparator(System.Char)">
      <summary>
            Determines whether the specified character is thousand-separator.
            </summary>
      <param name="ch">The ch.</param>
      <returns>
        <c>true</c> if the specified character is thousand-separator; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsEndOfSentencePunctuation(System.Char)">
      <summary>
            Determines whether the specified character is an end-of-sentence punctuation.
            </summary>
      <param name="ch">The character.</param>
      <returns>
        <c>true</c> if the specified character is an end-of-sentence punctuation; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsNewLine(System.Char)">
      <summary>
            Determines whether the specified character is a new-line indicator.
            </summary>
      <param name="ch">The character.</param>
      <returns>
        <c>true</c> if the specified character is a new-line indicator; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsWhiteSpaceExceptNewLine(System.Char)">
      <summary>
            Determines whether the specified character is white-space except new line.
            </summary>
      <param name="ch">The character.</param>
      <returns>
        <c>true</c> if the specified character is white-space except new line; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsOpenningPunctuation(System.Char)">
      <summary>
            Determines whether the specified character is an openning punctuation.
            </summary>
      <param name="ch">The character to check.</param>
      <returns>
        <c>true</c> if the specified character is an openning punctuation; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsClosingPunctuation(System.Char)">
      <summary>
            Determines whether the specified character is a closing punctuation.
            </summary>
      <param name="ch">The character.</param>
      <returns>
        <c>true</c> if the specified character is a closing punctuation; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.IsSymmetricPunctuation(System.Char)">
      <summary>
            Determines whether the specified character is a symmetric punctuation.
            </summary>
      <param name="ch">The character.</param>
      <returns>
        <c>true</c> if the specified character is a symmetric punctuation; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ExtractWords(System.String)">
      <summary>
            Extracts words from the specified string of words. This is a general word extraction method.
            To extract words from Persian sentences specificaly call 
            <c>ExtractPersianWords</c> and <c>ExtractPersianWordsStandardized</c>.
            </summary>
      <param name="line">string of words to extract words from</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ExtractParagraphs(System.String)">
      <summary>
            Extracts paragraphs from a given text. "\n" and "\r" characters or both are paragraph delimiters. 
            The delimiters themselves are not returned.
            </summary>
      <param name="text">The text to extract Paragraphs from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.ExtractParagraphs(System.String,System.Boolean)">
      <summary>
            Extracts paragraphs from a given text. "\n" and "\r" characters or both are paragraph delimiters. 
            </summary>
      <param name="text">The text to extract Paragraphs from.</param>
      <param name="returnDelimiters">if <c>true</c> the paragraph delimiters are returned as a separate paragraph, 
            otherwise the delimiters are not returned.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FindAll(System.String,System.String,System.Int32[]@,System.Int32[]@)">
      <summary>
            Finds all instances of the "value" within the given string "str",
            and outputs the corresponding indices of start and end characters.
            The original value of the strings are used for search, not the
            standardized versions. The search does not respect word boundaries.
            </summary>
      <param name="str">the string to search inside</param>
      <param name="value">the string to be searched against str</param>
      <param name="inds">array of the found patterns start indices</param>
      <param name="ends">array of the found patterns end indices</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FindAllWords(System.String,System.String,System.Int32[]@,System.Int32[]@)">
      <summary>
            Finds all instances of the "value" within the given string "str",
            and outputs the corresponding indices of start and end characters.
            The original value of the strings are used for search, not the
            standardized versions. The search does respects word boundaries.
            </summary>
      <param name="str">the string to search inside</param>
      <param name="value">the string to be searched against str</param>
      <param name="inds">array of the found patterns start indices</param>
      <param name="ends">array of the found patterns end indices</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FindAllCaseInsensitive(System.String,System.String,System.Int32[]@,System.Int32[]@)">
      <summary>
            Finds all instances of the "value" within the given string "str",
            ignoring the character case, and outputs the corresponding indices 
            of start and end characters.
            The original value of the strings are used for search, not the
            standardized versions. The search does not respect word boundaries.
            </summary>
      <param name="str">the string to search inside</param>
      <param name="value">the string to be searched against str</param>
      <param name="inds">array of the found patterns start indices</param>
      <param name="ends">array of the found patterns end indices</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FindAllWordsCaseInsensitive(System.String,System.String,System.Int32[]@,System.Int32[]@)">
      <summary>
            Finds all instances of the "value" within the given string "str",
            ignoring the character case, and outputs the corresponding indices 
            of start and end characters.
            The original value of the strings are used for search, not the
            standardized versions. The search respects word boundaries.
            </summary>
      <param name="str">the string to search inside</param>
      <param name="value">the string to be searched against str</param>
      <param name="inds">array of the found patterns start indices</param>
      <param name="ends">array of the found patterns end indices</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FindAllStandardized(System.String,System.String,System.Int32[]@,System.Int32[]@)">
      <summary>
            Finds all instances of the "value" within the given string "str",
            and outputs the corresponding indices of start and end characters.
            The standardized value of the strings are used for search. 
            The search does not respect word boundaries.
            </summary>
      <param name="str">the string to search inside</param>
      <param name="value">the string to be searched against str</param>
      <param name="inds">array of the found patterns start indices</param>
      <param name="ends">array of the found patterns end indices</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FindAllWordsStandardized(System.String,System.String,System.Int32[]@,System.Int32[]@)">
      <summary>
            Finds all word instances with the content of "value" within the given 
            string "str", and outputs the corresponding indices of start and end characters.
            The standardized value of the strings are used for search. 
            The search does respects word boundaries.
            </summary>
      <param name="str">the string to search inside</param>
      <param name="value">the word content to be searched against str</param>
      <param name="inds">array of the found patterns start indices</param>
      <param name="ends">array of the found patterns end indices</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FindAllRegexp(System.String,System.String,System.Int32[]@,System.Int32[]@)">
      <summary>
            Finds all instances of the regular expression pattern within the given string "str",
            and outputs the corresponding indices of start and end characters.
            The original value of the strings are used for search, not the standardized version. 
            The search does not respect word boundaries.
            </summary>
      <param name="str">the string to search inside</param>
      <param name="regexp">the regexp pattern to be searched against str</param>
      <param name="inds">array of the found patterns start indices</param>
      <param name="ends">array of the found patterns end indices</param>
    </member>
    <member name="M:SCICT.NLP.Utility.StringUtil.FindAllRegexpStandardized(System.String,System.String,System.Int32[]@,System.Int32[]@)">
      <summary>
            Finds all instances of the regular expression pattern within the given string "str",
            and outputs the corresponding indices of start and end characters.
            The standardized value of the strings are used for search. 
            The search does not respect word boundaries.
            </summary>
      <param name="str">the string to search inside</param>
      <param name="regexp">the regexp pattern to be searched against str</param>
      <param name="inds">array of the found patterns start indices</param>
      <param name="ends">array of the found patterns end indices</param>
    </member>
    <member name="F:SCICT.NLP.Utility.WordTokenizerOptions.ReturnWhitespacesCharacterByCharacter">
      <summary>
            Returns whitespace chunks character by character instead of returning them all in a single token.
            </summary>
    </member>
    <member name="F:SCICT.NLP.Utility.WordTokenizerOptions.ReturnPunctuationsCharacterByCharacter">
      <summary>
            Returns punctuation chunks character by character instead of returning them all in a single token.
            </summary>
    </member>
    <member name="T:SCICT.NLP.Utility.WordTokenizer">
      <summary>
            A general purpose (English, or Persian), customizable, and fast word tokenizer
            </summary>
    </member>
    <member name="T:SCICT.Utility.IO.FileTools">
      <summary>
             Generic tools for filing
            </summary>
    </member>
    <member name="M:SCICT.Utility.IO.FileTools.GetWordStartPositionInFile(System.IO.FileStream,System.String)">
      <summary>
            Find the position (byte index) of the given word in the specified stream.
            </summary>
      <param name="fstream">
      </param>
      <param name="word">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Utility.IO.FileTools.RemoveLineFromPosition(System.IO.FileStream,System.Int64)">
      <summary>
             Remove a line from file
            </summary>
      <param name="fstream">Opened file stream</param>
      <param name="position">position of line</param>
    </member>
    <member name="T:SCICT.Utility.IO.DictionaryLoader">
      <summary>
             Load dictionary file
            </summary>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryLoader.LoadFile(System.String)">
      <summary>
             Load file
            </summary>
      <param name="fileName">File name</param>
      <returns>True if suucessfully loade, otherwise False</returns>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryLoader.NextLine(System.String@)">
      <summary>
             Get next line
            </summary>
      <param name="line">Line contents</param>
      <returns>True if not EOF, False on EOF</returns>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryLoader.CloseFile">
      <summary>
            Close Stream Reader
            </summary>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryLoader.AddLine(System.String)">
      <summary>
             Add a term to dictionary
            </summary>
      <param name="line">word</param>
      <returns>True if word successfully added, otherwise False</returns>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryLoader.AddLine(System.String,System.String)">
      <summary>
             Add a term to dictionary
            </summary>
      <param name="line">word</param>
      <param name="fileName">File name</param>
      <returns>True if word successfully added, otherwise False</returns>
    </member>
    <member name="P:SCICT.Utility.IO.DictionaryLoader.EndOfStream">
      <summary>
             End of Stream
            </summary>
    </member>
    <member name="T:SCICT.Utility.IO.DictionaryWordLoader">
      <summary>
             Load words from dictionary file
            </summary>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryWordLoader.NextTerm(System.String@)">
      <summary>
             Next dictionary term
            </summary>
      <param name="word">Extracted word</param>
      <returns>True if word successfully extracted, False if EOF</returns>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryWordLoader.AddTerm(System.String)">
      <summary>
             Add a term to dictionary
            </summary>
      <param name="word">word</param>
      <returns>True if word successfully added, otherwise False</returns>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryWordLoader.AddTerm(System.String,System.String)">
      <summary>
             Add a term to dictionary
            </summary>
      <param name="word">word</param>
      <param name="fileName">File name</param>
      <returns>True if word successfully added, otherwise False</returns>
    </member>
    <member name="T:SCICT.Utility.IO.DictionaryWordFreqLoader">
      <summary>
             Load words and usage frequency from dictionary file
            </summary>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryWordFreqLoader.NextTerm(System.String@,System.Int32@)">
      <summary>
             Pars line's content
            </summary>
      <param name="word">Extracted word</param>
      <param name="freq">Extracted word's usage frequency</param>
      <returns>True if word successfully extracted, otherwise False</returns>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryWordFreqLoader.AddTerm(System.String,System.Int32)">
      <summary>
             Add a term to dictionary
            </summary>
      <param name="word">word</param>
      <param name="freq">word's usage frequency</param>
      <returns>True if word successfully added, otherwise False</returns>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryWordFreqLoader.AddTerm(System.String,System.Int32,System.String)">
      <summary>
             Add a term to dictionary
            </summary>
      <param name="word">word</param>
      <param name="freq">word's usage frequency</param>
      <param name="fileName">File name</param>
      <returns>True if word successfully added, otherwise False</returns>
    </member>
    <member name="T:SCICT.Utility.IO.DictionaryWordFreqPOSLoader">
      <summary>
             Load words, usage frequency and POS tag from dictionary file
            </summary>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryWordFreqPOSLoader.NextTerm(System.String@,System.Int32@,System.String@)">
      <summary>
             Pars line's content
            </summary>
      <param name="word">Extracted word</param>
      <param name="freq">Extracted word's usage frequency</param>
      <param name="pos">Extracted word's POS tag</param>
      <returns>True if word successfully extracted, otherwise False</returns>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryWordFreqPOSLoader.AddTerm(System.String,System.Int32,System.String)">
      <summary>
             Add a term to dictionary
            </summary>
      <param name="word">word</param>
      <param name="freq">word's usage frequency</param>
      <param name="pos">word's POS tag</param>
      <returns>True if word successfully added, otherwise False</returns>
    </member>
    <member name="M:SCICT.Utility.IO.DictionaryWordFreqPOSLoader.AddTerm(System.String,System.Int32,System.String,System.String)">
      <summary>
             Add a term to dictionary
            </summary>
      <param name="word">word</param>
      <param name="freq">word's usage frequency</param>
      <param name="pos">word's POS tag</param>
      <param name="fileName">File name</param>
      <returns>True if word successfully added, otherwise False</returns>
    </member>
    <member name="T:SCICT.Utility.Keyboard.Hotkey">
      <summary>
      </summary>
    </member>
    <member name="M:SCICT.Utility.Keyboard.Hotkey.Parse(System.String)">
      <summary>
            Parses and returns a new instance of Hotkey, from the given string
            </summary>
    </member>
    <member name="P:SCICT.Utility.Keyboard.Hotkey.Key">
      <summary>
            Gets the m_key.
            </summary>
      <value>The m_key.</value>
    </member>
    <member name="P:SCICT.Utility.Keyboard.Hotkey.Alt">
      <summary>
            Gets a value indicating whether this <see cref="T:SCICT.Utility.Keyboard.Hotkey" /> contains alt.
            </summary>
      <value>
        <c>true</c> if alt; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SCICT.Utility.Keyboard.Hotkey.Control">
      <summary>
            Gets a value indicating whether this <see cref="T:SCICT.Utility.Keyboard.Hotkey" /> contains control.
            </summary>
      <value>
        <c>true</c> if control; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SCICT.Utility.Keyboard.Hotkey.Win">
      <summary>
            Gets a value indicating whether this <see cref="T:SCICT.Utility.Keyboard.Hotkey" /> contains win.
            </summary>
      <value>
        <c>true</c> if win; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SCICT.Utility.Keyboard.Hotkey.Shift">
      <summary>
            Gets a value indicating whether this <see cref="T:SCICT.Utility.Keyboard.Hotkey" /> contains shift.
            </summary>
      <value>
        <c>true</c> if shift; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:SCICT.Utility.Keyboard.Hotkey.Modifiers">
      <summary>
            Gets the m_modifiers.
            </summary>
      <value>The m_modifiers.</value>
    </member>
    <member name="T:SCICT.Utility.Keyboard.IHotkeyEngine">
      <summary>
      </summary>
    </member>
    <member name="T:SCICT.Utility.Keyboard.HotkeyEngine">
      <summary>
      </summary>
    </member>
    <member name="M:SCICT.Utility.Keyboard.HotkeyEngine.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Utility.Keyboard.HotkeyEngine" /> class.
            </summary>
    </member>
    <member name="M:SCICT.Utility.Keyboard.HotkeyEngine.#ctor(SCICT.Utility.Keyboard.ApplicationIsActiveDelegate)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Utility.Keyboard.HotkeyEngine" /> class.
            </summary>
      <param name="applicationIsActiveDelegate">A function to determine whether application is active or not</param>
    </member>
    <member name="M:SCICT.Utility.Keyboard.HotkeyEngine.RegisterHotkey(SCICT.Utility.Keyboard.Hotkey,System.EventHandler)">
      <summary>
            Registers the hotkey.
            </summary>
      <param name="hotkey">The hotkey.</param>
      <param name="handler">The handler.</param>
      <exception cref="T:System.ArgumentException">If the given hotkey is already registered in our application.</exception>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Utility.Keyboard.HotkeyEngine.UnregisterHotkey(SCICT.Utility.Keyboard.Hotkey)">
      <summary>
            Unregisters the hotkey.
            </summary>
      <param name="hotkey">The hotkey.</param>
      <returns>
      </returns>
    </member>
    <member name="P:SCICT.Utility.Keyboard.HotkeyEngine.IsEnabled">
      <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
      <value>
        <c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:SCICT.Utility.Keyboard.KeyboardHelper.KeyCodeToChar(System.Windows.Forms.Keys)">
      <summary>
            Converts a keycode to its corresponding string representation
            </summary>
    </member>
    <member name="T:SCICT.Utility.Keyboard.SystemHotkey">
      <summary>
            Handles a System Hotkey
            </summary>
    </member>
    <member name="M:SCICT.Utility.Keyboard.SystemHotkey.InitializeComponent">
      <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="E:SCICT.Utility.Keyboard.SystemHotkey.Error">
      <summary>
      </summary>
    </member>
    <member name="T:SCICT.Utility.RTF.RTFBuilderbase">
      <summary>
            Base Class for RtfBuilder and GDF Builder
            Handles format (font , fontstyle, colour) delegating string appending to derived classes. 
            </summary>
    </member>
    <member name="F:SCICT.Utility.RTF.RTFBuilderbase._fontTable">
      <summary>
      </summary>
    </member>
    <member name="M:SCICT.Utility.RTF.RTFBuilderbase.AppendRTFDocument(System.String)">
      <summary>
            Appends the RTF document.
            </summary>
      <param name="rtf">The RTF.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Utility.RTF.RTFBuilderbase.IndexOfFont(SCICT.Utility.RTF.RTFFont)">
      <summary>
            Indexes the of font.
            </summary>
      <param name="font">The font.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Utility.RTF.RTFBuilderbase.FontStyle(System.Drawing.FontStyle)">
      <summary>
            Changes the Font Style.
            </summary>
      <param name="fontStyle">The font style.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Utility.RTF.RTFBuilderbase.IndexOf(System.Drawing.Color)">
      <summary>
            Gets the index of the Color.
            Important for merging ColorTables
            </summary>
      <param name="color">The color.</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Utility.RTF.RTFBuilderbase.InsertImage(System.Drawing.Image)">
      <summary>
            Inserts the image.
            </summary>
      <param name="image">The image.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.Utility.GDF.GDFBuilder">
      <summary>
            Graphics Based RichText Builder
            </summary>
    </member>
    <member name="T:SCICT.Utility.GDF.GDFBuilder.UnWrapped">
      <summary>
             Persists Formatting Changes on an GDFBuilder
            </summary>
    </member>
    <member name="T:SCICT.Utility.GDF.GDFBuilder.GDFCell">
      <summary>
            Cell within Table Row
            </summary>
    </member>
    <member name="T:SCICT.Utility.GDF.GDFBuilder.GDFRow">
      <summary>
            Table Row
            </summary>
    </member>
    <member name="M:SCICT.Utility.GDF.GDFBuilder.#ctor(SCICT.Utility.GDF.GDFPageManager)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Utility.GDF.GDFBuilder" /> class.
            </summary>
      <param name="manager">The manager.</param>
    </member>
    <member name="M:SCICT.Utility.GDF.GDFBuilder.AppendInternal(System.String)">
      <summary>
            Appends the internal.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="T:SCICT.Utility.RTF.IBuilderContent">
      <summary>
            Exposes an underlying RTFBuilderbase
            </summary>
    </member>
    <member name="T:SCICT.Utility.RTF.IRTFRow">
      <summary>
            Row Interface
            </summary>
    </member>
    <member name="T:SCICT.Utility.GDF.GDFDisplayBox">
      <summary>
            Displays GDF Output
            </summary>
    </member>
    <member name="F:SCICT.Utility.GDF.GDFDisplayBox.components">
      <summary> 
            Required designer variable.
            </summary>
    </member>
    <member name="M:SCICT.Utility.GDF.GDFDisplayBox.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="M:SCICT.Utility.GDF.GDFDisplayBox.InitializeComponent">
      <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
    </member>
    <member name="T:SCICT.Utility.GDF.GDFPage">
      <summary>
            Page of GDF Output
            </summary>
    </member>
    <member name="T:SCICT.Utility.GDF.GDFPageManager">
      <summary>
            Manages GDFPages
            </summary>
    </member>
    <member name="M:SCICT.Utility.RTF.RTFBuilderParser.TokenAction(System.IO.StringReader)">
      <summary>
            runs when / found
            </summary>
      <param name="sr">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.Utility.RTF.IRtfProcessor">
      <summary>
            Processor of RTF
            </summary>
    </member>
    <member name="F:SCICT.Utility.RTF.RTFAlignment.BottomCenter">
      <summary>Content is vertically aligned at the bottom, and horizontally aligned at the center.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:SCICT.Utility.RTF.RTFAlignment.BottomLeft">
      <summary>Content is vertically aligned at the bottom, and horizontally aligned on the left.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:SCICT.Utility.RTF.RTFAlignment.BottomRight">
      <summary>Content is vertically aligned at the bottom, and horizontally aligned on the right.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:SCICT.Utility.RTF.RTFAlignment.MiddleCenter">
      <summary>Content is vertically aligned in the middle, and horizontally aligned at the center.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:SCICT.Utility.RTF.RTFAlignment.MiddleLeft">
      <summary>Content is vertically aligned in the middle, and horizontally aligned on the left.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:SCICT.Utility.RTF.RTFAlignment.MiddleRight">
      <summary>Content is vertically aligned in the middle, and horizontally aligned on the right.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:SCICT.Utility.RTF.RTFAlignment.TopCenter">
      <summary>Content is vertically aligned at the top, and horizontally aligned at the center.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:SCICT.Utility.RTF.RTFAlignment.TopLeft">
      <summary>Content is vertically aligned at the top, and horizontally aligned on the left.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="F:SCICT.Utility.RTF.RTFAlignment.TopRight">
      <summary>Content is vertically aligned at the top, and horizontally aligned on the right.</summary>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:SCICT.Utility.RTF.RTFBuilder">
      <summary>
            Rich Text Generator
            </summary>
    </member>
    <member name="T:SCICT.Utility.RTF.RTFBuilder.RTFFormatWrap">
      <summary>
            Wraps RTFBuilderbase for formatting changes allowing injection of appropriate rtf codes to revert format after each Append (string) call
            </summary>
    </member>
    <member name="T:SCICT.Utility.RTF.RTFBuilder.RTFParaWrap">
      <summary>
            Wraps RtfBuilderbase injecting appropriate rtf codes after paragraph append 
            </summary>
    </member>
    <member name="T:SCICT.Utility.RTF.RTFBuilder.RTFBuilderUnWrapped">
      <summary>
            Cancels persistent Formatting Changes on an unwrapped RtfBuilder
            Exposed by the FormatLock on RtfBuilderbase
            </summary>
    </member>
    <member name="T:SCICT.Utility.RTF.RTFBuilder.RTFCell">
      <summary>
            Cell In Table Row
            </summary>
    </member>
    <member name="T:SCICT.Utility.RTF.RTFBuilder.RTFCellDefinitionBuilder">
      <summary>
            Injects Cell Rtf Codes
            </summary>
    </member>
    <member name="M:SCICT.Utility.RTF.RTFBuilder.RTFImage.GdipEmfToWmfBits(System.IntPtr,System.UInt32,System.Byte[],System.Int32,SCICT.Utility.RTF.RTFBuilder.RTFImage.EmfToWmfBitsFlags)">
      <summary>
            Use the EmfToWmfBits function in the GDI+ specification to convert a 
            Enhanced Metafile to a Windows Metafile
            </summary>
      <param name="_hEmf">
            A handle to the Enhanced Metafile to be converted
            </param>
      <param name="_bufferSize">
            The size of the buffer used to store the Windows Metafile bits returned
            </param>
      <param name="_buffer">
            An array of bytes used to hold the Windows Metafile bits returned
            </param>
      <param name="_mappingMode">
            The mapping mode of the image.  This control uses MM_ANISOTROPIC.
            </param>
      <param name="_flags">
            Flags used to specify the format of the Windows Metafile returned
            </param>
    </member>
    <member name="M:SCICT.Utility.RTF.RTFBuilder.RTFImage.WriteImagePrefix(System.Drawing.Image,System.Single,System.Single)">
      <summary>
            Creates the RTF control string that describes the image being inserted.
            This description (in this case) specifies that the image is an
            MM_ANISOTROPIC metafile, meaning that both X and Y axes can be scaled
            independently.  The control string also gives the images current dimensions,
            and its target dimensions, so if you want to control the size of the
            image being inserted, this would be the place to do it. The prefix should
            have the form ...
            
            {\pict\wmetafile8\picw[A]\pich[B]\picwgoal[C]\pichgoal[D]
            
            where ...
            
            A	= current width of the metafile in hundredths of millimeters (0.01mm)
            	= Image Width in Inches * Number of (0.01mm) per inch
            	= (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 2540
            	= (Image Width in Pixels / Graphics.DpiX) * 2540
            
            B	= current height of the metafile in hundredths of millimeters (0.01mm)
            	= Image Height in Inches * Number of (0.01mm) per inch
            	= (Image Height in Pixels / Graphics Context's Vertical Resolution) * 2540
            	= (Image Height in Pixels / Graphics.DpiX) * 2540
            
            C	= target width of the metafile in twips
            	= Image Width in Inches * Number of twips per inch
            	= (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 1440
            	= (Image Width in Pixels / Graphics.DpiX) * 1440
            
            D	= target height of the metafile in twips
            	= Image Height in Inches * Number of twips per inch
            	= (Image Height in Pixels / Graphics Context's Horizontal Resolution) * 1440
            	= (Image Height in Pixels / Graphics.DpiX) * 1440
            
            </summary>
      <remarks>
            The Graphics Context's resolution is simply the current resolution at which
            windows is being displayed.  Normally it's 96 dpi, but instead of assuming
            I just added the code.
            
            According to Ken Howe at pbdr.com, "Twips are screen-independent units
            used to ensure that the placement and proportion of screen elements in
            your screen application are the same on all display systems."
            
            Units Used
            ----------
            1 Twip = 1/20 Point
            1 Point = 1/72 Inch
            1 Twip = 1/1440 Inch
            
            1 Inch = 2.54 cm
            1 Inch = 25.4 mm
            1 Inch = 2540 (0.01)mm
            </remarks>
      <param name="_image">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Utility.RTF.RTFBuilder.RTFImage.WriteRtfImage(System.Drawing.Image)">
      <summary>
            Wraps the image in an Enhanced Metafile by drawing the image onto the
            graphics context, then converts the Enhanced Metafile to a Windows
            Metafile, and finally appends the bits of the Windows Metafile in HEX
            to a string and returns the string.
            </summary>
      <param name="_image">
      </param>
      <returns>
            A string containing the bits of a Windows Metafile in HEX
            </returns>
    </member>
    <member name="T:SCICT.Utility.RTF.RTFBuilder.RTFRow">
      <summary>
            Rich Table Row
            </summary>
    </member>
    <member name="F:SCICT.Utility.RTF.RTFBuilder.TWIPSA4">
      <summary>
      </summary>
    </member>
    <member name="F:SCICT.Utility.RTF.RTFBuilder.TWIPSA4V">
      <summary>
      </summary>
    </member>
    <member name="M:SCICT.Utility.RTF.RTFBuilder.CheckChar(System.String)">
      <summary>
            Checks the char.
            </summary>
      <param name="value">The value.</param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.Utility.RTF.RTFCellDefinition">
      <summary>
            Definition Of Cell In Table Row
            </summary>
    </member>
    <member name="P:SCICT.Utility.RTF.RTFCellDefinition.Alignment">
      <summary>
            Gets the alignment.
            </summary>
      <value>The alignment.</value>
    </member>
    <member name="P:SCICT.Utility.RTF.RTFCellDefinition.RTFBorderSide">
      <summary>
            Gets the RTFborderside.
            </summary>
      <value>The RTF border side.</value>
    </member>
    <member name="P:SCICT.Utility.RTF.RTFCellDefinition.BorderWidth">
      <summary>
            Gets the width of the border.
            </summary>
      <value>The width of the border.</value>
    </member>
    <member name="P:SCICT.Utility.RTF.RTFCellDefinition.BorderColor">
      <summary>
            Gets the color of the border.
            </summary>
      <value>The color of the border.</value>
    </member>
    <member name="P:SCICT.Utility.RTF.RTFCellDefinition.CellWidthRaw">
      <summary>
            Gets or sets the width of the cell.
            </summary>
      <value>The width of the cell.</value>
    </member>
    <member name="P:SCICT.Utility.RTF.RTFCellDefinition.X">
      <summary>
            Gets the X.
            </summary>
      <value>The X.</value>
    </member>
    <member name="T:SCICT.Utility.RTF.RTFRowDefinition">
      <summary>
            Definition of Rich Table Row
            </summary>
    </member>
    <member name="M:SCICT.Utility.RTF.RTFRowDefinition.#ctor(System.Int32,SCICT.Utility.RTF.RTFAlignment,SCICT.Utility.RTF.RTFBorderSide,System.Int32,System.Drawing.Color,System.Windows.Forms.Padding)">
      <summary>
            Initializes a new instance of the <see cref="T:SCICT.Utility.RTF.RTFRowDefinition" /> struct.
            </summary>
      <param name="rowWidth">Width of the row.</param>
      <param name="alignment">The alignment.</param>
      <param name="rTFBorderSide">The RTFBorderSide.</param>
      <param name="borderWidth">Width of the border.</param>
      <param name="borderColor">Color of the border.</param>
    </member>
    <member name="P:SCICT.Utility.RTF.RTFRowDefinition.Alignment">
      <summary>
            Gets the alignment.
            </summary>
      <value>The alignment.</value>
    </member>
    <member name="P:SCICT.Utility.RTF.RTFRowDefinition.RTFBorderSide">
      <summary>
            Gets the RTF border side.
            </summary>
      <value>The RTF border side.</value>
    </member>
    <member name="P:SCICT.Utility.RTF.RTFRowDefinition.BorderWidth">
      <summary>
            Gets the width of the border.
            </summary>
      <value>The width of the border.</value>
    </member>
    <member name="P:SCICT.Utility.RTF.RTFRowDefinition.BorderColor">
      <summary>
            Gets the color of the border.
            </summary>
      <value>The color of the border.</value>
    </member>
    <member name="P:SCICT.Utility.RTF.RTFRowDefinition.RowWidth">
      <summary>
            Gets or sets the width of the cell.
            </summary>
      <value>The width of the cell.</value>
    </member>
    <member name="T:SCICT.Utility.RTF.RTFUtil">
      <summary>
            A Work in Progress
            </summary>
    </member>
    <member name="T:SCICT.Utility.Windows.VK">
      <summary>
            Virtual Keys
            </summary>
    </member>
    <member name="T:SCICT.Utility.Windows.WindowsHooks">
      <summary>
            Windows Hook constants (hook ids)
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Windows.MSG">
      <summary>
            Structure used by WH_GETMESSAGE
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Windows.CWPSTRUCT">
      <summary>
            Message structure used by WH_CALLWNDPROC
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Windows.MessageEventHandler">
      <summary>
            Defines a delegate for Message handling
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Windows.NativeWindowWithEvent">
      <summary>
            Inherits from System.Windows.Form.NativeWindow. Provides an Event for Message handling
            </summary>
    </member>
    <member name="T:SCICT.Microsoft.Windows.DummyWindowWithEvent">
      <summary>
            Inherits from NativeWindowWithEvent and automatic creates/destroys of a dummy window
            </summary>
    </member>
    <member name="T:SCICT.Utility.RoundQueue`1">
      <summary>
            RoundQueue used in N-Gram text reading
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:SCICT.Utility.SpellChecker.IgnoreList">
      <summary>
             An ignore list used to ignore desired words from processing
            </summary>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.IgnoreList.AddToIgnoreList(System.String)">
      <summary>
            Add a word to ignore list 
            </summary>
      <param name="word">Input word</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.IgnoreList.RemoveFromIgnoreList(System.String)">
      <summary>
            Remove a word to ignore list 
            </summary>
      <param name="word">Input word</param>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.IgnoreList.ClearIgnoreList">
      <summary>
            Clear ignore list
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.IgnoreList.IsExistInIgnoreList(System.String)">
      <summary>
            check for word existance in ignore list
            </summary>
      <param name="word">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:SCICT.Utility.SpellChecker.DictionaryTools">
      <summary>
             Tools for dictionary
            </summary>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.DictionaryTools.LoadDic(System.String)">
      <summary>
             Load a dictionary
            </summary>
      <param name="dictionaryFileName">Dictionary path</param>
      <returns>
      </returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.DictionaryTools.LoadDic(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
      <summary>
             Load a dictionary into given data structure
            </summary>
      <param name="dictionaryFileName">Dictionary path</param>
      <param name="entry">Dictionary data structure</param>
      <returns>
      </returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.DictionaryTools.LoadDic(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32[]})">
      <summary>
             Load a dictionary into given data structure considering affix combination
            </summary>
      <param name="dictionaryFileName">Dictionary path</param>
      <param name="entry">Dictionary data structure</param>
      <returns>
      </returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.DictionaryTools.GenerateLanguageModel(System.String)">
      <summary>
             Genrate a dictionary (language model) from a text corpus
            </summary>
      <param name="corpusFileName">Courpus path</param>
      <returns>
      </returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.DictionaryTools.DumpDic(System.String,System.Int32,System.Int32)">
      <summary>
             Dump dictionary to disk
            </summary>
      <param name="fileName">File path</param>
      <param name="count">Word with smaller usage frequency does not dumped</param>
      <param name="length">Word with smaller length does not dumped</param>
      <returns>
      </returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.DictionaryTools.AppendDictionary(System.String)">
      <summary>
             Append another dictionary
            </summary>
      <param name="dictionaryFileName">Dictionary path</param>
      <returns>
      </returns>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="T:SCICT.Utility.SpellChecker.LanguageModel">
      <summary>
             Generate a dictionary and freqency of usage of each word from text corpus
            </summary>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.LanguageModel.AddWord(System.String)">
      <summary>
             Add a word
            </summary>
      <param name="word">Word</param>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.LanguageModel.AddWord(System.String,System.Int32)">
      <summary>
             Add word with usage frequency
            </summary>
      <param name="word">Word</param>
      <param name="freq">Usage frequency</param>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.LanguageModel.AddWord(System.String[])">
      <summary>
             Add alist of word
            </summary>
      <param name="wordList">List of word</param>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.LanguageModel.AddPlainText(System.String)">
      <summary>
             Add a text corpus
            </summary>
      <param name="text">Text string</param>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.LanguageModel.SaveOnDisk(System.String)">
      <summary>
             Save dictionary to disk
            </summary>
      <param name="fileName">Absolute path of file</param>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.LanguageModel.SaveOnDisk(System.String,System.Boolean)">
      <summary>
             Save dictionary to disk
            </summary>
      <param name="fileName">Absolute path of file</param>
      <param name="append">Append dictionary to existing file</param>
      <exception cref="T:System.Exception">
      </exception>
    </member>
    <member name="T:SCICT.Utility.SpellChecker.SessionLogger">
      <summary>
             Log user's activity and sort by frequent of usage in each session
            </summary>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.SessionLogger.AddUsage(System.String)">
      <summary>
             Add a usage log
            </summary>
      <param name="word">Word</param>
    </member>
    <member name="M:SCICT.Utility.SpellChecker.SessionLogger.Sort(System.String[])">
      <summary>
             Sort a list of word by usage frequency
            </summary>
      <param name="words">Word</param>
      <returns>Sorted List</returns>
    </member>
    <member name="M:SCICT.VirastyarInlineVerifiers.ShrinkingVerifierBase.FindPattern(System.String)">
      <summary>
            Finds the first and the most prominent pattern in the string.
            </summary>
      <param name="content">The content to search the pattern in.</param>
    </member>
    <member name="T:SCICT.VirastyarInlineVerifiers.PersianSpellCheckerWithCache">
      <summary>
            A spell checker with cache capability. It caches the previous results and improves
            the performance of checking process this way.
            </summary>
    </member>
  </members>
</doc>